<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"

     preserveAspectRatio="none">

    <hmi:self type="system:HmiBackgroundSystemPart" displayName="Background" name="background" version="1.0.0" performanceClass="s">
        <hmi:data type="mydata"></hmi:data>
    </hmi:self>

    <g id="BackgroundRect" opacity="1">
        <rect id="ItemBGRect3"
              hmi-bind:x="{ HmiProps.Left }"
              hmi-bind:y="{ HmiProps.Top}"
              hmi-bind:width="{ HmiProps.Width}"
              hmi-bind:height="{ HmiProps.Height }"
              fill="none"
              hmi-bind:stroke-width="{ HmiProps.SelectionBorderWidth }"
              hmi-bind:stroke="{{ Converter.RGBA( HmiProps.BorderColor ) }}" />
    </g>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2019. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
	  xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:hmi="http://svg.siemens.com/hmi/"
    xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
    xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
    xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
    xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
    xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
    preserveAspectRatio="none"
    overflow="auto">

    <hmi:self type="part:HmiBadgePart" displayName="ControlBar Extended Badge Part" name="custom.extended.system.part" version="1.0.1" performanceClass="L" >

        <hmi:paramDef name="WidthMax"        type="number"      />
		<hmi:paramDef name="Height"          type="number"      />
        <hmi:paramDef name="Font"            type="HmiFontPart" />
        <hmi:paramDef name="ButtonVisible"   type="boolean"     />

    </hmi:self>

    <defs>
        <hmi:localDef name="SYS_BorderColor"      type="string"    value="#e1ebf4" />
        <hmi:localDef name="SYS_BackColor"        type="string"    value="#009999" />
        <hmi:localDef name="SYS_ForeColor"        type="string"    value="#e1ebf4" />
        <hmi:localDef name="TextMaxChars"         type="number"    value="5" />
        <hmi:localDef name="TextPadding"          type="number"    value="2" />

        <!-- Computation of numbers of Characters and font size to fit the text into the badge -->
        <hmi:localDef name="BorderWidth"          type="number"    hmi-bind:value="{{ ParamProps.Height / 8 }}" />
        <hmi:localDef name="Radius"               type="number"    hmi-bind:value="{{ ParamProps.Height / 2 }}" />
        <hmi:localDef name="TextAreaMaxHeight"    type="number"    hmi-bind:value="{{ Converter.Max( ( ParamProps.Height - 2 * LocalProps.TextPadding ), ( LocalProps.Radius * 0.7 ) ) }}" />
        <hmi:localDef name="TextAreaMaxWidth"     type="number"    hmi-bind:value="{{ Converter.Max( ( ParamProps.WidthMax - 2 * LocalProps.Radius ), LocalProps.TextAreaMaxHeight ) }}" />

        <!-- Compute font size and TextWidth -->
        <hmi:localDef name="Text"                 type="string"    hmi-bind:value="{{ HmiProps.Text != '' ? HmiProps.Text : ' ' }}" />
        <hmi:localDef name="TextCharCapped"       type="string"    hmi-bind:value="{{ Converter.TextEllipsis( LocalProps.Text, LocalProps.TextMaxChars ) }}" />
        <hmi:localDef name="TextCharCappedWidth"  type="number"    hmi-bind:value="{{ Converter.TextWidth( LocalProps.TextCharCapped, ParamProps.Font ) }}" />
        <hmi:localDef name="TextHeight"           type="number"    hmi-bind:value="{{ Converter.TextHeight( LocalProps.TextCharCapped, ParamProps.Font ) }}" />
        <hmi:localDef name="FontRelation"         type="number"    hmi-bind:value="{{ gt( LocalProps.TextCharCappedWidth, LocalProps.TextAreaMaxWidth ) ? ( Converter.Min( ( LocalProps.TextAreaMaxWidth / LocalProps.TextCharCappedWidth ), ( LocalProps.TextAreaMaxHeight / LocalProps.TextHeight ) ) ) :
                                                                                    ( gt( LocalProps.TextHeight, LocalProps.TextAreaMaxHeight ) ? ( LocalProps.TextAreaMaxHeight / LocalProps.TextHeight ) :
                                                                                    ( Converter.Min( ( LocalProps.TextAreaMaxWidth / LocalProps.TextCharCappedWidth ), ( LocalProps.TextAreaMaxHeight / LocalProps.TextHeight ) ) ) ) }}" />
        <hmi:localDef name="TextAreaWidth"        type="number"    hmi-bind:value="{{ LocalProps.TextCharCappedWidth * LocalProps.FontRelation }}" />
        <hmi:localDef name="Width"                type="number"    hmi-bind:value="{{ gt( LocalProps.TextAreaWidth, LocalProps.Radius * 1.4 ) ? ( LocalProps.TextAreaWidth + LocalProps.Radius * 2 ) : ( LocalProps.Radius * 2 ) }}" />
        <hmi:localDef name="FontRelReciproke"     type="number"    hmi-bind:value="{{ eq( LocalProps.FontRelation, 0.0 ) ? 1.0 : ( 1.0 / LocalProps.FontRelation ) }}" />
	  </defs>
    <!--   end section: definitions -->

    <!--   section: geometric elements     -->
    <g id="TIFID_BadgeElements" hmi:if="{{ and( ParamProps.ButtonVisible, HmiProps.Visible ) }}">

      <rect
           hmi-bind:x="{{ ParamProps.WidthMax - LocalProps.Width }}"
           hmi-bind:height="{ ParamProps.Height }"
           hmi-bind:width="{ LocalProps.Width }"
           hmi-bind:stroke="{ LocalProps.SYS_BorderColor }"
           hmi-bind:stroke-width="{ LocalProps.BorderWidth }"
           hmi-bind:fill="{ LocalProps.SYS_BackColor }"
           hmi-bind:rx="{ LocalProps.Radius }"
           hmi-bind:ry="{ LocalProps.Radius }">
      </rect>

      <text hmi-bind:transform="scale( {{ LocalProps.FontRelation }}, {{ LocalProps.FontRelation }} )"
            hmi-bind:fill="{ LocalProps.SYS_ForeColor }"
            hmi-bind:x="{{ LocalProps.FontRelReciproke * ( gt( LocalProps.TextAreaWidth, LocalProps.Radius * 1.4 ) ? ( ParamProps.WidthMax - LocalProps.Width + LocalProps.Radius ) : ( ParamProps.WidthMax - LocalProps.Width + ( LocalProps.Width - LocalProps.TextAreaWidth ) / 2 ) ) }}"
            hmi-bind:y="{{ ( LocalProps.FontRelReciproke * ( ParamProps.Height / 2 ) ) * 1.5 }}"
            hmi-bind:font-size="{ ParamProps.Font.Size }"
            hmi-bind:font-style="{{ ParamProps.Font.Italic ? 'italic' : 'normal' }}"
            hmi-bind:font-weight="{ ParamProps.Font.Weight }"
            hmi-bind:font-family="{ ParamProps.Font.Name }"
            hmi-bind:text-decoration="{{ Converter.TextDecoration( ParamProps.Font ) }}"
            dominant-baseline="auto">
		    <hmi:text hmi-bind:value="{ LocalProps.TextCharCapped }" />
      </text>

    </g>

    <!-- BE CAREFUL WHEN CHANGING ANYTHING BELOW THIS COMMENT !!! -->
</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2022. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-data-bind="http://svg.siemens.com/hmi/data/bind/"
     xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/"
     preserveAspectRatio="none"
     overflow="visible"
     id="custom_BlockView">
    <hmi:self type="system:HmiBlockSymbolSystemPart" displayName="Flat BlockSymbolSystemPart" name="include.style.flat.blockview">
        <hmi:data type="block-details"></hmi:data>
        <hmi:paramDef name="FocusColor"             type="string"                 />
    </hmi:self>
    <defs>
        <hmi:localDef name="TitleTag"                   type="string"         hmi-data-bind:value="{ Content.TitleTag }" />
        <hmi:localDef name="TitleHasTag"                type="boolean"        hmi-data-bind:value="{ Content.TitleHasTag }" />
        <hmi:localDef name="TitleAddress"               type="string"         hmi-data-bind:value="{ Content.TitleAddress }" />
        <hmi:localDef name="TitleAddressFore"           type="HmiColor"         hmi-data-bind:value="{ Content.TitleAddressFore }" />
        <hmi:localDef name="TitleText"                  type="string"         hmi-data-bind:value="{ Content.TitleText }" />
        <hmi:localDef name="TitleTextHeight"            type="number"         hmi-data-bind:value="{ Content.TitleTextHeight }" />
        <hmi:localDef name="TitleHeight"                type="number"         hmi-data-bind:value="{ Content.TitleHeight }" />
        <hmi:localDef name="TitleTagBackColor"          type="HmiColor"       hmi-data-bind:value="{ Content.TitleTagBackColor }" />
        <hmi:localDef name="TitleTagForeColor"          type="HmiColor"       hmi-data-bind:value="{ Content.TitleTagForeColor }" />
        <hmi:localDef name="TitleTextBackColor"         type="HmiColor"       hmi-data-bind:value="{ Content.TitleTextBackColor }" />
        <hmi:localDef name="TitleTextForeColor"         type="HmiColor"       hmi-data-bind:value="{ Content.TitleTextForeColor }" />
        <hmi:localDef name="HeaderAddress"              type="string"         hmi-data-bind:value="{ Content.HeaderAddress }" />
        <hmi:localDef name="HeaderAddressFore"          type="HmiColor"         hmi-data-bind:value="{ Content.HeaderAddressFore }" />
        <hmi:localDef name="HeaderText"                 type="string"         hmi-data-bind:value="{ Content.HeaderText }" />
        <hmi:localDef name="HeaderHeight"               type="number"         hmi-data-bind:value="{ Content.HeaderHeight }" />
        <hmi:localDef name="BlockWidth"                 type="number"         hmi-data-bind:value="{ Content.BlockWidth }" />
        <hmi:localDef name="BlockHeight"                type="number"         hmi-data-bind:value="{ Content.BlockHeight }" />
        <hmi:localDef name="IsHorizontalBlock"          type="boolean"        hmi-data-bind:value="{ Content.IsHorizontal }" />
        <hmi:localDef name="ContentText"                type="string"         hmi-data-bind:value="{ Content.ContentText }" />
        <hmi:localDef name="ContentHeight"              type="number"         hmi-data-bind:value="{ Content.ContentHeight }" />
        <hmi:localDef name="LineColor"                  type="string"         hmi-data-bind:value="{ Content.LineColor }" />
        <hmi:localDef name="HeaderFontSize"             type="string"         hmi-data-bind:value="{ Content.HeaderFontSize }" />
        <hmi:localDef name="InActive"                   type="boolean"         hmi-data-bind:value="{ Content.InActive }" />
        <hmi:localDef name="IsSelected"                 type="boolean"        hmi-data-bind:value="{ Content.IsSelected }" />
        <hmi:localDef name="TitleFont"                  type="HmiFontPart"    hmi-bind:value="{ HmiProps.TitleFont }" />
        <hmi:localDef name="ContentFont"                type="HmiFontPart"    hmi-bind:value="{ HmiProps.ContentFont }" />

        <hmi:localDef name="TitleCharLen"               type="number"         hmi-bind:value="{{ floor( LocalProps.BlockWidth / Converter.TextWidth('X', HmiProps.ContentFont )) }}" />
        <hmi:localDef name="ComputedTitleTag"           type="string"         hmi-bind:value="{{ Converter.TextEllipsis( LocalProps.TitleTag, LocalProps.TitleCharLen) }}" />
        <hmi:localDef name="ComputedTitleAddress"       type="string"         hmi-bind:value="{{ Converter.TextEllipsis( LocalProps.TitleAddress, LocalProps.TitleCharLen) }}" />
        <hmi:localDef name="ComputedHeaderAddress"      type="string"         hmi-bind:value="{{ Converter.TextEllipsis( LocalProps.HeaderAddress, LocalProps.TitleCharLen) }}" />
        <hmi:localDef name="TitleTagWidth"              type="number"         hmi-bind:value="{{ Converter.TextWidth( LocalProps.ComputedTitleTag, HmiProps.ContentFont ) }}" />
        <hmi:localDef name="SingleContentHeight"        type="number"         hmi-bind:value="{{ Converter.TextHeight( 'X', HmiProps.ContentFont) }}" />
        <hmi:localDef name="Padding"                    type="number"         value="4" />
        <hmi:localDef name="TextPadingHeight"           type="number"         hmi-bind:value="{{ LocalProps.SingleContentHeight + LocalProps.Padding/2 }}" />
        
        <hmi:localDef name="TextToSymbolPadding"        type="number"         value="10" />
        <hmi:localDef name="ActualTitleTextWidth"       type="number"         hmi-bind:value="{{ Converter.TextWidth(LocalProps.TitleText, HmiProps.TitleFont, true ) + LocalProps.TextToSymbolPadding }}" />
        <hmi:localDef name="TitleTextBeginYPos"         type="number"         hmi-bind:value="{{ -LocalProps.Padding/2 + (LocalProps.TitleAddress == '' ?  (( LocalProps.TitleHasTag ? LocalProps.TextPadingHeight : 0 ) - 2) : ( LocalProps.TitleHasTag ? 2 * LocalProps.TextPadingHeight : LocalProps.TextPadingHeight)) }}" />
      
        <hmi:localDef name="IsDashAllowed"              type="boolean"        hmi-data-bind:value="{ Content.IsDashAllowed }" />
        <hmi:localDef name="DashTypeSolid"              type="string"         value="null" />
        <hmi:localDef name="DashTypeDash"               type="string"         value="5" />
        <hmi:localDef name="DashArray"                  type="string"         hmi-bind:value="{{ and( LocalProps.InActive, LocalProps.IsDashAllowed ) ? LocalProps.DashTypeDash: LocalProps.DashTypeSolid  }}" />
        <hmi:localDef name="ParentBlockJustify"         type="string"         hmi-data-bind:value="{{ LocalProps.IsHorizontalBlock == true  ? 'start' : 'center' }}" />
        <hmi:localDef name="HeaderYPos"                 type="number"         hmi-bind:value="{{ LocalProps.IsHorizontalBlock? LocalProps.TitleHeight + 2 : LocalProps.TitleHeight }}" />
        <hmi:localDef name="UpdatedBlockWidth"          type="number"         hmi-bind:value="{{ LocalProps.IsHorizontalBlock? LocalProps.BlockWidth - 4 : LocalProps.BlockWidth }}" />
        <hmi:localDef name="XPos"                       type="number"         hmi-bind:value="{{ LocalProps.IsHorizontalBlock? 2 : 0 }}" />

    </defs>
    <g hmi-flex:width="{ HmiProps.Width }" hmi-flex:height="{ HmiProps.Height }" hmi-flex:direction ="row"
       hmi-flex:justifyContent="{ LocalProps.ParentBlockJustify }" >
      <g hmi-flex:width="{ LocalProps.BlockWidth }" hmi-flex:height="{ LocalProps.BlockHeight }" hmi-flex:alignSelf="start">
        <g>
          <rect hmi:if="{{ not( eq( LocalProps.ComputedTitleTag, '')) }}"
              hmi-bind:x="{{ LocalProps.BlockWidth / 2 - ( LocalProps.TitleTagWidth / 2 )}}"
              hmi-bind:width="{ LocalProps.TitleTagWidth }"
              hmi-bind:height="{ LocalProps.SingleContentHeight }"
              hmi-bind:fill="{{ Converter.RGBA(LocalProps.TitleTagBackColor) }}" />
          <text hmi-bind:x="{{ LocalProps.BlockWidth / 2 }}" id="TIFID_blockHeaderValue"
              hmi-bind:y="{ LocalProps.Padding }"
              hmi-bind:font-size="{ HmiProps.ContentFont.Size }"
              hmi-bind:font-style="{{ HmiProps.ContentFont.Italic ? 'italic' : 'normal' }}"
              hmi-bind:font-weight="{ HmiProps.ContentFont.Weight }" hmi-bind:font-family="{ HmiProps.ContentFont.Name }"
              hmi-bind:fill="{{ Converter.RGBA( LocalProps.TitleTagForeColor ) }}"
              text-anchor="middle" dominant-baseline="hanging">
            <hmi:text hmi-bind:value="{ LocalProps.ComputedTitleTag }" />
          </text>
          <text hmi-bind:x="{{ LocalProps.BlockWidth / 2 }}" id="TIFID_blockHeaderAddress"
                hmi-bind:y="{{ LocalProps.Padding + ( LocalProps.TitleHasTag ? LocalProps.TextPadingHeight : 0 ) - 2 }}"
                hmi-bind:font-size="{ HmiProps.TitleFont.Size }"
                hmi-bind:font-style="{{ HmiProps.TitleFont.Italic ? 'italic' : 'normal' }}"
                hmi-bind:font-weight="{ HmiProps.TitleFont.Weight }" hmi-bind:font-family="{ HmiProps.TitleFont.Name }"
                hmi-bind:fill="{{ Converter.RGBA(LocalProps.TitleAddressFore) }}"
                text-anchor="middle" dominant-baseline="hanging">
            <hmi:text hmi-bind:value="{ LocalProps.ComputedTitleAddress }" />
          </text>
          <rect
	          hmi:if="{{ not( eq( LocalProps.TitleTextBackColor, '')) }}"
	          hmi-bind:width="{ LocalProps.ActualTitleTextWidth }"
	          hmi-bind:height="{{ Converter.TextHeight( LocalProps.TitleText , HmiProps.TitleFont, true ) + LocalProps.Padding / 2 }}"
	          hmi-bind:fill="{{ Converter.RGBA(LocalProps.TitleTextBackColor) }}"
	          hmi-bind:x="{{ (LocalProps.BlockWidth/2) - (LocalProps.ActualTitleTextWidth/2)}}"
	          hmi-bind:y="{ LocalProps.TitleTextBeginYPos }"/>
          <hmi-element:textField
                hmi-bind:start-y="{{ -LocalProps.Padding/2 + (LocalProps.TitleAddress == '' ?  ( LocalProps.TitleHasTag ? LocalProps.TextPadingHeight : 0 ) : ( LocalProps.TitleHasTag ? 2 * LocalProps.TextPadingHeight : LocalProps.TextPadingHeight)) }}"
                hmi-bind:width="{ LocalProps.BlockWidth }"
                hmi-bind:height="{ LocalProps.TitleTextHeight  }"
                horizontal-text-alignment="center"
                hmi-bind:value="{ LocalProps.TitleText }"
                hmi-bind:fore-color="{{ Converter.RGBA( LocalProps.TitleTextForeColor ) }}"
                target="LocalProps.TitleText"
                output-format="{S}"
                text-wrapping="word-wrap"
                enabled="false"
                read-only="true"
                hmi-bind:horizontal-scrollbar-visibility="{{ HmiScrollBarVisibility.Collapsed }}"
                hmi-bind:vertical-scrollbar-visibility="{{ HmiScrollBarVisibility.Collapsed }}">
            <hmi-feature:font hmi-bind:scope="{ LocalProps.TitleFont }" />
          </hmi-element:textField>
        </g>
        <rect
              hmi-bind:width="{ LocalProps.UpdatedBlockWidth }"
              hmi-bind:height="{ LocalProps.HeaderHeight }"
              hmi-bind:stroke="{{ Converter.RGBA( HmiProps.BorderColor ) }}"
              stroke-width="1"
              hmi-bind:fill="{{ Converter.RGBA( HmiProps.HeaderBackColor ) }}"
              hmi-bind:x="{ LocalProps.XPos }"
              hmi-bind:y="{ LocalProps.HeaderYPos }"
		      id="TIFID_BlockBackgroundRect"/>
        <text hmi-bind:x="{{ LocalProps.BlockWidth / 2 }}" id="TIFID_blockTitleHeaderAddress"
              hmi-bind:y="{{ LocalProps.HeaderYPos + LocalProps.Padding }}"
              hmi-bind:font-size="{ HmiProps.ContentFont.Size }"
              hmi-bind:font-style="{{ HmiProps.ContentFont.Italic ? 'italic' : 'normal' }}"
              hmi-bind:font-weight="{ HmiProps.ContentFont.Weight }" hmi-bind:font-family="{ HmiProps.ContentFont.Name }"
              hmi-bind:fill="{{ Converter.RGBA(LocalProps.HeaderAddressFore) }}"
              text-anchor="middle" dominant-baseline="hanging">
            <hmi:text hmi-bind:value="{ LocalProps.ComputedHeaderAddress }" />
        </text>
        <hmi-element:textField
                     hmi-bind:width="{ LocalProps.UpdatedBlockWidth }"
                     hmi-bind:height="{ LocalProps.HeaderHeight }"
                     hmi-bind:start-y="{{ LocalProps.HeaderAddress == '' ? LocalProps.HeaderYPos : LocalProps.HeaderYPos + LocalProps.TextPadingHeight }}"
                     horizontal-text-alignment="center"
                     hmi-bind:vertical-text-alignment="{{ LocalProps.HeaderAddress == '' ? 'middle' : 'top'  }}"
                     hmi-bind:value="{ LocalProps.HeaderText }"
                     hmi-bind:fore-color="{{ Converter.RGBA( HmiProps.HeaderForeColor ) }}"
                     target="LocalProps.HeaderText"
                     multi-line="true"
                     output-format="{S}"
                     text-wrapping="word-wrap"
                     enabled="false"
                     read-only="true"
                     hmi-bind:horizontal-scrollbar-visibility="{{ HmiScrollBarVisibility.Collapsed }}"
                     hmi-bind:vertical-scrollbar-visibility="{{ HmiScrollBarVisibility.Collapsed }}">
          <hmi-feature:font hmi-bind:scope="{ HmiProps.HeaderFont }" />
        </hmi-element:textField>

        <!--Content rectangle-->
        <rect hmi:if="{{ gt(LocalProps.ContentHeight, 0) }}"
             hmi-bind:width="{ LocalProps.UpdatedBlockWidth }"
             hmi-bind:height="{ LocalProps.ContentHeight }"
             hmi-bind:y="{{ LocalProps.HeaderYPos + LocalProps.HeaderHeight + 1 }}"
             stroke-width="1"
             hmi-bind:x="{ LocalProps.XPos }"
             hmi-bind:stroke="{{ Converter.RGBA( HmiProps.BorderColor ) }}"
             hmi-bind:fill="{{ Converter.RGBA( HmiProps.ContentBackColor ) }}" />

        <g id="TIFID_TextFieldNVE" hmi:if="{{ LocalProps.ContentText != '' }}">
          <hmi-element:textField
              hmi-bind:start-y="{{ LocalProps.HeaderYPos + LocalProps.HeaderHeight + 1 }}"
              hmi-bind:width="{ LocalProps.UpdatedBlockWidth }"
              hmi-bind:height="{ LocalProps.ContentHeight }"
              horizontal-text-alignment="center"
              vertical-text-alignment="middle"
              hmi-bind:value="{ LocalProps.ContentText }"
              hmi-bind:fore-color="{{ Converter.RGBA( HmiProps.ContentForeColor ) }}"
              target="LocalProps.ContentText"
              output-format="{S}"
              text-wrapping="word-wrap"
              enabled="false"
              read-only="true"
              hmi-bind:horizontal-scrollbar-visibility="{{ HmiScrollBarVisibility.Collapsed }}"
              hmi-bind:vertical-scrollbar-visibility="{{ HmiScrollBarVisibility.Collapsed }}">
            <hmi-feature:font hmi-bind:scope="{ LocalProps.ContentFont }" />
          </hmi-element:textField>
        </g>

        <rect hmi:if="{{ LocalProps.IsSelected }}"
          hmi-bind:width="{ LocalProps.UpdatedBlockWidth }"
          hmi-bind:x="{ LocalProps.XPos }"
          hmi-bind:height="{ LocalProps.BlockHeight }"
          stroke-width="5"
          fill="none"
          hmi-bind:stroke="{ ParamProps.FocusColor }"
	      id ="TIFID_BorderRect" />

        <rect hmi:if="{{ LocalProps.IsHorizontalBlock }}"
           hmi-bind:width="{{ LocalProps.BlockWidth }}"
           hmi-bind:height="{{ LocalProps.HeaderHeight + LocalProps.ContentHeight + 5 }}"
           hmi-bind:y="{ LocalProps.TitleHeight }"
           x="0"
           stroke-width="2"
           fill="none"
           hmi-bind:stroke-dasharray="{ LocalProps.DashArray }"
           hmi-bind:stroke="{ LocalProps.LineColor }" />
      </g>
    </g>
</svg><!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2021. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg" xmlns:hmi="http://svg.siemens.com/hmi/"
		 xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
		 xmlns:hmi-types="http://svg.siemens.com/hmi/types/"
		 xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/"
		 xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
		 xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/">

  <hmi:self type="part:HmiDynamicPropertyPart" name="style.flat.breadcrumb" displayName="Content of the breadcrumb" >
    <hmi:paramDef name="Font"                      type="HmiFontPart"            />
  </hmi:self>
  <defs>
    <hmi:localDef name="PropNameText"           type="string"      value="Text"    />
    <hmi:localDef name="PropNameGraphic"        type="string"      value="Graphic" />
    <hmi:localDef name="PropNameTitleBgColor"   type="string"      value="TitleBgColor" />
    <hmi:localDef name="PropNameTitleForeColor"   type="string"      value="TitleForeColor" />
  </defs>
  <g>
    <hmi-element:listContainer hmi-bind:width="{ Layout.ActualWidth }"
                               hmi-bind:height="{ Layout.ActualHeight }"
                               source="1" >

      <hmi-feature:properties>
        <hmi-feature:select hmi-bind:name="{ LocalProps.PropNameText }"          as="Text"          />
        <hmi-feature:select hmi-bind:name="{ LocalProps.PropNameGraphic }"       as="Graphic"       />
        <hmi-feature:select hmi-bind:name="{ LocalProps.PropNameTitleBgColor }"  as="TitleBgColor"  />
        <hmi-feature:select hmi-bind:name="{ LocalProps.PropNameTitleForeColor }"  as="TitleForeColor"  />
      </hmi-feature:properties>
      <hmi:master-inline>
        <hmi:param name="Font"           type="HmiFontPart"      hmi-bind:value="{ ParamProps.Font }" />
        <hmi:template>
          <svg id="TIFID_List_Breadcrumb_Container" data-tif-type="WSI:BreadcrumbContainer"
               xmlns="http://www.w3.org/2000/svg" xmlns:hmi="http://svg.siemens.com/hmi/"
               xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/" xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/"
               xmlns:hmi-types="http://svg.siemens.com/hmi/types/"
               overflow="visible">
            <hmi:self type="system:HmiListContainerSystemPart" name="lc-master" displayName="Content of the ListContainer master" >
              <hmi:paramDef name="Font"                      type="HmiFontPart"              />
            </hmi:self>


            <hmi:inline hmi-bind:forEach="{ HmiProps.List }" x="0" y="0" hmi-flex:height="40" hmi-flex:width="{ Layout.ActualWidth }">
              <hmi:param name="Font"          type="HmiFontPart"  hmi-bind:value="{ ParamProps.Font }" />
              <hmi:param name="Width"         type="number"       hmi-bind:value="{ Layout.ActualWidth }" />
              <hmi:param name="SelectedIndex" type="number"       hmi-bind:value="{ HmiProps.SelectedIndex }" />
              <hmi:param name="Count"         type="number"       hmi-bind:value="{{ Converter.CountItems( HmiProps.List ) }}" />
              <hmi:template>
                <svg id="TIFID_List_Breadcrumb_Content" data-tif-type="WSI:BreadcrumbContent"
                     xmlns="http://www.w3.org/2000/svg" xmlns:hmi="http://svg.siemens.com/hmi/"
                     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                     xmlns:hmi-types="http://svg.siemens.com/hmi/types/"
                     xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/"
                     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
                     hmi-flex:minWidth="{ ParamProps.Width }"
                     hmi-flex:minHeight="50"
                     hmi-flex:maxHeight="100">
                  <hmi:self type="part:HmiDynamicPropertyPart" name="lc-master" displayName="Content of the ListContainer master" >
                    <hmi:paramDef name="Font"                      type="HmiFontPart"              />
                    <hmi:paramDef name="Width"                     type="number" />
                    <hmi:paramDef name="SelectedIndex"             type="number"  two-way="true" />
                    <hmi:paramDef name="Count"                     type="number" />
                  </hmi:self>
                  <rect
                      height="40"
                      hmi-bind:width="{ ParamProps.Width }"
                      hmi-bind:fill="{{ Converter.RGBA( HmiProps.TitleBgColor) }}"
                      stroke-width="0" />
                  <text
                        x="10"
                        y="25"
                        font-weight="bold"
                        hmi-bind:font-size="{ ParamProps.Font.Size }"
                        hmi-bind:font-style="{{ ParamProps.Font.Italic ? 'italic' : 'normal' }}"
                        hmi-bind:font-family="{ ParamProps.Font.Name }"
                        hmi-bind:text-decoration="{{ Converter.TextDecoration( ParamProps.Font ) }}"
                        hmi-bind:fill="{{ Converter.RGBA( HmiProps.TitleForeColor) }}">
                    <hmi:text hmi-bind:value="{ HmiProps.Text }" />
                  </text>
                </svg>
              </hmi:template>
            </hmi:inline>
          </svg>
        </hmi:template>
      </hmi:master-inline>
    </hmi-element:listContainer>
  </g>
</svg><!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2021. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/"
     preserveAspectRatio="none"
     id="custom_SystemDiagnosticBufferView"
     data-tif-type="WSI:SvgGrid">

    <hmi:self type="part:HmiDataGridViewPart" displayName="Flat SystemDiagnosisBufferView" name="style.flat.bufferview">
        <hmi:paramDef name="FocusColor"             type="string"                 />
        <hmi:paramDef name="SelectedIndex"          type="number"   two-way="true"/>
        <hmi:paramDef name="ShowFocusVisual"        type="boolean"                />
	      <hmi:paramDef name="DetailedViewHeight"     type="number"                 />
        <hmi:paramDef name="BufferTopPosition"     type="number"                 />
    </hmi:self>

    <defs>
        <hmi:localDef name="ShowFocus"              type="boolean"     hmi-bind:value="{{ and( ParamProps.ShowFocusVisual, SysProps.HasFocus ) }}"                                  />
        <hmi:localDef name="BorderWidth"            type="number"      value="1"                                                                                                    />
        <hmi:localDef name="ReducedBorderWidth"     type="number"      hmi-bind:value="{{ LocalProps.BorderWidth / 2 }}"                                                            />
        <hmi:localDef name="HeaderGridLineColor"    type="string"      hmi-bind:value="{{ Converter.RGBA(  HmiProps.HeaderSettings.HeaderGridLineColor ) }}"                        />
        <hmi:localDef name="PropNameText"           type="string"      value="Text"                                                                                                 />
        <hmi:localDef name="SplitterHeight"         type="number"      value="10"                                                                                                   />
        <hmi:localDef name="GridHeight"             type="number"      hmi-bind:value="{{ Layout.ActualHeight - ParamProps.DetailedViewHeight - LocalProps.SplitterHeight }}"    />
    
        <hmi:action id="onMove" hmi-bind:condition="{{ and( lt( LocalProps.GridHeight + EventArgs.PanDeltaY , Layout.ActualHeight - LocalProps.SplitterHeight ),  gt( LocalProps.GridHeight + EventArgs.PanDeltaY , LocalProps.SplitterHeight )) }}">
            <hmi:setProperty name="LocalProps.HeightRatio"  type="number"   hmi-bind:value="{{ ( ParamProps.DetailedViewHeight - EventArgs.PanDeltaY ) / Layout.ActualHeight }}" />
        </hmi:action>
        <hmi:action id="onSetCursorResizeNS">
            <hmi:setCursor   name="ns-resize" value="screen" />
        </hmi:action>
        <hmi:action id="onCursorResumeLeave">
            <hmi:setCursor   name="auto"      value="screen" />
        </hmi:action>
    </defs>
  <hmi-element:table auto-scroll="false" hmi-bind:config="{ HmiProps }" hmi-bind:height="{{ Layout.ActualHeight - ParamProps.BufferTopPosition }}" hmi-bind:width="{Layout.ActualWidth}" start-x="0" hmi-bind:start-y="{ParamProps.BufferTopPosition}" hmi-bind:horizontal-scrollbar-visibility="{HmiProps.HorizontalScrollBarVisibility}"
                     hmi-bind:vertical-scrollbar-visibility="{HmiProps.VerticalScrollBarVisibility}">

    <!--Column Header-->
    <hmi-feature:header>
      <hmi:master-inline>
        <hmi:param name="Padding"   type="HmiPaddingPart"   hmi-bind:value="{ HmiProps.CellPadding }" />

        <hmi:template>
          <svg xmlns="http://www.w3.org/2000/svg"
               xmlns:xlink="http://www.w3.org/1999/xlink"
               xmlns:hmi="http://svg.siemens.com/hmi/"
               xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
               height="10"
               width="10"
               id="ColumnHeaderSVG" >

            <hmi:self type="system:HmiHeaderCellSystemPart" displayName="ColumnHeader" name="columnheader" version="1.0.0" performanceClass="s">
              <hmi:paramDef name="Padding"          type="HmiPaddingPart" />
            </hmi:self>

            <defs>
              <hmi:localDef name="PaddingLeftRight"     type="number"     hmi-bind:value="{{ ( ParamProps.Padding.Left + ParamProps.Padding.Right ) }}"  />
              <hmi:localDef name="ReducedWidth"         type="number"     hmi-bind:value="{{ ( HmiProps.Width - 30 ) }}"                                 />
              <hmi:localDef name="ReducedHeight"        type="number"     hmi-bind:value="{{ ( HmiProps.Height / 2 ) }}"                                 />
              <hmi:localDef name="PadLessWidth"         type="number"     hmi-bind:value="{{ HmiProps.Width - LocalProps.PaddingLeftRight }}"            />
            </defs>

            <g id="TIFID_ColumnHeaderGroup">
              <rect id="ColumnHeaderRect"
                    hmi-bind:width="{ HmiProps.Width }"
                    hmi-bind:height="{ HmiProps.Height }"
                    hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}"/>
              <hmi:include template="include.style.flat.content.svghmi" hmi-bind:for="{ HmiProps.Content }"
                           hmi-bind:x="{ ParamProps.Padding.Left }"
                           hmi-bind:y="{ ParamProps.Padding.Top }"
                           hmi-bind:width="{{ gt( HmiProps.SortDirection, 0 ) ? (lt( ( LocalProps.PadLessWidth - 40 ), 0 ) ? 0 : ( LocalProps.PadLessWidth - 40 )) : (lt( LocalProps.PadLessWidth, 0 ) ? 0 : LocalProps.PadLessWidth) }}"
                           hmi-bind:height="{{ HmiProps.Height - ParamProps.Padding.Bottom }}">
                <hmi:param name="Graphic"         type="HmiGraphic"   hmi-bind:value="{ HmiProps.Graphic }"       />
                <hmi:param name="Text"            type="string"       hmi-bind:value="{ HmiProps.Text }"          />
                <hmi:param name="Font"            type="HmiFontPart"  hmi-bind:value="{ HmiProps.Font }"          />
                <hmi:param name="TextColor"       type="HmiColor"     hmi-bind:value="{ HmiProps.ForeColor }"     />
                <hmi:param name="GraphicWidth"    type="number"       hmi-bind:value="{ HmiProps.GraphicWidth }"  />
                <hmi:param name="GraphicHeight"   type="number"       hmi-bind:value="{ HmiProps.GraphicHeight }" />
              </hmi:include>
              <svg hmi-bind:x="{{ gt( LocalProps.ReducedWidth, 0 ) ? LocalProps.ReducedWidth : HmiProps.Width }}" hmi-bind:y="{ LocalProps.ReducedHeight }" hmi:if="{{ and( and( gt( HmiProps.SortOrder, 0 ), gt( HmiProps.SortDirection, 0 )), eq( HmiProps.AllowSort, true )) }}">
                <path d="M 5 0 L0 10 L 10 10 z" hmi-bind:transform="rotate( {{eq( HmiProps.SortDirection, 2 ) ? 180 : 0}}, 5, 5)"></path>
                <text   x="11" y="10" font-size="14" font-style="normal" font-weight="400" font-family="Siemens Sans"  >
                  <hmi:text hmi-bind:value="{ HmiProps.SortOrder }"/>
                </text>
              </svg>
            </g>
          </svg>
        </hmi:template>
      </hmi:master-inline>

    </hmi-feature:header>

    <!--Row Headers-->
    <hmi-feature:recordHeader>
      <hmi:master-inline>
        <hmi:param name="Padding"   type="HmiPaddingPart"   hmi-bind:value="{ HmiProps.CellPadding }" />
        <hmi:template>
          <svg xmlns="http://www.w3.org/2000/svg"
               xmlns:xlink="http://www.w3.org/1999/xlink"
               xmlns:hmi="http://svg.siemens.com/hmi/"
               xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
               xmlns:hmi-data-bind="http://svg.siemens.com/hmi/data/bind/"
               height="10"
               width="10" >
            <hmi:self type="system:HmiHeaderCellSystemPart" displayName="RowHeader" name="rowheader" version="1.0.0" performanceClass="s">
              <hmi:data type="header-view"></hmi:data>
              <hmi:paramDef name="Padding"      type="HmiPaddingPart" />
            </hmi:self>

            <g id="TIFID_RowHeaderGroup">
              <rect id="RowHeaderRect"
                    hmi-bind:width="{ HmiProps.Width }"
                    hmi-bind:height="{ HmiProps.Height }"
                    hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}" />
              <hmi:include template="include.style.flat.text.svghmi"
                           hmi-bind:x="{ ParamProps.Padding.Left }"
                           hmi-bind:y="{ ParamProps.Padding.Top }"
                           hmi-bind:width="{{ HmiProps.Width - ( ParamProps.Padding.Right + ParamProps.Padding.Left ) }}"
                           hmi-bind:height="{{ HmiProps.Height - ParamProps.Padding.Bottom }}">
                <hmi:param name="Text"                    type="string"                   hmi-data-bind:value="{ Content.Index }"                       />
                <hmi:param name="Font"                    type="HmiFontPart"              hmi-bind:value="{ HmiProps.Font }"                            />
                <hmi:param name="TextColor"               type="HmiColor"                 hmi-bind:value="{ HmiProps.ForeColor }"                       />
                <hmi:param name="HorizontalTextAlignment" type="HmiHorizontalAlignment"   hmi-bind:value="{ HmiProps.Content.HorizontalTextAlignment }" />
                <hmi:param name="VerticalTextAlignment"   type="HmiVerticalAlignment"     value="1"                                                     />
              </hmi:include>
            </g>
          </svg>
        </hmi:template>
      </hmi:master-inline>
    </hmi-feature:recordHeader>

    <!--Cell Content-->
    <hmi-feature:dataTemplates>
      <hmi:master-inline>
        <hmi:param name="Padding"   type="HmiPaddingPart"   hmi-bind:value="{ HmiProps.CellPadding }" />
        <hmi:template>
          <svg xmlns="http://www.w3.org/2000/svg"
               xmlns:xlink="http://www.w3.org/1999/xlink"
               xmlns:hmi="http://svg.siemens.com/hmi/"
               xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
               xmlns:hmi-data-bind="http://svg.siemens.com/hmi/data/bind/"
               height="10"
               width="10" >

            <hmi:self type="system:HmiDataCellSystemPart" displayName="DataCell" name="datacell" version="1.0.0" performanceClass="s">
              <hmi:data type="cell-view"></hmi:data>
              <hmi:paramDef name="Padding"      type="HmiPaddingPart" />
            </hmi:self>

            <g>
              <rect id="TIFID_ItemBGRect2"
                    hmi-bind:width="{ HmiProps.Width }"
                    hmi-bind:height="{ HmiProps.Height }"
                    hmi-data-bind:fill="{{ Converter.RGBA( Colors.Back ) }}"
                    stroke-width="1"/>

              <hmi:include template="include.style.flat.content.svghmi" hmi-bind:for="{ HmiProps.Content }"
                          hmi-bind:x="{ ParamProps.Padding.Left }"
                          hmi-bind:y="{ ParamProps.Padding.Top }"
                          hmi-bind:width="{{ HmiProps.Width - ParamProps.Padding.Left - ParamProps.Padding.Right }}"
                          hmi-bind:height="{{ HmiProps.Height - ParamProps.Padding.Bottom }}">
                <hmi:param name="Graphic"         type="HmiGraphic"   hmi-data-bind:value="{ Content.Graphic.Url }"       />
                <hmi:param name="Text"            type="string"       hmi-data-bind:value="{ Content.Data }"              />
                <hmi:param name="Font"            type="HmiFontPart"  hmi-bind:value="{ HmiProps.Font }"                  />
                <hmi:param name="TextColor"       type="HmiColor"     hmi-data-bind:value="{ Colors.Fore }"               />
                <hmi:param name="GraphicWidth"    type="number"       hmi-data-bind:value="{ Content.Graphic.Width }"     />
                <hmi:param name="GraphicHeight"   type="number"       hmi-data-bind:value="{ Content.Graphic.Height }"    />
              </hmi:include>
            </g>
          </svg>
        </hmi:template>
      </hmi:master-inline>
    </hmi-feature:dataTemplates>

    <!--Row Background-->
    <hmi-feature:rowBackground >
      <hmi:master-include template="include.style.flat.rowbackground.svghmi">
      </hmi:master-include>
    </hmi-feature:rowBackground>

    <!--Column Background-->
    <hmi-feature:columnBackground >
      <hmi:master-include template="include.style.flat.columnbackground.svghmi">
      </hmi:master-include>
    </hmi-feature:columnBackground>

    <!--Grid lines-->
    <hmi-feature:gridlines>
      <hmi-feature:gridline
        position-filter="begin header end" expansion="header inner"
        hmi-bind:stroke-width="{ HmiProps.GridLineWidth }"
        hmi-bind:stroke="{LocalProps.HeaderGridLineColor}"
        orientation="row column">
      </hmi-feature:gridline>
      <hmi-feature:gridline
        position-filter="inner" expansion="header"
        hmi-bind:stroke-width="{ HmiProps.GridLineWidth }"
        hmi-bind:stroke="{LocalProps.HeaderGridLineColor}"
        orientation="row column">
      </hmi-feature:gridline>
      <hmi-feature:gridline
        position-filter="inner" expansion="inner"
        hmi-bind:stroke-width="{ HmiProps.GridLineWidth }"
        hmi-bind:stroke="{{ HmiProps.GridLineVisibility == 0 ? 'rgba(0,0,0,0)' : Converter.RGBA(  HmiProps.GridLineColor ) }}"
        hmi-bind:orientation="{{ HmiProps.GridLineVisibility == 3 ? 'row column' : ( HmiProps.GridLineVisibility == 2 ? 'column':'row') }}">
      </hmi-feature:gridline>
    </hmi-feature:gridlines>

    <!--Selection-->
    <hmi-feature:selection>
      <hmi:master-inline >
        <hmi:template>
          <svg xmlns="http://www.w3.org/2000/svg"
               xmlns:xlink="http://www.w3.org/1999/xlink"
               xmlns:hmi="http://svg.siemens.com/hmi/"
               xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
               height="10"
               width="10" >
            <hmi:self type="system:HmiSelectionSystemPart" displayName="SelectionBorder" name="selectionborder" version="1.0.0" performanceClass="s">
            </hmi:self>

            <defs>
              <hmi:localDef name="ChangedBorderWidth" type="number" hmi-bind:value="{{ HmiProps.BorderWidth / 2 }}"/>
            </defs>

            <g id="TIFID_SelectionRect">
              <rect id="ItemBGRect3"
                  hmi-bind:x="{LocalProps.ChangedBorderWidth}"
                  hmi-bind:y="{LocalProps.ChangedBorderWidth}"
                  hmi-bind:width="{ HmiProps.Width}"
                  hmi-bind:height="{ HmiProps.Height }"
                  fill="none"
                  hmi-bind:stroke-width="{ HmiProps.BorderWidth }"
                  hmi-bind:stroke="{{Converter.RGBA(HmiProps.BorderColor)}}"/>
            </g>
          </svg>
        </hmi:template>
      </hmi:master-inline>
    </hmi-feature:selection>
  </hmi-element:table>

  <rect id="ItemBGRect"
        hmi-bind:x="{ LocalProps.ReducedBorderWidth }"
        hmi-bind:y="{ LocalProps.ReducedBorderWidth }"
        hmi-bind:width="{{ Layout.ActualWidth - LocalProps.BorderWidth }}"
        hmi-bind:height="{{ Layout.ActualHeight - LocalProps.BorderWidth }}"
        fill="none"
        hmi-bind:stroke-width="{{ LocalProps.ShowFocus ? 4 : 0 }}"
        hmi-bind:stroke="{{ LocalProps.ShowFocus ? ParamProps.FocusColor : 'rgba(0,0,0,0)' }}"/>
</svg><!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     preserveAspectRatio="none"
     overflow="visible">

    <hmi:self type="part:HmiSelectionItemPart" displayName="Custom Flat Checkbox Part" name="flat.custom.checkbox.part" version="1.0.1" performanceClass="L" >
        <hmi:focus focusVisual="local" canFocus="true" />

        <hmi:paramDef name="ItemOperable"           type="boolean"          />
        <hmi:paramDef name="ForeColor"              type="HmiColor"         />
        <hmi:paramDef name="BackColor"              type="HmiColor"         />
        <hmi:paramDef name="BorderColor"            type="HmiColor"         />
        <hmi:paramDef name="FocusColor"             type="HmiColor"         />
        <hmi:paramDef name="BorderWidth"            type="number"           />
        <hmi:paramDef name="Content"                type="HmiContentPart"   />
        <hmi:paramDef name="Font"                   type="HmiFontPart"      />
        <hmi:paramDef name="SelectorPosition"       type="number"           />
        <hmi:paramDef name="SelectionItemHeight"    type="number"           />
        <hmi:paramDef name="ShowVisualFocus"        type="boolean"          />
        <hmi:paramDef name="SelectionItemDefaultHeight" type="number"/>

    </hmi:self>

    <defs>
        <!-- Local definitions of this template -->
        <hmi:localDef name="ColorAlphaMask"         type="number" value="0x01000000" />
        <hmi:localDef name="HoverAlpha"             type="number" value="0xC0000000" />
        <hmi:localDef name="DisabledAlpha"          type="number" value="0x40000000" />
        <hmi:localDef name="DisabledContentAlpha"   type="number" value="0x80000000" />

        <hmi:localDef name="MouseHover"             type="number" value="0" />

        <hmi:localDef name="ShowFocus"              type="boolean" hmi-bind:value="{{ and( ParamProps.ShowVisualFocus, SysProps.HasFocus ) }}" />
        <hmi:localDef name="InnerPadding"           type="number"  hmi-bind:value="{{ floor( ParamProps.SelectionItemHeight * 0.2) }}" />

        <!-- Take the SelctionItemHeight also for the SelctionItemWidth -->
	    <hmi:localDef name="IsItemTextMultiline"    type="boolean" hmi-bind:value="{{Converter.IsMultiline(HmiProps.Text)}}"/>
        <hmi:localDef name="CheckBoxAreaWidth"      type="number" hmi-bind:value="{{ ParamProps.SelectionItemHeight - 2 * LocalProps.InnerPadding }}" />
        <hmi:localDef name="CheckBoxAreaHeight"     type="number" hmi-bind:value="{{ ParamProps.SelectionItemHeight - 2 * LocalProps.InnerPadding }}" />
        <hmi:localDef name="CheckBoxPosX"           type="number" hmi-bind:value="{{ ParamProps.SelectorPosition == HmiHorizontalAlignment.Left ? 0 : Layout.ActualWidth - LocalProps.CheckBoxAreaWidth - 2 * LocalProps.InnerPadding }}" />

        <hmi:localDef name="ContentAreaWidth"       type="number" hmi-bind:value="{{ Layout.ActualWidth - LocalProps.CheckBoxAreaWidth - 3 * LocalProps.InnerPadding }}" />
        <hmi:localDef name="ContentPosX"            type="number" hmi-bind:value="{{ ParamProps.SelectorPosition != HmiHorizontalAlignment.Left ? LocalProps.InnerPadding : Layout.ActualWidth - LocalProps.ContentAreaWidth - LocalProps.InnerPadding }}" />

        <hmi:localDef name="ContentTextColor" type="HmiColor" hmi-bind:value="{{ ParamProps.ItemOperable ? ParamProps.ForeColor : ParamProps.ForeColor % LocalProps.ColorAlphaMask + LocalProps.DisabledContentAlpha }}" />
        <hmi:localDef name="BorderColor"      type="HmiColor" hmi-bind:value="{{ ParamProps.ItemOperable ? ( LocalProps.MouseHover ? ParamProps.BorderColor % LocalProps.ColorAlphaMask + LocalProps.HoverAlpha  : ParamProps.BorderColor ) : ParamProps.BorderColor % LocalProps.ColorAlphaMask + LocalProps.DisabledAlpha }}" />
        <hmi:localDef name="BackColor"        type="HmiColor" hmi-bind:value="{{ ParamProps.ItemOperable ? (LocalProps.MouseHover ? ParamProps.BackColor % LocalProps.ColorAlphaMask + LocalProps.HoverAlpha : ParamProps.BackColor) : ParamProps.BackColor % LocalProps.ColorAlphaMask + LocalProps.DisabledAlpha }}" />
        <hmi:localDef name="CheckColor"       type="HmiColor" hmi-bind:value="{{ ParamProps.ItemOperable ? ParamProps.FocusColor : ParamProps.FocusColor % LocalProps.ColorAlphaMask + LocalProps.DisabledAlpha }}" />


        <!-- Action definitions of this template -->
        <hmi:action id="onMouseHover" hmi-bind:condition="{ ParamProps.ItemOperable }" >
            <hmi:setProperty name="LocalProps.MouseHover" type="number" value="1" />
        </hmi:action>
        <hmi:action id="onMouseDown" hmi-bind:condition="{ ParamProps.ItemOperable }" >
            <hmi:setProperty name="LocalProps.MouseHover" type="number" value="0" />
        </hmi:action>
        <hmi:action id="onMouseUp" hmi-bind:condition="{ ParamProps.ItemOperable }" >
            <hmi:setProperty name="LocalProps.MouseHover" type="number" value="1" />
        </hmi:action>
        <hmi:action id="onMouseTapped" trigger="accept" hmi-bind:condition="{ ParamProps.ItemOperable }" >
            <hmi:setProperty name="HmiProps.IsSelected" type="boolean" hmi-bind:value="{{ HmiProps.IsSelected ? false : true }}"
                             hmi-bind:condition="{{ or( or( (EventArgs.Trigger==HmiEventTrigger.Left), (EventArgs.Trigger == HmiEventTrigger.Space) ), EventArgs.Trigger==HmiEventTrigger.Touch ) }}" />
        </hmi:action>
        <hmi:action id="onMouseLeave" hmi-bind:condition="{ ParamProps.ItemOperable }" >
            <hmi:setProperty name="LocalProps.MouseHover" type="number" value="0" />
        </hmi:action>

    </defs>

    <g hmi-bind:transform="translate(0, {{ HmiProps.$index * ParamProps.SelectionItemHeight }} )">

        <g id="CheckBox" hmi-bind:transform="translate( { LocalProps.CheckBoxPosX } ,0)" hmi-bind:opacity="{{ ParamProps.ItemOperable ? 1.0 : 0.5}}">

            <rect id="CheckBoxRect"
                  hmi-bind:x="{ LocalProps.InnerPadding }"
                  hmi-bind:y="{ LocalProps.InnerPadding }"
                  hmi-bind:width="{ LocalProps.CheckBoxAreaWidth }"
                  hmi-bind:height="{ LocalProps.CheckBoxAreaHeight }"
                  hmi-bind:fill="{{ Converter.RGBA( LocalProps.BackColor ) }}"
                  hmi-bind:stroke="{{ Converter.RGBA( LocalProps.BorderColor ) }}"
                  hmi-bind:stroke-width="{ ParamProps.BorderWidth }" />

            <g id="CheckMark" hmi:if="{{ HmiProps.IsSelected }}"
               hmi-bind:transform="translate( {{ LocalProps.InnerPadding }} , {{ LocalProps.InnerPadding }} )">
                <polygon hmi-bind:points="{{ 0.17 * LocalProps.CheckBoxAreaWidth }},{{ 0.5 * LocalProps.CheckBoxAreaHeight }}
                                   {{ 0.2 * LocalProps.CheckBoxAreaWidth + 1.4 * Converter.Max( 2, ParamProps.Font.Size / 10 ) }},{{ 0.5 * LocalProps.CheckBoxAreaHeight }}
                                   {{ 0.3 * LocalProps.CheckBoxAreaWidth + 1.4 * Converter.Max( 2, ParamProps.Font.Size / 10 ) }},{{ 0.6 * LocalProps.CheckBoxAreaHeight }}
                                   {{ 0.6 * LocalProps.CheckBoxAreaWidth + 1.4 * Converter.Max( 2, ParamProps.Font.Size / 10 ) }},{{ 0.3 * LocalProps.CheckBoxAreaHeight }}
                                   {{ 0.67 * LocalProps.CheckBoxAreaWidth + 1.4 * Converter.Max( 2, ParamProps.Font.Size / 10 ) }},{{ 0.37 * LocalProps.CheckBoxAreaHeight }}
                                   {{ 0.3 * LocalProps.CheckBoxAreaWidth + 1.4 * Converter.Max( 2, ParamProps.Font.Size / 10 ) }},{{ 0.74 * LocalProps.CheckBoxAreaHeight }}"
                         stroke="none"
                         hmi-bind:fill="{{ Converter.RGBA( LocalProps.CheckColor ) }}" />

            </g>
        </g>

        <hmi:include template="include.style.flat.content.svghmi" hmi-bind:for="{ ParamProps.Content }"
                     hmi-bind:x="{ LocalProps.ContentPosX }"
                     hmi-bind:y="{{ and(LocalProps.IsItemTextMultiline, ParamProps.SelectionItemDefaultHeight == 0) ?  LocalProps.InnerPadding / 2 : LocalProps.InnerPadding }}"
                     hmi-bind:width="{ LocalProps.ContentAreaWidth }"
                     hmi-bind:height="{{ and(LocalProps.IsItemTextMultiline, ParamProps.SelectionItemDefaultHeight == 0)  ? LocalProps.CheckBoxAreaHeight + LocalProps.InnerPadding : LocalProps.CheckBoxAreaHeight }}">


            <hmi:param name="Graphic"       type="HmiGraphic"  hmi-bind:value="{ HmiProps.Graphic }" />
            <hmi:param name="GraphicWidth"  type="number"      hmi-bind:value="{ HmiProps.GraphicWidth }" />
            <hmi:param name="GraphicHeight" type="number"      hmi-bind:value="{ HmiProps.GraphicHeight }" />
            <hmi:param name="Text"          type="string"      hmi-bind:value="{ HmiProps.Text }" />
            <hmi:param name="Font"          type="HmiFontPart" hmi-bind:value="{ ParamProps.Font }" />
            <hmi:param name="TextColor"     type="HmiColor"    hmi-bind:value="{ LocalProps.ContentTextColor }" />

        </hmi:include>

        <rect id="ItemFocusRect" hmi-bind:visibility="{{ LocalProps.ShowFocus ? 'visible' : 'hidden' }}"
            hmi-bind:x="{{ LocalProps.InnerPadding - 2 }}"
            hmi-bind:y="{{ LocalProps.InnerPadding - 2 }}"
            hmi-bind:width="{{ LocalProps.ContentAreaWidth + LocalProps.ContentPosX }}"
            hmi-bind:height="{{ LocalProps.CheckBoxAreaHeight + 4 }}"
            hmi-bind:stroke="{{ Converter.RGBA( ParamProps.FocusColor ) }}"
            stroke-width="2"
            fill-opacity="0"
            />

        <rect id="TIFID_SelectionItemRect" hmi-event:mouseHover="url(#onMouseHover)" hmi-event:down="url(#onMouseDown)" hmi-event:up="url(#onMouseUp)" hmi-event:tapped="url(#onMouseTapped)" hmi-event:mouseLeave="url(#onMouseLeave)"
              hmi-bind:width="{ Layout.ActualWidth }"
              hmi-bind:height="{ ParamProps.SelectionItemHeight }"
              hmi-bind:stroke="{{ LocalProps.ShowFocus ? ParamProps.FocusColor : 'none' }}"
              fill="rgba(123,123,123,0)" />

    </g>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
               xmlns:hmi="http://svg.siemens.com/hmi/"
               xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
               xmlns:hmi-data-bind="http://svg.siemens.com/hmi/data/bind/"
               height="10" width="10" >
  <hmi:self type="system:HmiBackgroundSystemPart" displayName="ColumnBackGround" name="columnbackground" version="1.0.0" performanceClass="s">

  </hmi:self>
  <g  opacity="1">
    <rect id="ItemBGRect2"
                    x="0"
                    y="0"
                   hmi-bind:width="{ HmiProps.Width}"
                   hmi-bind:height="{ HmiProps.Height }"
                   hmi-bind:fill="{{ Converter.RGBA( HmiProps.Color ) }}"/>
  </g>
</svg><!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.2/dtd/svg12-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2021. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-types="http://svg.siemens.com/hmi/types/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     id="ItemRoot"
     preserveAspectRatio="none"
     overflow="visible">

    <hmi:self type="system:HmiListContainerSystemPart" displayName="Flat ComboBox" name="style.flat.combobox" version="2.9" performanceClass="L" >
        <hmi:focus focusVisual="local" />

        <hmi:paramDef name="MaxListBoxViewCount"   type="number"         />
        <hmi:paramDef name="Content"               type="HmiContentPart" />
        <hmi:paramDef name="Font"                  type="HmiFontPart"    />
        <hmi:paramDef name="Padding"               type="HmiPaddingPart" />
        <hmi:paramDef name="Width"                 type="number"         />
        <hmi:paramDef name="Height"                type="number"         />
        <hmi:paramDef name="ShowFocus"             type="boolean"        />
        <hmi:paramDef name="BorderWidth"           type="number"         />
        <hmi:paramDef name="FocusColor"            type="HmiColor"       />
        <hmi:paramDef name="BorderColor"           type="HmiColor"       />
        <hmi:paramDef name="AlternateBorderColor"  type="HmiColor"       />
        <hmi:paramDef name="BackColor"             type="HmiColor"       />
        <hmi:paramDef name="ForeColor"             type="HmiColor"       />
        <hmi:paramDef name="SelectionForeColor"    type="HmiColor"       />
        <hmi:paramDef name="SelectionBackColor"    type="HmiColor"       />
        <hmi:paramDef name="CollapsedBackColor"    type="HmiColor"       />
        <hmi:paramDef name="CollapsedForeColor"    type="HmiColor"       />
        <hmi:paramDef name="AlternateBackColor"    type="HmiColor"       />
        <hmi:paramDef name="GraphicWidth"          type="number"         />
        <hmi:paramDef name="GraphicHeight"         type="number"         />
        <hmi:paramDef name="Enabled"               type="boolean"        />
        <hmi:paramDef name="Operability"           type="HmiOperability" />
        <hmi:paramDef name="IOFieldType"           type="HmiIOFieldType" />
        <hmi:paramDef name="ResourceList"          type="string"         />
        <hmi:paramDef name="ResourceListDelay"     type="boolean"        />
        <hmi:paramDef name="PropNameText"          type="string"         />
        <hmi:paramDef name="PropNameGraphic"       type="string"         />
        <hmi:paramDef name="PropNameGraphicWidth"  type="string"         />
        <hmi:paramDef name="PropNameGraphicHeight" type="string"         />

        <hmi:paramDef name="SendCommand"           type="boolean"        default="false" />
        <hmi:paramDef name="CanOpenComboBox"       type="boolean"        default="true"  />
        <hmi:paramDef name="SelectedIndex"         type="number"         two-way="true"  />

    </hmi:self>

    <defs>
        <!-- variable with two ways binding  -->
        <hmi:localDef name="Pressed"    type="number" value="0" />
        <hmi:localDef name="MouseHover" type="number" value="0" />

        <hmi:localDef name="ItemOperable"    type="boolean" hmi-bind:value="{{ ParamProps.Operability == HmiOperability.Operable }}"          />
        <hmi:localDef name="InputOutputMode" type="boolean" hmi-bind:value="{{ ParamProps.IOFieldType == HmiIOFieldType.InputOutput }}"       />
        <hmi:localDef name="InputAllowed"    type="boolean" hmi-bind:value="{{ and( LocalProps.ItemOperable, LocalProps.InputOutputMode ) }}" />

        <hmi:localDef name="BorderWidth" type="number" hmi-bind:value="{ ParamProps.BorderWidth }" />
        <hmi:localDef name="BorderColor" type="number" hmi-bind:value="{ ParamProps.BorderColor }" />
        <!-- BorderColorAlphaMask: 0xC0000000 -->
        <!-- BorderPressedAlpha: 0x80000000 -->
        <hmi:localDef name="BorderColorPressed"   type="number" hmi-bind:value="{{ LocalProps.BorderColor % 0xC0000000 + 0x80000000 }}"                                                 />
        <hmi:localDef name="AlternateBorderColor" type="number" hmi-bind:value="{ ParamProps.AlternateBorderColor }"                                                                    />
        <hmi:localDef name="AlternateBorderY"     type="number" hmi-bind:value="{{ LocalProps.Pressed ? ParamProps.BorderWidth / 2 : ParamProps.Height - ParamProps.BorderWidth / 2 }}" />

        <hmi:localDef name="GraphicWidth"  type="number" hmi-bind:value="{ ParamProps.GraphicWidth }"  />
        <hmi:localDef name="GraphicHeight" type="number" hmi-bind:value="{ ParamProps.GraphicHeight }" />

        <hmi:localDef name="BackgroundRectWidth"  type="number"   hmi-bind:value="{{ ParamProps.Width - 2 * ParamProps.BorderWidth }}"                                       />
        <hmi:localDef name="BackgroundRectHeight" type="number"   hmi-bind:value="{{ ParamProps.Height - 2 * ParamProps.BorderWidth }}"                                       />
        <hmi:localDef name="ContentPositionX" type="number" hmi-bind:value="{{ ParamProps.BorderWidth + ParamProps.Padding.Left }}"                                                       />
        <hmi:localDef name="ContentPositionY" type="number" hmi-bind:value="{{ ParamProps.BorderWidth + ParamProps.Padding.Top }}"                                                        />
        <hmi:localDef name="ContentWidth"         type="number"   hmi-bind:value="{{ LocalProps.BackgroundRectWidth - ParamProps.Padding.Left - ParamProps.Padding.Right }}"  />
        <hmi:localDef name="ContentHeight"        type="number"   hmi-bind:value="{{ LocalProps.BackgroundRectHeight - ParamProps.Padding.Top  - ParamProps.Padding.Bottom }}"/>
        <!-- Dropdown Button Width is static 40px -->
        <hmi:localDef name="ButtonPositionX" type="number" hmi-bind:value="{{ ParamProps.Width - ParamProps.BorderWidth - 40 }}"/>

        <!-- for expended list -->
        <hmi:localDef name="SelectionAutoFactor"    type="number" hmi-bind:value="{{ and( ( ParamProps.Content.ContentMode == HmiContentMode.GraphicAndText ), or( ParamProps.Content.TextPosition == HmiTextPosition.Top, ParamProps.Content.TextPosition == HmiTextPosition.Bottom ) ) ? 1 - ParamProps.Content.SplitRatio : 1 }}" />
        <hmi:localDef name="SelectionItemHeight"    type="number" hmi-bind:value="{{ ParamProps.Font.Size * 1.5 / LocalProps.SelectionAutoFactor + 10 }}" />
        <hmi:localDef name="ScrollBarContentHeight" type="number" hmi-bind:value="{{ ParamProps.MaxListBoxViewCount * LocalProps.SelectionItemHeight }}"  />

        <hmi:action id="onFocusLeaveComboBox" hmi-bind:condition="{{ EventArgs.Trigger != HmiEventTrigger.Touch }}">
            <hmi:setProperty name="LocalProps.Pressed"   type="number"   value="0" />
            <hmi:sendCommand name="RESTORE"              type="boolean"  value="true" hmi-bind:condition="{ ParamProps.SendCommand }" />
        </hmi:action>

    </defs>

    <!-- the ComboBox begins here -->
    <g id="ComboBox"
        hmi-event:mouseLeave="url(#onFocusLeaveComboBox)"
        hmi-event:focusLeave="url(#onFocusLeaveComboBox)"
        hmi-bind:opacity="{{ LocalProps.ItemOperable ? 1.0 : 0.5 }}">

        <hmi-element:listContainer
            hmi-bind:width="{ ParamProps.Width }"
            hmi-bind:height="{{ LocalProps.Pressed ? LocalProps.ScrollBarContentHeight + ParamProps.Height: ParamProps.Height }}"
            hmi-bind:source="{ ParamProps.ResourceList }"
            hmi-bind:delay="{{ and( ( LocalProps.Pressed == 0 ), ParamProps.ResourceListDelay ) }}" >

            <hmi-feature:properties>
                <hmi-feature:select hmi-bind:name="{ ParamProps.PropNameText }"          as="Text"          />
                <hmi-feature:select hmi-bind:name="{ ParamProps.PropNameGraphic }"       as="Graphic"       />
                <hmi-feature:select hmi-bind:name="{ ParamProps.PropNameGraphicWidth }"  as="GraphicWidth"  />
                <hmi-feature:select hmi-bind:name="{ ParamProps.PropNameGraphicHeight }" as="GraphicHeight" />
            </hmi-feature:properties>

            <!-- ListContainer supports only a master where the collection has to be bound -->
            <hmi:master-inline>

                <hmi:param name="SelectedIndex"        type="number"         hmi-bind:value="{ ParamProps.SelectedIndex }"        />
                <hmi:param name="Pressed"              type="number"         hmi-bind:value="{ LocalProps.Pressed }"              />
                <hmi:param name="MouseHover"           type="number"         hmi-bind:value="{ LocalProps.MouseHover  }"          />
                <hmi:param name="ItemOperable"         type="boolean"        hmi-bind:value="{ LocalProps.ItemOperable }"         />
                <hmi:param name="InputOutputMode"      type="boolean"        hmi-bind:value="{ LocalProps.InputOutputMode }"      />
                <hmi:param name="InputAllowed"         type="boolean"        hmi-bind:value="{ LocalProps.InputAllowed }"         />
                <hmi:param name="SendCommand"          type="boolean"        hmi-bind:value="{ ParamProps.SendCommand }"          />
                <hmi:param name="CanOpenComboBox"      type="boolean"        hmi-bind:value="{ ParamProps.CanOpenComboBox }"      />
                <hmi:param name="Content"              type="HmiContentPart" hmi-bind:value="{ ParamProps.Content }"              />
                <hmi:param name="Width"                type="number"         hmi-bind:value="{ ParamProps.Width }"                />
                <hmi:param name="Height"               type="number"         hmi-bind:value="{ ParamProps.Height }"               />
                <hmi:param name="ForeColor"            type="HmiColor"       hmi-bind:value="{ ParamProps.ForeColor }"            />
                <hmi:param name="SelectionForeColor"   type="HmiColor"       hmi-bind:value="{ ParamProps.SelectionForeColor }"   />
                <hmi:param name="SelectionBackColor"   type="HmiColor"       hmi-bind:value="{ ParamProps.SelectionBackColor }"   />
                <hmi:param name="CollapsedBackColor"   type="HmiColor"       hmi-bind:value="{ ParamProps.CollapsedBackColor }"   />
                <hmi:param name="CollapsedForeColor"   type="HmiColor"       hmi-bind:value="{ ParamProps.CollapsedForeColor }"   />
                <hmi:param name="BackColor"            type="HmiColor"       hmi-bind:value="{ ParamProps.BackColor }"            />
                <hmi:param name="AlternateBackColor"   type="HmiColor"       hmi-bind:value="{ ParamProps.AlternateBackColor }"   />
                <hmi:param name="BorderColor"          type="HmiColor"       hmi-bind:value="{ LocalProps.BorderColor }"          />
                <hmi:param name="AlternateBorderColor" type="HmiColor"       hmi-bind:value="{ LocalProps.AlternateBorderColor }" />
                <hmi:param name="AlternateBorderY"     type="number"         hmi-bind:value="{ LocalProps.AlternateBorderY }"     />
                <hmi:param name="FocusColor"           type="HmiColor"       hmi-bind:value="{ ParamProps.FocusColor }"           />
                <hmi:param name="ShowFocus"            type="boolean"        hmi-bind:value="{ ParamProps.ShowFocus }"            />
                <hmi:param name="BorderWidth"          type="number"         hmi-bind:value="{ ParamProps.BorderWidth }"          />
                <hmi:param name="Font"                 type="HmiFontPart"    hmi-bind:value="{ ParamProps.Font }"                 />
                <hmi:param name="SelectionItemHeight"  type="number"         hmi-bind:value="{ LocalProps.SelectionItemHeight }"  />

                <!-- for scrollable area  -->
                <hmi:param name="PaddingLeftPlusRight" type="number" hmi-bind:value="{{ ParamProps.Padding.Left + ParamProps.Padding.Right }}" />
                <hmi:param name="PaddingTopPlusBottom" type="number" hmi-bind:value="{{ ParamProps.Padding.Top + ParamProps.Padding.Bottom }}" />

                <hmi:param name="BackgroundRectWidth"  type="number" hmi-bind:value="{ LocalProps.BackgroundRectWidth }"  />
                <hmi:param name="BackgroundRectHeight" type="number" hmi-bind:value="{ LocalProps.BackgroundRectHeight }" />
                <hmi:param name="ContentPositionX"     type="number" hmi-bind:value="{ LocalProps.ContentPositionX }"     />
                <hmi:param name="ContentPositionY"     type="number" hmi-bind:value="{ LocalProps.ContentPositionY }"     />
                <hmi:param name="ContentHeight"        type="number" hmi-bind:value="{ LocalProps.ContentHeight }"        />
                <hmi:param name="BorderColorPressed"   type="number" hmi-bind:value="{ LocalProps.BorderColorPressed }"   />
                <hmi:param name="ContentWidth"         type="number" hmi-bind:value="{ LocalProps.ContentWidth }"         />
                <hmi:param name="MaxListBoxViewCount"  type="number" hmi-bind:value="{ ParamProps.MaxListBoxViewCount }"  />
                <hmi:param name="ButtonColor"          type="number" hmi-bind:value="{ LocalProps.BorderColor }"          />
                <hmi:param name="ButtonPositionX"      type="number" hmi-bind:value="{ LocalProps.ButtonPositionX }"      />


                <hmi:template>
                    <svg id="list_SVG_1" overflow="visible"
                        xmlns="http://www.w3.org/2000/svg"
                        xmlns:hmi="http://svg.siemens.com/hmi/"
                        xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                        xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/"
                        xmlns:hmi-event="http://svg.siemens.com/hmi/event/">

                        <hmi:self type="system:HmiListContainerSystemPart" name="lc-master" displayName="Content of the ListContainer master" >

                            <hmi:paramDef name="SelectedIndex" type="number" two-way="true" />
                            <hmi:paramDef name="Pressed"       type="number" two-way="true" />
                            <hmi:paramDef name="MouseHover"    type="number" two-way="true" />

                            <hmi:paramDef name="ItemOperable"               type="boolean"        />
                            <hmi:paramDef name="InputOutputMode"            type="boolean"        />
                            <hmi:paramDef name="InputAllowed"               type="boolean"        />
                            <hmi:paramDef name="SendCommand"                type="boolean"        />
                            <hmi:paramDef name="CanOpenComboBox"            type="boolean"        />

                            <hmi:paramDef name="Content"                    type="HmiContentPart" />
                            <hmi:paramDef name="Width"                      type="number"         />
                            <hmi:paramDef name="Height"                     type="number"         />

                            <hmi:paramDef name="ForeColor"                  type="HmiColor"       />
                            <hmi:paramDef name="BackColor"                  type="HmiColor"       />
                            <hmi:paramDef name="SelectionForeColor"         type="HmiColor"       />
                            <hmi:paramDef name="SelectionBackColor"         type="HmiColor"       />
                            <hmi:paramDef name="CollapsedForeColor"         type="HmiColor"       />
                            <hmi:paramDef name="CollapsedBackColor"         type="HmiColor"       />
                            <hmi:paramDef name="AlternateBackColor"         type="HmiColor"       />
                            <hmi:paramDef name="BorderColor"                type="HmiColor"       />
                            <hmi:paramDef name="FocusColor"                 type="HmiColor"       />
                            <hmi:paramDef name="AlternateBorderY"           type="number"         />
                            <hmi:paramDef name="AlternateBorderColor"       type="HmiColor"       />

                            <hmi:paramDef name="BorderWidth"                type="number"         />
                            <hmi:paramDef name="ShowFocus"                  type="boolean"        />
                            <hmi:paramDef name="Font"                       type="HmiFontPart"    />
                            <hmi:paramDef name="SelectionItemHeight"        type="number"         />
                            <hmi:paramDef name="PaddingLeftPlusRight"       type="number"         />
                            <hmi:paramDef name="PaddingTopPlusBottom"       type="number"         />
                            <hmi:paramDef name="BackgroundRectWidth"        type="number"         />
                            <hmi:paramDef name="BackgroundRectHeight"       type="number"         />
                            <hmi:paramDef name="ContentPositionX"           type="number"         />
                            <hmi:paramDef name="ContentPositionY"           type="number"         />
                            <hmi:paramDef name="ContentHeight"              type="number"         />
                            <hmi:paramDef name="BorderColorPressed"         type="number"         />
                            <hmi:paramDef name="ContentWidth"               type="number"         />
                            <hmi:paramDef name="MaxListBoxViewCount"        type="number"         />
                            <hmi:paramDef name="ButtonPositionX"            type="number"         />
                            <hmi:paramDef name="ButtonColor"                type="number"         />

                        </hmi:self>

                        <defs>

                            <hmi:localDef name="IsTextTrimmed"          type="boolean"  value="false" />

                            <hmi:localDef name="ListBoxDocCount"        type="number"   hmi-bind:value="{{ Converter.CountItems( HmiProps.List ) }}" />
                            <hmi:localDef name="ListBoxViewCount"       type="number"   hmi-bind:value="{{ gt( LocalProps.ListBoxDocCount, ParamProps.MaxListBoxViewCount ) ? ParamProps.MaxListBoxViewCount : LocalProps.ListBoxDocCount }}" />
                            <hmi:localDef name="LSTViewHeight"          type="number"   hmi-bind:value="{{ LocalProps.ListBoxViewCount * ParamProps.SelectionItemHeight }}" />
                            <hmi:localDef name="BorderWidth"            type="number"   hmi-bind:value="{{ ParamProps.ShowFocus ? ( ParamProps.BorderWidth + 1 ) : ParamProps.BorderWidth }}" />
                            <hmi:localDef name="ItemRectWidth"          type="number"   hmi-bind:value="{{ ParamProps.Width - ParamProps.BorderWidth }}" />
                            <hmi:localDef name="LSTViewContainerHeight" type="number"   hmi-bind:value="{{ LocalProps.LSTViewHeight + ParamProps.BorderWidth + ParamProps.PaddingTopPlusBottom }}" />

                            <clipPath id="LSTItemClipRect2">
                                <rect id="LSTItemRect2"
                                    hmi-bind:x="{ ParamProps.ContentPositionX }"
                                    hmi-bind:y="{ ParamProps.ContentPositionY }"
                                    hmi-bind:width="{ ParamProps.ContentWidth }"
                                    hmi-bind:height="{ LocalProps.LSTViewHeight }"
                                    hmi-bind:stroke-width="{ ParamProps.BorderWidth }" />
                            </clipPath>

                            <!-- Adding ComboButtonWidth to border width to subtract added button width as well -->
                            <clipPath id="ItemClipRect">
                                <rect id="ItemRect"
                                    hmi-bind:x="{{ ParamProps.BorderWidth / 2 }}"
                                    hmi-bind:y="{{ ParamProps.BorderWidth / 2 }}"
                                    hmi-bind:width="{ LocalProps.ItemRectWidth }"
                                    hmi-bind:height="{{ ParamProps.Height - ParamProps.BorderWidth }}"
                                    hmi-bind:stroke-width="{ LocalProps.BorderWidth }" />
                            </clipPath>

                            <hmi:action id="onMouseEnter">
                                <hmi:setProperty name="LocalProps.IsTextTrimmed" type="boolean" value="false" />
                            </hmi:action>

                            <hmi:action id="onMouseHover" hmi-bind:condition="{ ParamProps.InputAllowed }">
                                <hmi:sendCommand name="SHOW_TOOLTIP" type="string" hmi-bind:value="{ HmiProps.Current.Text }" hmi-bind:condition="{{ and( ( HmiProps.Current.Text != '' ), LocalProps.IsTextTrimmed ) }}" />
                                <hmi:setProperty name="ParamProps.MouseHover" type="number" value="1" />
                            </hmi:action>

                            <hmi:action id="onMouseDown" hmi-bind:condition="{ ParamProps.InputAllowed }">
                                <hmi:setProperty name="ParamProps.MouseHover" type="number" value="0" />
                            </hmi:action>

                            <hmi:action id="onMouseTapped" hmi-bind:condition="{ ParamProps.InputAllowed }">
                                <hmi:setProperty name="ParamProps.Pressed" type="number"  hmi-bind:value="{{ ParamProps.Pressed ? 0 : 1 }}" />
                                <hmi:sendCommand name="MAXIMIZE"           type="boolean" value="true" hmi-bind:condition="{{ and ( ParamProps.SendCommand, ParamProps.Pressed == 1 ) }}"/>
                                <hmi:sendCommand name="RESTORE"            type="boolean" value="true" hmi-bind:condition="{{ and ( ParamProps.SendCommand, ParamProps.Pressed == 0 ) }}"/>
                            </hmi:action>

                            <hmi:action id="onMouseLeave" >
                                <hmi:setProperty name="ParamProps.MouseHover" type="number" value="0" hmi-bind:condition="{ ParamProps.InputAllowed }"/>
                                <hmi:sendCommand name="HIDE_TOOLTIP" />
                            </hmi:action>

                        </defs>

                        <!-- the collapsed part begins here -->
                        <g id="TIFID_CollapsSymbolicIOField"
                            hmi-event:mouseEnter="url(#onMouseEnter)"
                            hmi-event:mouseHover="url(#onMouseHover)"
                            hmi-event:down="url(#onMouseDown)"
                            hmi-event:tapped="url(#onMouseTapped)"
                            hmi-event:mouseLeave="url(#onMouseLeave)">

                            <rect id="ItemBGRect"
                                stroke-width="0"
                                hmi-bind:x="{ ParamProps.BorderWidth }"
                                hmi-bind:y="{ ParamProps.BorderWidth }"
                                hmi-bind:width="{ ParamProps.BackgroundRectWidth }"
                                hmi-bind:height="{ ParamProps.BackgroundRectHeight }"
                                hmi-bind:fill="{{ Converter.RGBA( ParamProps.CollapsedBackColor ) }}" />

                            <g>
                                <g id="TIFID_ComboboxButton" hmi:if="{ ParamProps.InputOutputMode }">
                                    <rect id="ComboboxButtonRect" width="40"
                                        hmi-bind:x="{ ParamProps.ButtonPositionX }"
                                        hmi-bind:y="{ ParamProps.BorderWidth }"
                                        hmi-bind:height="{{ ParamProps.Height - 2 * ParamProps.BorderWidth }}"
                                        hmi-bind:fill="{{ ParamProps.MouseHover ? Converter.RGBA(ParamProps.BorderColorPressed) : Converter.RGBA(ParamProps.ButtonColor) }}" />
                                    <path id="ComboboxButtonPath" fill="#FFFFFF"
                                        hmi-bind:d="M {{ ParamProps.ButtonPositionX + 14 }} {{ ParamProps.Height/2-2 }}
                                                    L {{ ParamProps.ButtonPositionX + 25 }} {{ ParamProps.Height/2-2 }}
                                                    L {{ ParamProps.ButtonPositionX + 20 }} {{ ParamProps.Height/2+4 }} Z" />
                                </g>
                                <!-- To avoid clipping of button putting separate group for content -->
                                <g clip-path="url(#ItemClipRect)">
                                    <hmi:include template="include.style.flat.content.svghmi" hmi-bind:for="{ ParamProps.Content }"
                                        hmi-bind:x="{ ParamProps.ContentPositionX }"
                                        hmi-bind:y="{ ParamProps.ContentPositionY }"
                                        hmi-bind:width="{{ ParamProps.InputAllowed ? ParamProps.ContentWidth - 40 : ParamProps.ContentWidth }}"
                                        hmi-bind:height="{ ParamProps.ContentHeight }">

                                        <hmi:param name="Graphic"       type="HmiGraphic"  hmi-bind:value="{ HmiProps.Current.Graphic }"       />
                                        <hmi:param name="GraphicWidth"  type="number"      hmi-bind:value="{ HmiProps.Current.GraphicWidth }"  />
                                        <hmi:param name="GraphicHeight" type="number"      hmi-bind:value="{ HmiProps.Current.GraphicHeight }" />
                                        <hmi:param name="Text"          type="string"      hmi-bind:value="{ HmiProps.Current.Text }"          />
                                        <hmi:param name="Font"          type="HmiFontPart" hmi-bind:value="{ ParamProps.Font }"                />
                                        <hmi:param name="TextColor"     type="HmiColor"    hmi-bind:value="{ ParamProps.CollapsedForeColor }"  />
                                        <hmi:param name="IsTextTrimmed" type="boolean"     hmi-bind:value="{ LocalProps.IsTextTrimmed }"       />

                                    </hmi:include>
                                </g>
                            </g>

                            <rect id="ItemRect_Used1" fill-opacity="0"
                                hmi-bind:stroke="{{ Converter.RGBA( or( ParamProps.Pressed, ParamProps.MouseHover ) ? ParamProps.BorderColorPressed : ParamProps.BorderColor ) }}"
                                hmi-bind:x="{{ ParamProps.BorderWidth / 2 }}"
                                hmi-bind:y="{{ ParamProps.BorderWidth / 2 }}"
                                hmi-bind:width="{ LocalProps.ItemRectWidth }"
                                hmi-bind:height="{{ ParamProps.Height - ParamProps.BorderWidth }}"
                                hmi-bind:stroke-width="{ LocalProps.BorderWidth }" />

                            <rect id="ItemRect_focus" x="0" y="0" pointer-events="none"
                                hmi-bind:width="{ ParamProps.Width }"
                                hmi-bind:height="{ ParamProps.Height }"
                                hmi-bind:fill="{{ Converter.RGBA(0xFFFFFFFF) }}"
                                hmi-bind:fill-opacity="{{ ParamProps.ItemOperable ? 0 : 0.4 }}"
                                hmi-bind:stroke="{{ Converter.RGBA( ParamProps.FocusColor ) }}"
                                hmi-bind:stroke-width="{{ ParamProps.ShowFocus ? 2 : 0 }}" />

                            <line id="AlternateItemBorder"
                                x1="0"
                                hmi-bind:y1="{ ParamProps.AlternateBorderY }"
                                hmi-bind:x2="{ ParamProps.Width }"
                                hmi-bind:y2="{ ParamProps.AlternateBorderY }"
                                hmi-bind:stroke="{{ ParamProps.ItemOperable ? Converter.RGBA( ParamProps.AlternateBorderColor ) : Converter.RGBA( ParamProps.BorderColor ) }}"
                                hmi-bind:stroke-width="{ ParamProps.BorderWidth }" />

                        </g>

                        <!-- the expanded part begins here -->
                        <g id="TIFID_ExpandedListBox" hmi:if="{{ and( ParamProps.Pressed, ParamProps.CanOpenComboBox ) }}"
                            hmi-bind:transform="translate( 0, {{ ParamProps.Height - ParamProps.BorderWidth }} )">
                            <!-- ComboBoxListElement background -->
                            <rect id="ItemLSTBGRect2"
                                stroke-width="0"
                                hmi-bind:x="{{ ParamProps.BorderWidth / 2 }}"
                                hmi-bind:y="{{ ParamProps.BorderWidth / 2 }}"
                                hmi-bind:width="{ LocalProps.ItemRectWidth }"
                                hmi-bind:height="{ LocalProps.LSTViewContainerHeight }"
                                hmi-bind:fill="{{ Converter.RGBA( ParamProps.BackColor ) }}"
                                hmi-bind:stroke="{{ Converter.RGB( ParamProps.BorderColor ) }}" />

                            <g clip-path="url(#LSTItemClipRect2)">
                                <g id="ID_GroupAllListItems" transform="translate(0)">

                                    <!-- for each list entry -->
                                    <hmi-element:scrollableArea
                                        hmi-bind:start-x="{ ParamProps.ContentPositionX }"
                                        hmi-bind:start-y="{ ParamProps.ContentPositionY }"
                                        hmi-bind:width="{ ParamProps.ContentWidth }"
                                        hmi-bind:height="{ LocalProps.LSTViewHeight }"
                                        hmi-bind:item-size="{ ParamProps.SelectionItemHeight }"
                                        hmi-bind:items="{ HmiProps.List }"
                                    >
                                        <hmi:master-include template="include.style.flat.listcontainer.svghmi">
                                            <hmi:param name="ListContainerSelectedIndex" type="number"         hmi-bind:value="{ HmiProps.SelectedIndex }"                />
                                            <hmi:param name="SelectedIndex"              type="number"         hmi-bind:value="{ ParamProps.SelectedIndex }"              />
                                            <hmi:param name="Pressed"                    type="number"         hmi-bind:value="{ ParamProps.Pressed }"                    />
                                            <hmi:param name="ItemOperable"               type="boolean"        hmi-bind:value="{ ParamProps.ItemOperable }"               />
                                            <hmi:param name="ForeColor"                  type="HmiColor"       hmi-bind:value="{ ParamProps.ForeColor }"                  />
                                            <hmi:param name="BackColor"                  type="HmiColor"       hmi-bind:value="{ ParamProps.BackColor }"                  />
                                            <hmi:param name="AlternateBackColor"         type="HmiColor"       hmi-bind:value="{ ParamProps.AlternateBackColor }"         />
                                            <hmi:param name="SelectionForeColor"         type="HmiColor"       hmi-bind:value="{ ParamProps.SelectionForeColor }"         />
                                            <hmi:param name="SelectionBackColor"         type="HmiColor"       hmi-bind:value="{ ParamProps.SelectionBackColor }"         />
                                            <hmi:param name="BorderColor"                type="HmiColor"       hmi-bind:value="{ ParamProps.BorderColor }"                />
                                            <hmi:param name="BorderWidth"                type="number"         hmi-bind:value="{ ParamProps.BorderWidth }"                />
                                            <hmi:param name="Content"                    type="HmiContentPart" hmi-bind:value="{ ParamProps.Content }"                    />
                                            <hmi:param name="Font"                       type="HmiFontPart"    hmi-bind:value="{ ParamProps.Font }"                       />
                                            <hmi:param name="SelectionItemHeight"        type="number"         hmi-bind:value="{ ParamProps.SelectionItemHeight }"        />
                                            <hmi:param name="TextPaddingLeft"            type="number"         value="5"                                                  />
                                        </hmi:master-include>
                                    </hmi-element:scrollableArea>
                                </g>
                            </g>

                            <rect id="ItemRect_Used2" fill="none"
                                hmi-bind:x="{{ ParamProps.BorderWidth / 2 }}"
                                hmi-bind:y="{{ ParamProps.BorderWidth / 2 }}"
                                hmi-bind:width="{ LocalProps.ItemRectWidth }"
                                hmi-bind:height="{ LocalProps.LSTViewContainerHeight }"
                                hmi-bind:stroke="{{ Converter.RGBA( or( ParamProps.Pressed, ParamProps.MouseHover ) ? ParamProps.BorderColorPressed : ParamProps.BorderColor ) }}"
                                hmi-bind:stroke-width="{ ParamProps.BorderWidth }" />

                        </g>

                    </svg>
                </hmi:template>
            </hmi:master-inline>
        </hmi-element:listContainer>

    </g>


 </svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     id="IncludeContentRoot"
     preserveAspectRatio="none">

    <hmi:self type="part:HmiContentPart" displayName="Flat Content Part" name="style.flat.content.part" version="2.9" performanceClass="L">

        <hmi:paramDef name="Graphic"                        type="HmiGraphic"   />
        <hmi:paramDef name="GraphicWidth"                   type="number"       />
        <hmi:paramDef name="GraphicHeight"                  type="number"       />
        <hmi:paramDef name="Text"                           type="string"       />
        <hmi:paramDef name="Font"                           type="HmiFontPart"  />
        <hmi:paramDef name="TextColor"                      type="HmiColor"     />
        <hmi:paramDef name="TextPaddingLeft"                type="number"       default="0" />
		<hmi:paramDef name="IsTextTrimmed"  				type="boolean"  	two-way="true"    />

    </hmi:self>

    <defs>
        <!-- Local definitions of this template -->
        <hmi:localDef name="MultiLine"              type="boolean"  hmi-bind:value="{{ Converter.IsMultiline( ParamProps.Text ) }}" />
        <hmi:localDef name="TextWrapping"           type="string"   value="no-wrap" />
        
        <hmi:localDef name="HasGraphic"             type="boolean"  hmi-bind:value="{{ ParamProps.Graphic != '' }}" />
        <hmi:localDef name="ContentShowGraphic"     type="number"   hmi-bind:value="{{ and( HmiProps.ContentMode != HmiContentMode.Text, LocalProps.HasGraphic ) ? 1 : 0 }}" />
        <hmi:localDef name="ContentShowText"        type="number"   hmi-bind:value="{{ or( HmiProps.ContentMode == HmiContentMode.Text, or( HmiProps.ContentMode == HmiContentMode.GraphicAndText, and( HmiProps.ContentMode == HmiContentMode.GraphicOrText, LocalProps.HasGraphic == 0 ) ) ) ? 1 : 0 }}" />
        <hmi:localDef name="SplitHorizontal"        type="boolean"  hmi-bind:value="{{ or( HmiProps.TextPosition == HmiTextPosition.Top,  HmiProps.TextPosition == HmiTextPosition.Bottom ) }}" />
        <hmi:localDef name="SplitVertical"          type="boolean"  hmi-bind:value="{{ or( HmiProps.TextPosition == HmiTextPosition.Left, HmiProps.TextPosition == HmiTextPosition.Right  ) }}" />
        <hmi:localDef name="SplitRatio"             type="number"   hmi-bind:value="{{ and( LocalProps.ContentShowGraphic, LocalProps.ContentShowText ) ? HmiProps.SplitRatio : 1.0 }}" />
        <hmi:localDef name="SplitRatioForWidth"     type="number"   hmi-bind:value="{{ LocalProps.SplitVertical   ? LocalProps.SplitRatio : 1.0 }}" />
        <hmi:localDef name="SplitRatioForHeight"    type="number"   hmi-bind:value="{{ LocalProps.SplitHorizontal ? LocalProps.SplitRatio : 1.0 }}" />
        <hmi:localDef name="Spacing"                type="number"   hmi-bind:value="{{ and( LocalProps.ContentShowGraphic, LocalProps.ContentShowText ) ? HmiProps.Spacing : 0 }}" />
        <hmi:localDef name="SpacingForWidth"        type="number"   hmi-bind:value="{{ or( HmiProps.TextPosition == HmiTextPosition.Left, HmiProps.TextPosition == HmiTextPosition.Right ) ? LocalProps.Spacing : 0 }}" />
        <hmi:localDef name="SpacingForHeight"       type="number"   hmi-bind:value="{{ or( HmiProps.TextPosition == HmiTextPosition.Top, HmiProps.TextPosition == HmiTextPosition.Bottom ) ? LocalProps.Spacing : 0 }}" />

        <hmi:localDef name="ContentWidthGraphic"    type="number"   hmi-bind:value="{{ LocalProps.SplitVertical ?  floor( (Layout.ActualWidth - LocalProps.SpacingForWidth) * LocalProps.SplitRatioForWidth      ) : Layout.ActualWidth  }}" />
        <hmi:localDef name="ContentWidthText"       type="number"   hmi-bind:value="{{ gt( ( and( LocalProps.SplitVertical, LocalProps.ContentShowGraphic ) ?  Layout.ActualWidth -  LocalProps.SpacingForWidth - LocalProps.ContentWidthGraphic : Layout.ActualWidth), 0 ) ? ( and( LocalProps.SplitVertical, LocalProps.ContentShowGraphic ) ?  Layout.ActualWidth -  LocalProps.SpacingForWidth - LocalProps.ContentWidthGraphic : Layout.ActualWidth ) : 0  }}" />
        <hmi:localDef name="ContentHeightGraphic"   type="number"   hmi-bind:value="{{ LocalProps.SplitHorizontal   ?  floor( (Layout.ActualHeight -  LocalProps.SpacingForHeight) * LocalProps.SplitRatioForHeight )  : Layout.ActualHeight }}" />
        <hmi:localDef name="ContentHeightText"      type="number"   hmi-bind:value="{{ and( LocalProps.SplitHorizontal, LocalProps.ContentShowGraphic ) ?  Layout.ActualHeight -  LocalProps.SpacingForHeight - LocalProps.ContentHeightGraphic : Layout.ActualHeight }}" />

        <hmi:localDef name="TextPositionX"          type="number"   hmi-bind:value="{{ HmiProps.TextPosition == HmiTextPosition.Right  ? ( ( LocalProps.ContentShowGraphic ) ? LocalProps.ContentWidthGraphic : 0 )  +  LocalProps.SpacingForWidth  : 0 }}" />
        <hmi:localDef name="TextPositionY"          type="number"   hmi-bind:value="{{ HmiProps.TextPosition == HmiTextPosition.Bottom ? ( ( LocalProps.ContentShowGraphic ) ? LocalProps.ContentHeightGraphic : 0 ) +  LocalProps.SpacingForHeight : 0 }}" />
        <hmi:localDef name="GraphicPositionX"       type="number"   hmi-bind:value="{{ HmiProps.TextPosition == HmiTextPosition.Left   ? LocalProps.ContentWidthText     +  LocalProps.SpacingForWidth  : 0 }}" />
        <hmi:localDef name="GraphicPositionY"       type="number"   hmi-bind:value="{{ HmiProps.TextPosition == HmiTextPosition.Top    ? LocalProps.ContentHeightText    +  LocalProps.SpacingForHeight : 0 }}" />

        <hmi:localDef name="DisplayText"            type="string"   hmi-bind:value="{{ HmiProps.TextTrimming == HmiTextTrimming.None ? ParamProps.Text : Converter.TextEllipsis( ParamProps.Text, LocalProps.ContentWidthText, ParamProps.Font ) }}" />

        <hmi:localDef name="Stretchmode"            type="string"   hmi-bind:value="{{ ( HmiProps.GraphicStretchMode == HmiGraphicStretchMode.Fill ) ? 'none' : ( ( HmiProps.GraphicStretchMode == HmiGraphicStretchMode.Uniform ) ? 'meet' : ( ( HmiProps.GraphicStretchMode == HmiGraphicStretchMode.UniformToFill ) ? 'slice' : 'none' ) ) }}" />
        <hmi:localDef name="XAlign"                 type="string"   hmi-bind:value="{{ or( ( HmiProps.GraphicStretchMode == HmiGraphicStretchMode.Fill ), ( HmiProps.GraphicStretchMode == HmiGraphicStretchMode.None ) ) ? '' : 'xMid' }}" />
        <hmi:localDef name="YAlign"                 type="string"   hmi-bind:value="{{ or( ( HmiProps.GraphicStretchMode == HmiGraphicStretchMode.Fill ), ( HmiProps.GraphicStretchMode == HmiGraphicStretchMode.None ) ) ? '' : 'YMid' }}" />
        <hmi:localDef name="ModeBlank"              type="string"   hmi-bind:value="{{ or( ( HmiProps.GraphicStretchMode == HmiGraphicStretchMode.Fill ), ( HmiProps.GraphicStretchMode == HmiGraphicStretchMode.None ) ) ? '' : ' ' }}" />

        <hmi:localDef name="StretchModeNoneX"       type="number"   hmi-bind:value="{{ ( LocalProps.ContentWidthGraphic / 2 ) - ( ParamProps.GraphicWidth / 2 ) }}" />
        <hmi:localDef name="StretchModeNoneY"       type="number"   hmi-bind:value="{{ ( LocalProps.ContentHeightGraphic / 2 ) - ( ParamProps.GraphicHeight / 2 ) }}" />

        <hmi:localDef name="T1_TextHeightFontSize"   type="number"  hmi-bind:value="{ ParamProps.Font.Size }" />

        <!-- x, y and baseline position of the text-->
        <hmi:localDef name="T1_TextAnchorX"          type="string"  hmi-bind:value="{{ HmiProps.HorizontalTextAlignment == HmiHorizontalAlignment.Center ? 'middle' : HmiProps.HorizontalTextAlignment == HmiHorizontalAlignment.Left ? 'start' : 'end' }}" />
        <hmi:localDef name="T1_TextAnchorY"          type="string"  hmi-bind:value="{{ HmiProps.VerticalTextAlignment == HmiVerticalAlignment.Center ? 'middle' : HmiProps.VerticalTextAlignment == HmiVerticalAlignment.Top ? 'start' : 'end' }}" />
        <hmi:localDef name="T1_x"                    type="number"  hmi-bind:value="{{ floor( ((LocalProps.T1_TextAnchorX == 'start' ? 0 : LocalProps.T1_TextAnchorX == 'middle' ? (LocalProps.ContentWidthText / 2) : LocalProps.ContentWidthText - 2 ))) }}" />
        <hmi:localDef name="T1_y"                    type="number"  hmi-bind:value="{{ floor( (LocalProps.T1_TextAnchorY == 'start' ? ( LocalProps.T1_TextHeightFontSize )
                                                                                                    : LocalProps.T1_TextAnchorY == 'middle' ? ( ( LocalProps.ContentHeightText + LocalProps.T1_TextHeightFontSize * 0.65 ) / 2 )
                                                                                                                                        : ( LocalProps.ContentHeightText - LocalProps.T1_TextHeightFontSize * 0.20 - 2     )  ) ) }}" />
        <hmi:action id="onMouseEnter">
            <hmi:setProperty name="ParamProps.IsTextTrimmed"     type="boolean"  hmi-bind:value="{{ gt( Converter.TextWidth( ParamProps.Text, ParamProps.Font ),  LocalProps.ContentWidthText ) }}" />
        </hmi:action>
    </defs>

    <g id="TextBehind" hmi-event:mouseEnter="url(#onMouseEnter)" hmi:if="{{ and( LocalProps.ContentShowText, ( HmiProps.TextPosition == HmiTextPosition.Behind ) ) }}" >
        <g id="SingleLineTextBehind" hmi:if="{{ not( LocalProps.MultiLine )}}">
            <!-- non templated version -->
            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/" xmlns:hmi="http://svg.siemens.com/hmi/"
                xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/" xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
                xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/" xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
                preserveAspectRatio="none"
                hmi-bind:x="{ LocalProps.TextPositionX }"
                hmi-bind:y="{ LocalProps.TextPositionY }"
                hmi-bind:width="{ LocalProps.ContentWidthText }"
                hmi-bind:height="{ LocalProps.ContentHeightText }">

                <g id="T1_TextGroup">
                    <text id="TextText_T1"
                        hmi-bind:x="{ LocalProps.T1_x }"
                        hmi-bind:y="{ LocalProps.T1_y }"
                        hmi-bind:fill="{{ Converter.RGBA( ParamProps.TextColor ) }}"
                        hmi-bind:font-size="{ ParamProps.Font.Size }"
                        hmi-bind:font-style="{{ ParamProps.Font.Italic ? 'italic' : 'normal' }}"
                        hmi-bind:font-weight="{ ParamProps.Font.Weight }"
                        hmi-bind:font-family="{ ParamProps.Font.Name }"
                        hmi-bind:text-decoration="{{ Converter.TextDecoration( ParamProps.Font ) }}"
                        hmi-bind:text-anchor="{ LocalProps.T1_TextAnchorX }">

                        <hmi:text hmi-bind:value="{ LocalProps.DisplayText }" />
                    </text>
                </g>
            </svg>
        </g>
        <g id="MultiLineTextBehind" hmi:if="{ LocalProps.MultiLine }">
            <hmi-element:textField
                hmi-bind:start-x="{ LocalProps.TextPositionX }"
                hmi-bind:start-y="{ LocalProps.TextPositionY }"
                hmi-bind:width="{ LocalProps.ContentWidthText }"
                hmi-bind:height="{ LocalProps.ContentHeightText }"
                hmi-bind:vertical-text-alignment="{ HmiProps.VerticalTextAlignment }"
                hmi-bind:horizontal-text-alignment="{ HmiProps.HorizontalTextAlignment }"
                hmi-bind:value="{ LocalProps.DisplayText }"
                hmi-bind:fore-color="{{ Converter.RGBA( ParamProps.TextColor ) }}"
                hmi-bind:text-wrapping="{ LocalProps.TextWrapping }"
                enabled="false"
                read-only="true"
                multi-line="true"
                horizontal-scrollbar-visibility="collapsed"
                vertical-scrollbar-visibility="collapsed"
                >
                <hmi-feature:font hmi-bind:scope="{ ParamProps.Font }" />
            </hmi-element:textField>
        </g>

    </g>

    <g id="Picture" hmi:if="{ LocalProps.ContentShowGraphic }">
        <svg hmi-bind:x="{ LocalProps.GraphicPositionX }"
             hmi-bind:y="{ LocalProps.GraphicPositionY }"
             hmi-bind:width="{  LocalProps.ContentWidthGraphic  }"
             hmi-bind:height="{ LocalProps.ContentHeightGraphic }">

            <image hmi-bind--xlink:href="{ ParamProps.Graphic }"
                   hmi-bind:x="{{ ( HmiProps.GraphicStretchMode == HmiGraphicStretchMode.None ) ?  LocalProps.StretchModeNoneX : 0 }}"
                   hmi-bind:y="{{ ( HmiProps.GraphicStretchMode == HmiGraphicStretchMode.None ) ?  LocalProps.StretchModeNoneY : 0 }}"
                   hmi-bind:width="{{ ( HmiProps.GraphicStretchMode == HmiGraphicStretchMode.None ) ? ParamProps.GraphicWidth : LocalProps.ContentWidthGraphic }}"
                   hmi-bind:height="{{ ( HmiProps.GraphicStretchMode == HmiGraphicStretchMode.None ) ? ParamProps.GraphicHeight : LocalProps.ContentHeightGraphic }}"
                   hmi-bind:preserveAspectRatio="{{ LocalProps.XAlign + LocalProps.YAlign + LocalProps.ModeBlank + LocalProps.Stretchmode }}" />
        </svg>
    </g>

    <g id="TextInFront" hmi-event:mouseEnter="url(#onMouseEnter)" hmi:if="{{  and( LocalProps.ContentShowText, ( HmiProps.TextPosition != HmiTextPosition.Behind ) )  }}" >
        <g id="SingleLineTextInFront" hmi:if="{{ not( LocalProps.MultiLine ) }}">
            <!-- non templated version -->
            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/" xmlns:hmi="http://svg.siemens.com/hmi/"
                xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/" xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
                xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/" xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
                preserveAspectRatio="none"
                hmi-bind:x="{ LocalProps.TextPositionX }"
                hmi-bind:y="{ LocalProps.TextPositionY }"
                hmi-bind:width="{ LocalProps.ContentWidthText }"
                hmi-bind:height="{ LocalProps.ContentHeightText }" >

                <g id="T2_TextGroup">
                    <text id="TextText"
                        hmi-bind:x="{ LocalProps.T1_x }"
                        hmi-bind:y="{ LocalProps.T1_y }"
                        hmi-bind:fill="{{ Converter.RGBA( ParamProps.TextColor ) }}" hmi-bind:font-size="{ ParamProps.Font.Size }"
                        hmi-bind:font-style="{{ ParamProps.Font.Italic ? 'italic' : 'normal' }}"
                        hmi-bind:font-weight="{ ParamProps.Font.Weight }" hmi-bind:font-family="{ ParamProps.Font.Name }"
                        hmi-bind:text-decoration="{{ Converter.TextDecoration( ParamProps.Font ) }}"
                        hmi-bind:text-anchor="{ LocalProps.T1_TextAnchorX }">

                        <hmi:text hmi-bind:value="{ LocalProps.DisplayText }" />
                    </text>
                </g>
            </svg>
        </g>
        <g id="MultiLineTextInFront" hmi:if="{ LocalProps.MultiLine }">
            <hmi-element:textField 
               hmi-bind:start-x="{ LocalProps.TextPositionX }"
                hmi-bind:start-y="{ LocalProps.TextPositionY }"
                hmi-bind:width="{ LocalProps.ContentWidthText }"
                hmi-bind:height="{ LocalProps.ContentHeightText }"
                hmi-bind:vertical-text-alignment="{ HmiProps.VerticalTextAlignment }"
                hmi-bind:horizontal-text-alignment="{ HmiProps.HorizontalTextAlignment }"                
                hmi-bind:value="{ LocalProps.DisplayText }"
                hmi-bind:fore-color="{{ Converter.RGBA( ParamProps.TextColor ) }}"
                hmi-bind:text-wrapping="{ LocalProps.TextWrapping }"
                enabled="false"
                read-only="true"
                multi-line="true"
                horizontal-scrollbar-visibility="collapsed"
                vertical-scrollbar-visibility="collapsed"
                >
                <hmi-feature:font hmi-bind:scope="{ ParamProps.Font }" />
            </hmi-element:textField>
        </g>
    </g>
</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:hmi="http://svg.siemens.com/hmi/"
    xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
    xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
    xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
    xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
    xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
    preserveAspectRatio="none"
    overflow="visible">

    <hmi:self type="part:HmiControlBarButtonPart" displayName="Extended ControlBarButton" name="extended.controlbarbutton.part" version="1.0.1" performanceClass="L">

        <hmi:paramDef name="Font"                 type="HmiFontPart" />
        <hmi:paramDef name="ControlBarOperable"   type="boolean" />
        <hmi:paramDef name="FocusColor"           type="string" />
        <hmi:paramDef name="ShowFocusVisual"      type="boolean" />

        <hmi:focus focusVisual="local" canFocus="true" />

    </hmi:self>

    <defs>
        <hmi:localDef name="MouseHover"           type="number"   value="0" />
        <hmi:localDef name="Pressed"              type="number"   value="0" />

        <hmi:localDef name="ColorAlphaMask"       type="number"   value="0x01000000" />
        <hmi:localDef name="HoverAlpha"           type="number"   value="0xC0000000" />
        <hmi:localDef name="DisabledAlpha"        type="number"   value="0x99000000" />

        <hmi:localDef name="ShowFocus"            type="boolean"  hmi-bind:value="{{ and( ParamProps.ShowFocusVisual, SysProps.HasFocus ) }}" />

        <hmi:localDef name="ContentPositionX"     type="number"   hmi-bind:value="{{ HmiProps.BorderWidth + HmiProps.Padding.Left }}" />
        <hmi:localDef name="ContentPositionY"     type="number"   hmi-bind:value="{{ HmiProps.BorderWidth + HmiProps.Padding.Top  }}" />
        <hmi:localDef name="ContentWidth"         type="number"   hmi-bind:value="{{ Layout.ActualWidth  - ( 2 * HmiProps.BorderWidth ) - HmiProps.Padding.Left - HmiProps.Padding.Right }}" />
        <hmi:localDef name="ContentHeight"        type="number"   hmi-bind:value="{{ Layout.ActualHeight - ( 2 * HmiProps.BorderWidth ) - HmiProps.Padding.Top  - HmiProps.Padding.Bottom }}" />

        <hmi:localDef name="BadgeExtentMin"       type="number"   value="6" />
        <hmi:localDef name="BadgeHeight"          type="number"   hmi-bind:value="{{ Converter.Max( 2 * Layout.ActualHeight / 5, LocalProps.BadgeExtentMin ) }}" />
        <hmi:localDef name="BadgeOffset"          type="number"   hmi-bind:value="{{ Converter.Min( LocalProps.BadgeHeight / 3, 3 ) }}" />
        <hmi:localDef name="BadgePadding"         type="number"   value="3" />

        <hmi:localDef name="ButtonOperable"       type="boolean"  hmi-bind:value="{{ and( HmiProps.Enabled, HmiProps.Operability == HmiOperability.Operable ) }}" />
        <hmi:localDef name="Operable"             type="boolean"  hmi-bind:value="{{ and( ParamProps.ControlBarOperable, LocalProps.ButtonOperable ) }}" />

        <hmi:localDef name="ForeColor"            type="HmiColor" hmi-bind:value="{{ LocalProps.Operable ? HmiProps.ForeColor : HmiProps.ForeColor % LocalProps.ColorAlphaMask + LocalProps.DisabledAlpha }}" />
        <hmi:localDef name="HoverBackColor"       type="HmiColor" hmi-bind:value="{{ HmiProps.BackColor % LocalProps.ColorAlphaMask + LocalProps.HoverAlpha }}" />
        <hmi:localDef name="DisabledBackColor"    type="HmiColor" hmi-bind:value="{{ HmiProps.BackColor % LocalProps.ColorAlphaMask + LocalProps.DisabledAlpha }}" />

        <hmi:localDef name="BackColor"            type="string"   hmi-bind:value="{{ Converter.RGBA( LocalProps.Operable ? ( LocalProps.Pressed ? HmiProps.AlternateBackColor : (LocalProps.MouseHover ? LocalProps.HoverBackColor : HmiProps.BackColor )) : LocalProps.DisabledBackColor ) }}" />

        <!-- definitions of actions -->
        <hmi:action id="onMouseHover" hmi-bind:condition="{ LocalProps.Operable }" >
            <hmi:setProperty name="LocalProps.MouseHover"     type="number" value="1" />
        </hmi:action>

        <!-- Because trigger cannot be dynamic, we must duplicate the actions for the trigger and extend the condition -->
        <hmi:action id="onMouseDown" hmi-bind:condition="{ LocalProps.Operable }" >
            <hmi:setProperty name="LocalProps.Pressed"        type="number" value="1" />
            <hmi:setProperty name="LocalProps.MouseHover"     type="number" value="0" />
            <hmi:sendCommand name="BUTTON_PRESSED"            type="number" hmi-bind:value="{ HmiProps.Mapping }" />
        </hmi:action>
        <hmi:action id="onMouseDown_Sim" trigger="accept" hmi-bind:condition="{ LocalProps.Operable }">
            <hmi:sendCommand name="BUTTON_PRESSED" 			  type="number" hmi-bind:value="{ HmiProps.Mapping }" />
        </hmi:action>

        <!-- Because trigger cannot be dynamic, we must duplicate the actions for the trigger and extend the condition -->
        <hmi:action id="onMouseUp" hmi-bind:condition="{ LocalProps.Operable }" >
            <hmi:setProperty name="LocalProps.Pressed"    	type="number" value="0" />
            <hmi:setProperty name="LocalProps.MouseHover" 	type="number" value="1" />
        </hmi:action>
        <hmi:action id="onMouseUp_Sim" trigger="accept" hmi-bind:condition="{ LocalProps.Operable }">
            <hmi:sendCommand name="BUTTON_RELEASED" 		  type="number" hmi-bind:value="{ HmiProps.Mapping }" />
        </hmi:action>
        <hmi:action id="onMouseTapped" hmi-bind:condition="{ LocalProps.Operable }" >
            <hmi:sendCommand name="BUTTON_RELEASED"       	type="number" hmi-bind:value="{ HmiProps.Mapping }" />
        </hmi:action>

        <hmi:action id="onMouseEnter" >
            <hmi:sendCommand name="BUTTON_ENTER"          type="number" hmi-bind:value="{ HmiProps.Mapping }" />
        </hmi:action>
        <hmi:action id="onMouseLeave" >
            <hmi:setProperty name="LocalProps.Pressed"    type="number" value="0" hmi-bind:condition="{ LocalProps.Operable }" />
            <hmi:setProperty name="LocalProps.MouseHover" type="number" value="0" hmi-bind:condition="{ LocalProps.Operable }" />
            <hmi:sendCommand name="BUTTON_LEAVE"          type="number" hmi-bind:value="{ HmiProps.Mapping }" />
        </hmi:action>

        <clipPath id="ItemClipRectCBB">
        <rect id="ItemRect"
            hmi-bind:width="{ Layout.ActualWidth}"
            hmi-bind:height="{ Layout.ActualHeight }"
            hmi-bind:stroke-width="{ HmiProps.BorderWidth }" />
        </clipPath>

    </defs>

    <g id="TIFID_ControlBarElement" clip-path="url(#ItemClipRectCBB)" hmi:if="{ HmiProps.Visible }"
        hmi-bind:opacity="{{ LocalProps.Operable ? 1.0 : 0.6  }}"
        hmi-event:mouseHover="url(#onMouseHover)"
        hmi-event:down="url(#onMouseDown)"
        hmi-event:up="url(#onMouseUp)"
        hmi-event:tapped="url(#onMouseTapped)"
        hmi-event:mouseEnter="url(#onMouseEnter)"
        hmi-event:mouseLeave="url(#onMouseLeave)">

        <rect id="ItemBGRect"
            hmi-bind:x="{ HmiProps.BorderWidth }"
            hmi-bind:y="{ HmiProps.BorderWidth }"
            hmi-bind:width="{{ Layout.ActualWidth - 2 * HmiProps.BorderWidth }}"
            hmi-bind:height="{{ Layout.ActualHeight - 2 * HmiProps.BorderWidth }}"
            hmi-bind:fill="{ LocalProps.BackColor }"
            stroke-width="0" />

        <hmi:include template="include.style.flat.content.svghmi" hmi-bind:for="{ HmiProps.Content }"
            hmi-bind:x="{ LocalProps.ContentPositionX }"
            hmi-bind:y="{ LocalProps.ContentPositionY }"
            hmi-bind:width="{ LocalProps.ContentWidth }"
            hmi-bind:height="{ LocalProps.ContentHeight }">

            <hmi:param name="Graphic"       type="HmiGraphic"  hmi-bind:value="{ HmiProps.Graphic }" />
            <hmi:param name="Text"          type="string"      hmi-bind:value="{ HmiProps.Text }" />
            <hmi:param name="Font"          type="HmiFontPart" hmi-bind:value="{ ParamProps.Font }" />
            <hmi:param name="TextColor"     type="HmiColor"    hmi-bind:value="{ LocalProps.ForeColor }" />
            <hmi:param name="GraphicWidth"  type="number"      hmi-bind:value="{ HmiProps.GraphicWidth }" />
            <hmi:param name="GraphicHeight" type="number"      hmi-bind:value="{ HmiProps.GraphicHeight }" />

        </hmi:include>

        <rect id="ItemRect_Used"
            fill-opacity="0"
            hmi-bind:stroke="{{ LocalProps.ShowFocus ? ParamProps.FocusColor : Converter.RGBA( HmiProps.BorderColor ) }}"
            hmi-bind:x="{{ HmiProps.BorderWidth / 2 }}"
            hmi-bind:y="{{ HmiProps.BorderWidth / 2 }}"
            hmi-bind:width="{{ Layout.ActualWidth - HmiProps.BorderWidth }}"
            hmi-bind:height="{{ Layout.ActualHeight - HmiProps.BorderWidth }}"
            hmi-bind:stroke-width="{ HmiProps.BorderWidth }" />

        <line id="ActivationIndicatorToggle" hmi:if="{ LocalProps.Operable }"
            hmi-bind:x1="{ HmiProps.BorderWidth }"
            hmi-bind:y1="{{ LocalProps.Pressed ? (HmiProps.BorderWidth + (HmiProps.BorderWidth / 2)) : (HmiProps.BorderWidth + Layout.ActualHeight - 2 * HmiProps.BorderWidth - (HmiProps.BorderWidth / 2)) }}"
            hmi-bind:x2="{{ HmiProps.BorderWidth + Layout.ActualWidth - 2 * HmiProps.BorderWidth }}"
            hmi-bind:y2="{{ LocalProps.Pressed ? (HmiProps.BorderWidth + (HmiProps.BorderWidth / 2)) : (HmiProps.BorderWidth + Layout.ActualHeight - 2 * HmiProps.BorderWidth - (HmiProps.BorderWidth / 2)) }}"
            stroke-width="2"
            hmi-bind:stroke="{{Converter.RGBA(HmiProps.AlternateBorderColor)}}" />
    </g>

    <!-- Badge inclusion -->
    <g hmi-bind:transform="translate( { LocalProps.BadgeOffset },{ -LocalProps.BadgeOffset } )"
        hmi-bind:opacity="{{ LocalProps.Operable ? 1.0 : 0.6  }}"
        hmi-event:mouseHover="url(#onMouseHover)"
        hmi-event:down="url(#onMouseDown)"
        hmi-event:up="url(#onMouseUp)"
        hmi-event:tapped="url(#onMouseTapped)"
        hmi-event:mouseEnter="url(#onMouseEnter)"
        hmi-event:mouseLeave="url(#onMouseLeave)">

        <hmi:include template="include.style.flat.badge.svghmi" hmi-bind:for="{ HmiProps.Badge }"
            hmi-bind:x="{{ -1 * LocalProps.BadgePadding }}"
            hmi-bind:y="{{ -1 * LocalProps.BadgePadding }}"
            hmi-bind:width="{{ Layout.ActualWidth + 2 * LocalProps.BadgePadding }}"
            hmi-bind:height="{{ LocalProps.BadgeHeight + 2 * LocalProps.BadgePadding }}">

            <hmi:param name="WidthMax"    		type="number"       hmi-bind:value="{ Layout.ActualWidth }" />
            <hmi:param name="Height"      		type="number"       hmi-bind:value="{ LocalProps.BadgeHeight }"  />
            <hmi:param name="Font"        		type="HmiFontPart"  hmi-bind:value="{ ParamProps.Font }"  />
            <hmi:param name="ButtonVisible"     type="boolean"      hmi-bind:value="{ HmiProps.Visible }" />

        </hmi:include>
    </g>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:hmi="http://svg.siemens.com/hmi/"
    xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
    xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
    xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
    xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
    xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
    preserveAspectRatio="none" >

    <hmi:self type="part:HmiControlBarDisplayPart" displayName="Extended ControlBarDisplay" name="extended.controlbardisplay.part" version="1.0.1" performanceClass="L">

        <hmi:paramDef name="Font"                 type="HmiFontPart" />
        <hmi:paramDef name="ControlBarOperable"   type="boolean" />
        <hmi:paramDef name="ShowFocusVisual"      type="boolean" />

        <hmi:focus focusVisual="local" canFocus="true" />

    </hmi:self>

    <defs>
        <hmi:localDef name="MouseHover"           type="number"   value="0" />
        <hmi:localDef name="Pressed"              type="number"   value="0" />
        <hmi:localDef name="DefBackColor"         type="HmiColor" value="0x00000000" />

        <hmi:localDef name="BackColorDarker"      type="HmiColor" hmi-bind:value="{ LocalProps.DefBackColor }" />
        <hmi:localDef name="BackColorHover"       type="HmiColor" hmi-bind:value="{{ Converter.Darker( LocalProps.DefBackColor, 0.6 ) }}" />
        <hmi:localDef name="ContentPositionX"     type="number"   hmi-bind:value="{ HmiProps.Padding.Left }" />
        <hmi:localDef name="ContentPositionY"     type="number"   hmi-bind:value="{ HmiProps.Padding.Top  }" />
        <hmi:localDef name="ContentWidth"         type="number"   hmi-bind:value="{{ Layout.ActualWidth  - HmiProps.Padding.Left - HmiProps.Padding.Right }}" />
        <hmi:localDef name="ContentHeight"        type="number"   hmi-bind:value="{{ Layout.ActualHeight - HmiProps.Padding.Top  - HmiProps.Padding.Bottom }}" />

        <hmi:localDef name="GradientColor1"       type="HmiColor" hmi-bind:value="{{ LocalProps.Pressed ? LocalProps.BackColorDarker : LocalProps.DefBackColor }}" />
        <hmi:localDef name="GradientColor2"       type="HmiColor" hmi-bind:value="{{ LocalProps.Pressed ? LocalProps.DefBackColor : ( LocalProps.MouseHover ? LocalProps.BackColorHover : LocalProps.BackColorDarker ) }}" />

        <hmi:localDef name="ButtonOperable"       type="boolean"  hmi-bind:value="{{ and( HmiProps.Enabled, HmiProps.Operability == HmiOperability.Operable ) }}" />
        <hmi:localDef name="Operable"             type="boolean"  hmi-bind:value="{{ and( ParamProps.ControlBarOperable, LocalProps.ButtonOperable ) }}" />

        <!-- definitions of actions -->
        <hmi:action id="onMouseHover" hmi-bind:condition="{ LocalProps.Operable }" >
            <hmi:setProperty name="LocalProps.MouseHover"     type="number" value="1" />
        </hmi:action>

        <!-- Because trigger cannot be dynamic, we must duplicate the actions for the trigger and extend the condition -->
        <hmi:action id="onMouseDown" hmi-bind:condition="{ LocalProps.Operable }" >
            <hmi:setProperty name="LocalProps.Pressed"        type="number" value="1" />
            <hmi:setProperty name="LocalProps.MouseHover"     type="number" value="0" />
            <hmi:sendCommand name="BUTTON_PRESSED"            type="number" hmi-bind:value="{ HmiProps.Mapping }" />
        </hmi:action>

        <!-- Because trigger cannot be dynamic, we must duplicate the actions for the trigger and extend the condition -->
        <hmi:action id="onMouseUp" hmi-bind:condition="{ LocalProps.Operable }" >
            <hmi:setProperty name="LocalProps.Pressed"    	type="number" value="0" />
            <hmi:setProperty name="LocalProps.MouseHover" 	type="number" value="1" />
        </hmi:action>
        <hmi:action id="onMouseTapped" hmi-bind:condition="{ LocalProps.Operable }" >
            <hmi:sendCommand name="BUTTON_RELEASED"       	type="number" hmi-bind:value="{ HmiProps.Mapping }" />
        </hmi:action>

        <hmi:action id="onMouseEnter" >
            <hmi:sendCommand name="BUTTON_ENTER"          type="number" hmi-bind:value="{ HmiProps.Mapping }" />
        </hmi:action>
        <hmi:action id="onMouseLeave" >
            <hmi:setProperty name="LocalProps.Pressed"    type="number" value="0" hmi-bind:condition="{ LocalProps.Operable }" />
            <hmi:setProperty name="LocalProps.MouseHover" type="number" value="0" hmi-bind:condition="{ LocalProps.Operable }" />
            <hmi:sendCommand name="BUTTON_LEAVE"          type="number" hmi-bind:value="{ HmiProps.Mapping }" />
        </hmi:action>

        <!-- Graphical elements of this template -->
        <linearGradient id="BgGradient_LighterDarker" gradientUnits="objectBoundingBox" x1="50%" x2="50%" y1="0%" y2="100%">
            <stop offset="0.0" hmi-bind:stop-opacity="{{ Converter.Alpha(  LocalProps.GradientColor1 ) }}" hmi-bind:stop-color="{{ Converter.RGB(  LocalProps.GradientColor1 ) }}" />
            <stop offset="1.0" hmi-bind:stop-opacity="{{ Converter.Alpha(  LocalProps.GradientColor2 ) }}" hmi-bind:stop-color="{{ Converter.RGB(  LocalProps.GradientColor2 ) }}" />
        </linearGradient>

        <clipPath id="ItemClipRectCBB">
        <rect id="ItemRect"
            hmi-bind:width="{ Layout.ActualWidth }"
            hmi-bind:height="{ Layout.ActualHeight }"
            stroke-width="0"
            rx="5" />
        </clipPath>

    </defs>

    <g id="TIFID_ControlBarElement" clip-path="url(#ItemClipRectCBB)" hmi:if="{ HmiProps.Visible }"
        hmi-event:mouseHover="url(#onMouseHover)"
        hmi-event:down="url(#onMouseDown)"
        hmi-event:up="url(#onMouseUp)"
         hmi-event:tapped="url(#onMouseTapped)"
        hmi-event:mouseEnter="url(#onMouseEnter)"
        hmi-event:mouseLeave="url(#onMouseLeave)">

        <!--  ControlbarDisplay has no ItemBGRect -->

        <hmi:include template="include.style.flat.content.svghmi" hmi-bind:for="{ HmiProps.Content }"
            hmi-bind:x="{ LocalProps.ContentPositionX }"
            hmi-bind:y="{ LocalProps.ContentPositionY }"
            hmi-bind:width="{ LocalProps.ContentWidth }"
            hmi-bind:height="{ LocalProps.ContentHeight }">

            <hmi:param name="Graphic"       type="HmiGraphic"  hmi-bind:value="{ HmiProps.Graphic }" />
            <hmi:param name="Text"          type="string"      hmi-bind:value="{ HmiProps.Text }" />
            <hmi:param name="Font"          type="HmiFontPart" hmi-bind:value="{ ParamProps.Font }" />
            <hmi:param name="TextColor"     type="HmiColor"    hmi-bind:value="{ HmiProps.ForeColor }" />
            <hmi:param name="GraphicWidth"  type="number"      hmi-bind:value="{ HmiProps.GraphicWidth }" />
            <hmi:param name="GraphicHeight" type="number"      hmi-bind:value="{ HmiProps.GraphicHeight }" />

        </hmi:include>

        <rect id="ItemRect_Used"
            fill-opacity="0"
            stroke="none"
            hmi-bind:width="{ Layout.ActualWidth }"
            hmi-bind:height="{ Layout.ActualHeight }"
            hmi-bind:stroke-width="{{ and( ParamProps.ShowFocusVisual, SysProps.HasFocus ) ? 4 : 0 }}"
            rx="5" />
    </g>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:hmi="http://svg.siemens.com/hmi/"
    xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
    xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
    xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
    xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
    xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
    xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/"

    hmi-flex:shrink="0"
    hmi-flex:grow="{{ ( HmiProps.Type == HmiScreenObjectType.ControlBarTextBoxPart ) ? 1 : 0 }}"
    hmi-flex:width="{{ HmiProps.Visible ? HmiProps.Width : 0 }}"
    hmi-flex:height="{{ HmiProps.Visible ? HmiProps.Height : 0 }}"
    hmi-flex:marginLeft="{{ HmiProps.Visible ? (HmiProps.Margin.Left / 2) : 0 }}"
    hmi-flex:marginTop="{{ HmiProps.Visible ? (HmiProps.Margin.Top / 2) : 0 }}"
    hmi-flex:marginBottom="{{ HmiProps.Visible ? (HmiProps.Margin.Bottom / 2) : 0 }}"
    hmi-flex:marginRight="{{ HmiProps.Visible ? (HmiProps.Margin.Right / 2) : 0 }}"
    preserveAspectRatio="none"
    overflow="visible">

<hmi:self type="part:HmiControlBarElementPartBase" displayName="Extended ControlBarElement" name="extended.controlbarelement.part" version="1.0.1" performanceClass="L">

        <hmi:paramDef name="Font"                 type="HmiFontPart" />
        <hmi:paramDef name="ControlBarOperable"   type="boolean" />
        <hmi:paramDef name="FocusColor"           type="string" />
        <hmi:paramDef name="ShowFocusVisual"      type="boolean" />

    </hmi:self>

    <g id="IncludeControlBarElementContainer" hmi:if="{ HmiProps.Visible }">
        <g hmi:if="{{ HmiProps.Type == HmiScreenObjectType.ControlBarButtonPart }}" id="IncludeControlBarElementButton" >
            <hmi:include template="include.style.flat.controlbarbutton.default.svghmi" hmi-bind:for="{ HmiProps }"
                hmi-bind:width="{ Layout.ActualWidth }"
                hmi-bind:height="{ Layout.ActualHeight }">
                <hmi:param name="Font" 					type="HmiFontPart" 	hmi-bind:value="{ ParamProps.Font }" 				/>
                <hmi:param name="ControlBarOperable" 	type="boolean" 		hmi-bind:value="{ ParamProps.ControlBarOperable }" 	/>
                <hmi:param name="FocusColor" 			type="string" 	 	hmi-bind:value="{ ParamProps.FocusColor }" 			/>
                <hmi:param name="ShowFocusVisual"		type="boolean" 	 	hmi-bind:value="{ ParamProps.ShowFocusVisual }"		/>
            </hmi:include>
        </g>

        <g hmi:if="{{ HmiProps.Type == HmiScreenObjectType.ControlBarDisplayPart }}" id="IncludeControlBarElementDisplay" >
            <hmi:include template="include.style.flat.controlbardisplay.default.svghmi" hmi-bind:for="{ HmiProps }"
                hmi-bind:width="{ Layout.ActualWidth }"
                hmi-bind:height="{ Layout.ActualHeight }">
                <hmi:param name="Font" 					type="HmiFontPart" 	hmi-bind:value="{ ParamProps.Font }" 				/>
                <hmi:param name="ControlBarOperable" 	type="boolean"      hmi-bind:value="{ ParamProps.ControlBarOperable }" 	/>
                <hmi:param name="ShowFocusVisual"		type="boolean" 	 	hmi-bind:value="{ ParamProps.ShowFocusVisual }"		/>
            </hmi:include>
        </g>

        <g hmi:if="{{ HmiProps.Type == HmiScreenObjectType.ControlBarLabelPart }}" id="IncludeControlBarElementLabel" >
            <hmi:include template="include.style.flat.controlbarlabel.default.svghmi" hmi-bind:for="{ HmiProps }"
                hmi-bind:width="{ Layout.ActualWidth }"
                hmi-bind:height="{ Layout.ActualHeight }">
                <hmi:param name="Font" 					type="HmiFontPart" 	hmi-bind:value="{ ParamProps.Font }" 				/>
                <hmi:param name="ControlBarOperable" 	type="boolean"      hmi-bind:value="{ ParamProps.ControlBarOperable }" 	/>
                <hmi:param name="FocusColor" 			type="string" 	 	hmi-bind:value="{ ParamProps.FocusColor }" 			/>
                <hmi:param name="ShowFocusVisual"		type="boolean" 	 	hmi-bind:value="{ ParamProps.ShowFocusVisual }"		/>
            </hmi:include>
        </g>

        <g hmi:if="{{ HmiProps.Type == HmiScreenObjectType.ControlBarSeparatorPart }}" id="IncludeControlBarElementSeparator" >
            <hmi:include template="include.style.flat.controlbarseparator.default.svghmi" hmi-bind:for="{ HmiProps }"
                hmi-bind:width="{ Layout.ActualWidth }"
                hmi-bind:height="{ Layout.ActualHeight }">
            </hmi:include>
        </g>

        <g hmi:if="{{ HmiProps.Type == HmiScreenObjectType.ControlBarTextBoxPart }}" id="IncludeControlBarElementTextBox" >
            <hmi:include template="include.style.flat.controlbartextbox.default.svghmi" hmi-bind:for="{ HmiProps }"
                hmi-bind:width="{ Layout.ActualWidth }"
                hmi-bind:height="{ Layout.ActualHeight }">
                <hmi:param name="Font" 					type="HmiFontPart" 	hmi-bind:value="{ ParamProps.Font }" 				/>
                <hmi:param name="ControlBarOperable" 	type="boolean"      hmi-bind:value="{ ParamProps.ControlBarOperable }" 	/>
                <hmi:param name="FocusColor" 			type="string" 	 	hmi-bind:value="{ ParamProps.FocusColor }" 			/>
                <hmi:param name="ShowFocusVisual"		type="boolean" 	 	hmi-bind:value="{ ParamProps.ShowFocusVisual }"		/>
            </hmi:include>
        </g>

        <g hmi:if="{{ HmiProps.Type == HmiScreenObjectType.ControlBarToggleSwitchPart }}" id="IncludeControlBarElementToggleSwitch">
            <hmi:include template="include.style.flat.controlbartoggleswitch.default.svghmi" hmi-bind:for="{ HmiProps }"
                hmi-bind:width="{ Layout.ActualWidth }"
                hmi-bind:height="{ Layout.ActualHeight }">
                <hmi:param name="Font" 					type="HmiFontPart"  hmi-bind:value="{ ParamProps.Font }"                />
                <hmi:param name="ControlBarOperable" 	type="boolean"      hmi-bind:value="{ ParamProps.ControlBarOperable }"  />
                <hmi:param name="FocusColor"            type="string"       hmi-bind:value="{ ParamProps.FocusColor }"          />
                <hmi:param name="ShowFocusVisual"		type="boolean" 	 	hmi-bind:value="{ ParamProps.ShowFocusVisual }"		/>
            </hmi:include>
        </g>
    </g>
</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:hmi="http://svg.siemens.com/hmi/"
    xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
    xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
    xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
    xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
    xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
    preserveAspectRatio="none" >

    <hmi:self type="part:HmiControlBarLabelPart" displayName="Extended ControlBarLabel" name="extended.controlbarlabel.part" version="1.0.1" performanceClass="L">

        <hmi:paramDef name="Font"                 type="HmiFontPart" />
        <hmi:paramDef name="ControlBarOperable"   type="boolean" />
        <hmi:paramDef name="FocusColor"           type="string" />
        <hmi:paramDef name="ShowFocusVisual"      type="boolean" />

        <hmi:focus focusVisual="local" canFocus="true" />

    </hmi:self>

    <defs>
        <hmi:localDef name="MouseHover"           type="number"   value="0" />
        <hmi:localDef name="Pressed"              type="number"   value="0" />
        <hmi:localDef name="DefBorderColor"       type="HmiColor" value="0x00000000" />
        <hmi:localDef name="DefBorderWidth"       type="number"   value="0" />

        <hmi:localDef name="BorderColorAlphaMask" type="number"   value="0x01000000" />
        <hmi:localDef name="BorderPressedAlpha"   type="number"   value="0x80000000" />

        <hmi:localDef name="ShowFocus"            type="boolean"  hmi-bind:value="{{ and( ParamProps.ShowFocusVisual, SysProps.HasFocus ) }}" />
        <hmi:localDef name="BorderColorPressed"   type="string"   hmi-bind:value="{{ Converter.RGBA( ( LocalProps.DefBorderColor % LocalProps.BorderColorAlphaMask ) + LocalProps.BorderPressedAlpha ) }}" />
        <hmi:localDef name="BorderColor"          type="string"   hmi-bind:value="{{ Converter.RGBA( LocalProps.DefBorderColor ) }}" />

        <hmi:localDef name="ContentPositionX"     type="number"   hmi-bind:value="{{ LocalProps.DefBorderWidth + HmiProps.Padding.Left }}" />
        <hmi:localDef name="ContentPositionY"     type="number"   hmi-bind:value="{{ LocalProps.DefBorderWidth + HmiProps.Padding.Top  }}" />
        <hmi:localDef name="ContentWidth"         type="number"   hmi-bind:value="{{ Layout.ActualWidth  - ( 2 * LocalProps.DefBorderWidth ) - HmiProps.Padding.Left - HmiProps.Padding.Right }}" />
        <hmi:localDef name="ContentHeight"        type="number"   hmi-bind:value="{{ Layout.ActualHeight - ( 2 * LocalProps.DefBorderWidth ) - HmiProps.Padding.Top  - HmiProps.Padding.Bottom }}" />

        <hmi:localDef name="ButtonOperable"       type="boolean"  hmi-bind:value="{{ and( HmiProps.Enabled, HmiProps.Operability == HmiOperability.Operable ) }}" />
        <hmi:localDef name="Operable"             type="boolean"  hmi-bind:value="{{ and( ParamProps.ControlBarOperable, LocalProps.ButtonOperable ) }}" />

        <!-- definitions of actions -->
        <hmi:action id="onMouseHover" hmi-bind:condition="{ LocalProps.Operable }" >
            <hmi:setProperty name="LocalProps.MouseHover"     type="number" value="1" />
        </hmi:action>

        <!-- Because trigger cannot be dynamic, we must duplicate the actions for the trigger and extend the condition -->
        <hmi:action id="onMouseDown" hmi-bind:condition="{ LocalProps.Operable }" >
            <hmi:setProperty name="LocalProps.Pressed"        type="number" value="1" />
            <hmi:setProperty name="LocalProps.MouseHover"     type="number" value="0" />
            <hmi:sendCommand name="BUTTON_PRESSED"            type="number" hmi-bind:value="{ HmiProps.Mapping }" />
        </hmi:action>

        <!-- Because trigger cannot be dynamic, we must duplicate the actions for the trigger and extend the condition -->
        <hmi:action id="onMouseUp" hmi-bind:condition="{ LocalProps.Operable }" >
            <hmi:setProperty name="LocalProps.Pressed"    	type="number" value="0" />
            <hmi:setProperty name="LocalProps.MouseHover" 	type="number" value="1" />
        </hmi:action>
        <hmi:action id="onMouseUp_Sim" trigger="accept" hmi-bind:condition="{ LocalProps.Operable }">
            <hmi:sendCommand name="BUTTON_RELEASED" 		  type="number" hmi-bind:value="{ HmiProps.Mapping }" />
        </hmi:action>
        <hmi:action id="onMouseTapped" hmi-bind:condition="{ LocalProps.Operable }" >
            <hmi:sendCommand name="BUTTON_RELEASED"       	type="number" hmi-bind:value="{ HmiProps.Mapping }" />
        </hmi:action>

        <hmi:action id="onMouseEnter" >
            <hmi:sendCommand name="BUTTON_ENTER"          type="number" hmi-bind:value="{ HmiProps.Mapping }" />
        </hmi:action>
        <hmi:action id="onMouseLeave" >
            <hmi:setProperty name="LocalProps.Pressed"    type="number" value="0" hmi-bind:condition="{ LocalProps.Operable }" />
            <hmi:setProperty name="LocalProps.MouseHover" type="number" value="0" hmi-bind:condition="{ LocalProps.Operable }" />
            <hmi:sendCommand name="BUTTON_LEAVE"          type="number" hmi-bind:value="{ HmiProps.Mapping }" />
        </hmi:action>

        <!-- Graphical elements of this template -->

        <clipPath id="ItemClipRectCBB">
        <rect id="ItemRect"
            hmi-bind:width="{ Layout.ActualWidth  }"
            hmi-bind:height="{ Layout.ActualHeight }"
            hmi-bind:stroke-width="{ LocalProps.DefBorderWidth }"
            rx="5" />
        </clipPath>
    </defs>

    <g id="TIFID_ControlBarElement" clip-path="url(#ItemClipRectCBB)" hmi:if="{ HmiProps.Visible }"
        hmi-event:mouseHover="url(#onMouseHover)"
        hmi-event:down="url(#onMouseDown)"
        hmi-event:up="url(#onMouseUp)"
        hmi-event:tapped="url(#onMouseTapped)"
        hmi-event:mouseEnter="url(#onMouseEnter)"
        hmi-event:mouseLeave="url(#onMouseLeave)">

        <!--  ControlbarLabel has no ItemBGRect -->

        <hmi:include template="include.style.flat.text.svghmi"
            hmi-bind:x="{ LocalProps.ContentPositionX }"
            hmi-bind:y="{ LocalProps.ContentPositionY }"
            hmi-bind:width="{ LocalProps.ContentWidth }"
            hmi-bind:height="{ LocalProps.ContentHeight }">

            <hmi:param name="Text"                      type="string"                   hmi-bind:value="{ HmiProps.Text }" />
            <hmi:param name="Font"                      type="HmiFontPart"              hmi-bind:value="{ ParamProps.Font }" />
            <hmi:param name="TextColor"                 type="HmiColor"                 hmi-bind:value="{ HmiProps.ForeColor }" />
            <hmi:param name="HorizontalTextAlignment"   type="HmiHorizontalAlignment"   hmi-bind:value="{ HmiProps.HorizontalTextAlignment }" />
            <hmi:param name="VerticalTextAlignment"     type="HmiVerticalAlignment"     hmi-bind:value="{ HmiProps.VerticalTextAlignment   }" />

        </hmi:include>

        <rect id="ItemRect_Used"
            fill-opacity="0"
            hmi-bind:stroke="{{ LocalProps.ShowFocus ? ParamProps.FocusColor : ( or( LocalProps.Pressed, LocalProps.MouseHover ) ? LocalProps.BorderColorPressed : LocalProps.BorderColor ) }}"
            hmi-bind:x="{{ LocalProps.DefBorderWidth / 2 }}"
            hmi-bind:y="{{ LocalProps.DefBorderWidth / 2 }}"
            hmi-bind:width="{{ Layout.ActualWidth - LocalProps.DefBorderWidth }}"
            hmi-bind:height="{{ Layout.ActualHeight - LocalProps.DefBorderWidth }}"
            hmi-bind:stroke-width="{{ LocalProps.DefBorderWidth + ( LocalProps.ShowFocus ? 4 : 0 ) }}"
            rx="5" />
    </g>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:hmi="http://svg.siemens.com/hmi/"
    xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
    xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
    xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
    xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
    xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
    preserveAspectRatio="none" >

    <hmi:self type="part:HmiControlBarSeparatorPart" displayName="Extended ControlBarSeparator" name="extended.controlbarseparator.part" version="1.0.1" performanceClass="L">

        <hmi:focus focusVisual="local" canFocus="true" />

    </hmi:self>

    <defs>
        <!-- other ScrolbarElements use BackColor -->
        <hmi:localDef name="BackColorRGB"         type="string"   hmi-bind:value="{{ Converter.RGBA( HmiProps.ForeColor ) }}" />
        <hmi:localDef name="BackColorAlpha"       type="number"   hmi-bind:value="{{ Converter.Alpha( HmiProps.ForeColor ) }}" />
        <hmi:localDef name="ContentPositionX"     type="number"   hmi-bind:value="{ HmiProps.Padding.Left }" />
        <hmi:localDef name="ContentPositionY"     type="number"   hmi-bind:value="{ HmiProps.Padding.Top  }" />
        <hmi:localDef name="ContentWidth"         type="number"   hmi-bind:value="{{ Layout.ActualWidth  - HmiProps.Padding.Left - HmiProps.Padding.Right }}" />
        <hmi:localDef name="ContentHeight"        type="number"   hmi-bind:value="{{ Layout.ActualHeight - HmiProps.Padding.Top  - HmiProps.Padding.Bottom }}" />

        <!-- Graphical elements of this template -->
        <linearGradient id="BgGradient_Separator" gradientUnits="objectBoundingBox" x1="0%" x2="100%" y1="0%" y2="0%">
            <stop offset="0.0" hmi-bind:stop-opacity="{{ LocalProps.BackColorAlpha * 0.5 }}" hmi-bind:stop-color="{ LocalProps.BackColorRGB }" />
            <stop offset="0.4" hmi-bind:stop-opacity="{ LocalProps.BackColorAlpha }" 		 hmi-bind:stop-color="{ LocalProps.BackColorRGB }" />
            <stop offset="0.6" hmi-bind:stop-opacity="{ LocalProps.BackColorAlpha }" 		 hmi-bind:stop-color="{ LocalProps.BackColorRGB }" />
            <stop offset="1.0" hmi-bind:stop-opacity="{{ LocalProps.BackColorAlpha * 0.5 }}" hmi-bind:stop-color="{ LocalProps.BackColorRGB }" />
        </linearGradient>

    </defs>

  <g id="TIFID_ControlBarElementSeparator">
    <!-- 'Enabled' change in opacity is disabled here because the separator should always appear as non-transparent -->

    <rect id="ItemBGRect_Separator"
        hmi-bind:x="{ LocalProps.ContentPositionX }"
        hmi-bind:y="{ LocalProps.ContentPositionY }"
        hmi-bind:width="{ LocalProps.ContentWidth }"
        hmi-bind:height="{ LocalProps.ContentHeight }"
        fill="url(#BgGradient_Separator)"
        stroke-width="0"
        hmi-bind:rx="{{ Converter.Min( 5, Converter.Max( 0, ( le( Layout.ActualWidth, Layout.ActualHeight ) ? ( Layout.ActualWidth / 2 ) : ( Layout.ActualHeight / 2 ) ) ) ) }}"
        hmi-bind:ry="{{ Converter.Min( 5, Converter.Max( 0, ( le( Layout.ActualWidth, Layout.ActualHeight ) ? ( Layout.ActualWidth / 2 ) : ( Layout.ActualHeight / 2 ) ) ) ) }}" />

  </g>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:hmi="http://svg.siemens.com/hmi/"
    xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
    xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
    xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
    xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
    xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
    preserveAspectRatio="none" >

    <hmi:self type="part:HmiControlBarTextBoxPart" displayName="Extended ControlBarTextBox" name="extended.controlbartextbox.part" version="1.0.1" performanceClass="L">

        <hmi:paramDef name="Font"                 type="HmiFontPart" />
        <hmi:paramDef name="ControlBarOperable"   type="boolean"     />
        <hmi:paramDef name="FocusColor"           type="string"      />
        <hmi:paramDef name="ShowFocusVisual"      type="boolean"     />

        <hmi:focus focusVisual="local" canFocus="true" />

    </hmi:self>

    <defs>
        <hmi:localDef name="MouseHover"           type="number"   value="0" />
        <hmi:localDef name="Pressed"              type="number"   value="0" />

        <hmi:localDef name="BorderColorAlphaMask" type="number"   value="0x01000000" />
        <hmi:localDef name="BorderPressedAlpha"   type="number"   value="0x80000000" />
        <hmi:localDef name="BorderColorPressed"   type="string"   hmi-bind:value="{{ Converter.RGBA( ( HmiProps.BorderColor % LocalProps.BorderColorAlphaMask ) + LocalProps.BorderPressedAlpha ) }}" />

        <hmi:localDef name="ShowFocus"            type="boolean"  hmi-bind:value="{{ and( ParamProps.ShowFocusVisual, SysProps.HasFocus ) }}" />

        <hmi:localDef name="ContentPositionX"     type="number"   hmi-bind:value="{{ HmiProps.BorderWidth + HmiProps.Padding.Left }}" />
        <hmi:localDef name="ContentPositionY"     type="number"   hmi-bind:value="{{ HmiProps.BorderWidth + HmiProps.Padding.Top  }}" />
        <hmi:localDef name="ContentWidth"         type="number"   hmi-bind:value="{{ Layout.ActualWidth  - ( 2 * HmiProps.BorderWidth ) - HmiProps.Padding.Left - HmiProps.Padding.Right }}" />
        <hmi:localDef name="ContentHeight"        type="number"   hmi-bind:value="{{ Layout.ActualHeight - ( 2 * HmiProps.BorderWidth ) - HmiProps.Padding.Top  - HmiProps.Padding.Bottom }}" />

        <hmi:localDef name="ButtonOperable"       type="boolean"  hmi-bind:value="{{ and( HmiProps.Enabled, HmiProps.Operability == HmiOperability.Operable ) }}" />
        <hmi:localDef name="Operable"             type="boolean"  hmi-bind:value="{{ and( ParamProps.ControlBarOperable, LocalProps.ButtonOperable ) }}" />

        <!-- definitions of actions -->
        <hmi:action id="onMouseHover" hmi-bind:condition="{ LocalProps.Operable }" >
            <hmi:setProperty name="LocalProps.MouseHover"     type="number" value="1" />
        </hmi:action>

        <!-- Because trigger cannot be dynamic, we must duplicate the actions for the trigger and extend the condition -->
        <hmi:action id="onMouseDown" hmi-bind:condition="{ LocalProps.Operable }" >
            <hmi:setProperty name="LocalProps.Pressed"        type="number" value="1" />
            <hmi:setProperty name="LocalProps.MouseHover"     type="number" value="0" />
            <hmi:sendCommand name="BUTTON_PRESSED"            type="number" hmi-bind:value="{ HmiProps.Mapping }" />
        </hmi:action>
        <hmi:action id="onMouseDown_Sim" trigger="accept" hmi-bind:condition="{ LocalProps.Operable }">
            <hmi:sendCommand name="BUTTON_PRESSED" 			  type="number" hmi-bind:value="{ HmiProps.Mapping }" />
        </hmi:action>

        <!-- Because trigger cannot be dynamic, we must duplicate the actions for the trigger and extend the condition -->
        <hmi:action id="onMouseUp" hmi-bind:condition="{ LocalProps.Operable }" >
            <hmi:setProperty name="LocalProps.Pressed"    	type="number" value="0" />
            <hmi:setProperty name="LocalProps.MouseHover" 	type="number" value="1" />
        </hmi:action>
        <hmi:action id="onMouseTapped" hmi-bind:condition="{ LocalProps.Operable }" >
            <hmi:sendCommand name="BUTTON_RELEASED"       	type="number" hmi-bind:value="{ HmiProps.Mapping }" />
        </hmi:action>

        <hmi:action id="onMouseEnter" >
            <hmi:sendCommand name="BUTTON_ENTER"          type="number" hmi-bind:value="{ HmiProps.Mapping }" />
        </hmi:action>
        <hmi:action id="onMouseLeave" >
            <hmi:setProperty name="LocalProps.Pressed"    type="number" value="0" hmi-bind:condition="{ LocalProps.Operable }" />
            <hmi:setProperty name="LocalProps.MouseHover" type="number" value="0" hmi-bind:condition="{ LocalProps.Operable }" />
            <hmi:sendCommand name="BUTTON_LEAVE"          type="number" hmi-bind:value="{ HmiProps.Mapping }" />
        </hmi:action>

    </defs>

    <g id="TIFID_ControlBarElement" hmi:if="{ HmiProps.Visible }"
        hmi-event:mouseHover="url(#onMouseHover)"
        hmi-event:down="url(#onMouseDown)"
        hmi-event:up="url(#onMouseUp)"
        hmi-event:tapped="url(#onMouseTapped)"
        hmi-event:mouseEnter="url(#onMouseEnter)"
        hmi-event:mouseLeave="url(#onMouseLeave)">

        <!--  ControlbarTextBox has no ItemBGRect -->

        <rect id="ItemRect_Used"
            fill-opacity="0"
            hmi-bind:stroke="{{ LocalProps.ShowFocus ? ParamProps.FocusColor : ( or( LocalProps.Pressed, LocalProps.MouseHover ) ? LocalProps.BorderColorPressed : Converter.RGBA( HmiProps.BorderColor ) ) }}"
            hmi-bind:x="{{ HmiProps.BorderWidth / 2 }}"
            hmi-bind:y="{{ HmiProps.BorderWidth / 2 }}"
            hmi-bind:width="{{ Layout.ActualWidth - HmiProps.BorderWidth }}"
            hmi-bind:height="{{ Layout.ActualHeight - HmiProps.BorderWidth }}"
            hmi-bind:stroke-width="{{ HmiProps.BorderWidth + ( LocalProps.ShowFocus ? 4 : 0 ) }}" />

        <g id="TextBehind">
            <hmi-element:textField
                hmi-bind:start-x="{ LocalProps.ContentPositionX }"
                hmi-bind:start-y="{ LocalProps.ContentPositionY }"
                hmi-bind:width="{ LocalProps.ContentWidth }"
                hmi-bind:height="{ LocalProps.ContentHeight }"
                hmi-bind:horizontal-text-alignment="{ HmiProps.HorizontalTextAlignment }"
                hmi-bind:vertical-text-alignment="{ HmiProps.HorizontalTextAlignment }"
                hmi-bind:value="{ HmiProps.Text }"
                hmi-bind:fore-color="{{ Converter.RGBA( HmiProps.ForeColor ) }}"
                target="HmiProps.Text"
                output-format="{S}"
                hmi-bind:enabled="{{ and( not( HmiProps.ReadOnly ), LocalProps.Operable ) }}"
                padding="0"
                multi-line="false"
                text-trimming="none"
                text-wrapping="no-wrap"
                hmi-bind:read-only="{ HmiProps.ReadOnly }" >

                <hmi-feature:inputBehavior clear-on-activate="false" />
                <hmi-feature:font hmi-bind:scope="{ ParamProps.Font }" />

            </hmi-element:textField>
        </g>

    </g>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:hmi="http://svg.siemens.com/hmi/"
    xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
    xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
    xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
    xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
    xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
    preserveAspectRatio="none"
    overflow="visible">

    <hmi:self type="part:HmiControlBarToggleSwitchPart" displayName="Extended ControlBarToggleSwitch" name="extended.controlbartoggleswitch.part" version="1.0.1" performanceClass="L">

        <hmi:paramDef name="Font"                 type="HmiFontPart" />
        <hmi:paramDef name="ControlBarOperable"   type="boolean" />
        <hmi:paramDef name="FocusColor"           type="string" />
        <hmi:paramDef name="ShowFocusVisual"      type="boolean" />

        <hmi:focus focusVisual="local" canFocus="true" />

    </hmi:self>

    <defs>
        <hmi:localDef name="MouseHover"           type="number"   value="0" />
        <hmi:localDef name="Pressed"              type="number"   value="0" />

        <hmi:localDef name="ColorAlphaMask"       type="number"   value="0x01000000" />
        <hmi:localDef name="HoverAlpha"           type="number"   value="0xC0000000" />
        <hmi:localDef name="DisabledAlpha"        type="number"   value="0x99000000" />

        <hmi:localDef name="ContentPositionX"     type="number"   hmi-bind:value="{{ HmiProps.BorderWidth + HmiProps.Padding.Left }}" />
        <hmi:localDef name="ContentPositionY"     type="number"   hmi-bind:value="{{ HmiProps.BorderWidth + HmiProps.Padding.Top  }}" />
        <hmi:localDef name="ContentWidth"         type="number"   hmi-bind:value="{{ Layout.ActualWidth  - ( 2 * HmiProps.BorderWidth ) - HmiProps.Padding.Left - HmiProps.Padding.Right }}" />
        <hmi:localDef name="ContentHeight"        type="number"   hmi-bind:value="{{ Layout.ActualHeight - ( 2 * HmiProps.BorderWidth ) - HmiProps.Padding.Top  - HmiProps.Padding.Bottom }}" />

        <hmi:localDef name="BadgeExtentMin"       type="number"   value="6" />
        <hmi:localDef name="BadgeHeight"          type="number"   hmi-bind:value="{{ Converter.Max( 2 * Layout.ActualHeight / 5, LocalProps.BadgeExtentMin ) }}" />
        <hmi:localDef name="BadgeOffset"          type="number"   hmi-bind:value="{{ Converter.Min( LocalProps.BadgeHeight / 3, 3 ) }}" />
        <hmi:localDef name="BadgePadding"         type="number"   value="3" />

        <hmi:localDef name="ButtonOperable"       type="boolean"  hmi-bind:value="{{ and( HmiProps.Enabled, HmiProps.Operability == HmiOperability.Operable ) }}" />
        <hmi:localDef name="Operable"             type="boolean"  hmi-bind:value="{{ and( ParamProps.ControlBarOperable, LocalProps.ButtonOperable ) }}" />

        <hmi:localDef name="ForeColor"            type="HmiColor" hmi-bind:value="{{ LocalProps.Operable ? HmiProps.ForeColor : HmiProps.ForeColor % LocalProps.ColorAlphaMask + LocalProps.DisabledAlpha }}" />
        <hmi:localDef name="HoverBackColor"       type="HmiColor" hmi-bind:value="{{ HmiProps.BackColor % LocalProps.ColorAlphaMask + LocalProps.HoverAlpha }}" />
        <hmi:localDef name="DisabledBackColor"    type="HmiColor" hmi-bind:value="{{ HmiProps.BackColor % LocalProps.ColorAlphaMask + LocalProps.DisabledAlpha }}" />

        <hmi:localDef name="BackColor"            type="string"   hmi-bind:value="{{ Converter.RGBA( LocalProps.Operable ? ( or(HmiProps.IsAlternateState, LocalProps.Pressed) ? HmiProps.AlternateBackColor : (LocalProps.MouseHover ? LocalProps.HoverBackColor : HmiProps.BackColor )) : LocalProps.DisabledBackColor ) }}" />

        <!-- definitions of actions -->
        <hmi:action id="onMouseHover" hmi-bind:condition="{ LocalProps.Operable }" >
            <hmi:setProperty name="LocalProps.MouseHover"     type="number" value="1" />
        </hmi:action>

        <!-- Because trigger cannot be dynamic, we must duplicate the actions for the trigger and extend the condition -->
        <hmi:action id="onMouseDown" hmi-bind:condition="{ LocalProps.Operable }" >
            <hmi:setProperty name="LocalProps.Pressed"        type="number" value="1" />
            <hmi:setProperty name="LocalProps.MouseHover"     type="number" value="0" />
            <hmi:sendCommand name="BUTTON_PRESSED"            type="number" hmi-bind:value="{ HmiProps.Mapping }" />
        </hmi:action>

        <!-- Because trigger cannot be dynamic, we must duplicate the actions for the trigger and extend the condition -->
        <hmi:action id="onMouseUp" hmi-bind:condition="{ LocalProps.Operable }" >
            <hmi:setProperty name="LocalProps.Pressed"    	type="number" value="0" />
            <hmi:setProperty name="LocalProps.MouseHover" 	type="number" value="1" />
        </hmi:action>
        <hmi:action id="onMouseUp_Sim" trigger="accept" hmi-bind:condition="{ LocalProps.Operable }">
            <hmi:setProperty name="HmiProps.IsAlternateState" type="boolean" hmi-bind:value="{{ not( HmiProps.IsAlternateState ) }}" hmi-bind:condition="{{ HmiProps.Type == HmiScreenObjectType.ControlBarToggleSwitchPart }}" />
            <hmi:sendCommand name="BUTTON_RELEASED" 		  type="number" hmi-bind:value="{ HmiProps.Mapping }" />
        </hmi:action>
        <hmi:action id="onMouseTapped" hmi-bind:condition="{ LocalProps.Operable }" >
            <hmi:setProperty name="HmiProps.IsAlternateState" type="boolean" hmi-bind:value="{{ not( HmiProps.IsAlternateState ) }}" hmi-bind:condition="{{ HmiProps.Type == HmiScreenObjectType.ControlBarToggleSwitchPart }}" />
            <hmi:sendCommand name="BUTTON_RELEASED"       	type="number" hmi-bind:value="{ HmiProps.Mapping }" />
        </hmi:action>

        <hmi:action id="onMouseEnter" >
            <hmi:sendCommand name="BUTTON_ENTER"          type="number" hmi-bind:value="{ HmiProps.Mapping }" />
        </hmi:action>
        <hmi:action id="onMouseLeave" >
            <hmi:setProperty name="LocalProps.Pressed"    type="number" value="0" hmi-bind:condition="{ LocalProps.Operable }" />
            <hmi:setProperty name="LocalProps.MouseHover" type="number" value="0" hmi-bind:condition="{ LocalProps.Operable }" />
            <hmi:sendCommand name="BUTTON_LEAVE"          type="number" hmi-bind:value="{ HmiProps.Mapping }" />
        </hmi:action>

        <clipPath id="ItemClipRectCBB">
        <rect id="ItemRect"
            hmi-bind:width="{ Layout.ActualWidth }"
            hmi-bind:height="{ Layout.ActualHeight }"
            hmi-bind:stroke-width="{ HmiProps.BorderWidth }" />
        </clipPath>

    </defs>

    <g id="TIFID_ControlBarElement" clip-path="url(#ItemClipRectCBB)" hmi:if="{ HmiProps.Visible }"
        hmi-bind:opacity="{{ LocalProps.Operable ? 1.0 : 0.6  }}"
        hmi-event:mouseHover="url(#onMouseHover)"
        hmi-event:down="url(#onMouseDown)"
        hmi-event:up="url(#onMouseUp)"
        hmi-event:tapped="url(#onMouseTapped)"
        hmi-event:mouseEnter="url(#onMouseEnter)"
        hmi-event:mouseLeave="url(#onMouseLeave)">

        <rect id="ItemBGRect"
            hmi-bind:x="{ HmiProps.BorderWidth }"
            hmi-bind:y="{ HmiProps.BorderWidth }"
            hmi-bind:width="{{ Layout.ActualWidth - 2 * HmiProps.BorderWidth }}"
            hmi-bind:height="{{ Layout.ActualHeight - 2 * HmiProps.BorderWidth }}"
            hmi-bind:fill="{ LocalProps.BackColor }"
            stroke-width="0" />

        <hmi:include template="include.style.flat.content.svghmi" hmi-bind:for="{ HmiProps.Content }"
            hmi-bind:x="{ LocalProps.ContentPositionX }"
            hmi-bind:y="{ LocalProps.ContentPositionY }"
            hmi-bind:width="{ LocalProps.ContentWidth }"
            hmi-bind:height="{ LocalProps.ContentHeight }">

            <hmi:param name="Graphic"       type="HmiGraphic"  hmi-bind:value="{{ or( HmiProps.IsAlternateState, LocalProps.Pressed ) ? ( HmiProps.AlternateGraphic != '' ? HmiProps.AlternateGraphic : HmiProps.Graphic ) : HmiProps.Graphic }}" />
            <hmi:param name="Text"          type="string"      hmi-bind:value="{{ or( HmiProps.IsAlternateState, LocalProps.Pressed ) ? ( HmiProps.AlternateText != '' ? HmiProps.AlternateText : HmiProps.Text ) : HmiProps.Text }}" />
            <hmi:param name="Font"          type="HmiFontPart" hmi-bind:value="{ ParamProps.Font }" />
            <hmi:param name="TextColor"     type="HmiColor"    hmi-bind:value="{ LocalProps.ForeColor }" />
            <hmi:param name="GraphicWidth"  type="number"      hmi-bind:value="{ HmiProps.GraphicWidth }" />
            <hmi:param name="GraphicHeight" type="number"      hmi-bind:value="{ HmiProps.GraphicHeight }" />

        </hmi:include>

         <rect id="ItemRect_Used"
            fill-opacity="0"
            hmi-bind:stroke="{{ and( ParamProps.ShowFocusVisual, SysProps.HasFocus ) ? ParamProps.FocusColor : Converter.RGBA( HmiProps.BorderColor ) }}"
            hmi-bind:x="{{ HmiProps.BorderWidth / 2 }}"
            hmi-bind:y="{{ HmiProps.BorderWidth / 2 }}"
            hmi-bind:width="{{ Layout.ActualWidth - HmiProps.BorderWidth }}"
            hmi-bind:height="{{ Layout.ActualHeight - HmiProps.BorderWidth }}"
            hmi-bind:stroke-width="{ HmiProps.BorderWidth }" />

        <line id="ActivationIndicatorToggle" hmi:if="{ LocalProps.Operable }"
            hmi-bind:x1="{ HmiProps.BorderWidth }"
            hmi-bind:y1="{{ or(HmiProps.IsAlternateState, LocalProps.Pressed) ? (HmiProps.BorderWidth + (HmiProps.BorderWidth / 2)) : (HmiProps.BorderWidth + Layout.ActualHeight - 2 * HmiProps.BorderWidth - (HmiProps.BorderWidth / 2)) }}"
            hmi-bind:x2="{{ HmiProps.BorderWidth + Layout.ActualWidth - 2 * HmiProps.BorderWidth }}"
            hmi-bind:y2="{{ or(HmiProps.IsAlternateState, LocalProps.Pressed) ? (HmiProps.BorderWidth + (HmiProps.BorderWidth / 2)) : (HmiProps.BorderWidth + Layout.ActualHeight - 2 * HmiProps.BorderWidth - (HmiProps.BorderWidth / 2)) }}"
            stroke-width="2"
            hmi-bind:stroke="{{Converter.RGBA(HmiProps.AlternateBorderColor)}}" />
    </g>

    <!-- Badge inclusion -->
    <g hmi-bind:transform="translate( { LocalProps.BadgeOffset },{ -LocalProps.BadgeOffset } )"
        hmi-bind:opacity="{{ LocalProps.Operable ? 1.0 : 0.6  }}"
        hmi-event:mouseHover="url(#onMouseHover)"
        hmi-event:down="url(#onMouseDown)"
        hmi-event:up="url(#onMouseUp)"
        hmi-event:tapped="url(#onMouseTapped)"
        hmi-event:mouseEnter="url(#onMouseEnter)"
        hmi-event:mouseLeave="url(#onMouseLeave)">

        <hmi:include template="include.style.flat.badge.svghmi" hmi-bind:for="{ HmiProps.Badge }"
            hmi-bind:x="{{ -1 * LocalProps.BadgePadding }}"
            hmi-bind:y="{{ -1 * LocalProps.BadgePadding }}"
            hmi-bind:width="{{ Layout.ActualWidth + 2 * LocalProps.BadgePadding }}"
            hmi-bind:height="{{ LocalProps.BadgeHeight + 2 * LocalProps.BadgePadding }}">

            <hmi:param name="WidthMax"    		type="number"       hmi-bind:value="{ Layout.ActualWidth }" />
            <hmi:param name="Height"      		type="number"       hmi-bind:value="{ LocalProps.BadgeHeight }"  />
            <hmi:param name="Font"        		type="HmiFontPart"  hmi-bind:value="{ ParamProps.Font }"  />
            <hmi:param name="ButtonVisible"     type="boolean"      hmi-bind:value="{ HmiProps.Visible }" />

        </hmi:include>
    </g>

 </svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2022. All Rights Reserved. -->

<svg id="TIFID_MatrixView_Content"  data-tif-type="WSI:matrixViewContent"
  xmlns="http://www.w3.org/2000/svg"
  xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
  xmlns:hmi="http://svg.siemens.com/hmi/"
  xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
  xmlns:hmi-types="http://svg.siemens.com/hmi/types/"
  xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/"
  xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
  xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
  xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
  hmi-flex:grow="1"
  hmi-flex:minWidth="{ParamProps.TileMinWidth}"
  hmi-flex:minHeight="{ ParamProps.TileMinHeight }" 
  hmi-flex:marginLeft="8" hmi-flex:marginTop="8">
  <hmi:self type="part:HmiDynamicPropertyPart" name="style.flat.tilescontent" displayName="Content of the tileview" >
    <hmi:paramDef name="Font"                      type="HmiFontPart"            />
    <hmi:paramDef name="Width"                    type="number"                  />
    <hmi:paramDef name="TileMinWidth"              type="number"                 />
    <hmi:paramDef name="TileMinHeight"             type="number"                 />
    <hmi:paramDef name="TileWidth"                 type="number"                 />
  </hmi:self>
   <defs>
    <hmi:localDef name="TextCharWidth"           type="number"     hmi-bind:value="{{ Converter.TextWidth( HmiProps.Text, ParamProps.Font, false) }}" />
    <hmi:localDef name="AvailableSpace"          type="number"     hmi-bind:value="{{ ParamProps.TileWidth - LocalProps.TextCharWidth }}" />
  </defs>
  <rect 	  
    hmi-bind:width="{ ParamProps.TileWidth }"
    hmi-bind:height="{ Layout.ActualHeight }" 
    hmi-bind:fill="{{ Converter.RGBA (HmiProps.BackColor) }}">
  </rect>
  <text 
    hmi-bind:fill="{{ Converter.RGBA (HmiProps.ForeColor) }}"
    hmi-bind:font-size="{ ParamProps.Font.Size }"
    hmi-bind:font-weight="{ ParamProps.Font.Weight }"
    hmi-bind:font-family="{ ParamProps.Font.Name }"
    hmi-bind:x="{{ LocalProps.AvailableSpace/2 }}"
    hmi-bind:y="{{ Layout.ActualHeight/2 + 5 }}">
    <hmi:text hmi-bind:value="{ HmiProps.Text }" />
  </text> 
</svg><!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2021. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     preserveAspectRatio="none"
     id="custom_MiniViewerContent"
     data-tif-type="WSI:SvgGrid" >

    <hmi:self type="part:HmiDataGridViewPart" displayName="Flat CriteriaAnalysisContent" name="style.flat.criteriaanalysiscontent">
        <hmi:paramDef name="AlwaysShowRecent"   type="boolean"  />
        <hmi:paramDef name="FocusColor"         type="string"   />
        <hmi:paramDef name="ShowFocusVisual"    type="boolean"  />
    </hmi:self>
    <defs>
        <hmi:localDef name="BorderWidth"        type="number"  value="1" />
        <hmi:localDef name="ShowFocus"          type="boolean" hmi-bind:value="{{ and( ParamProps.ShowFocusVisual, SysProps.HasFocus ) }}" />
    </defs>

    <g id="Background">

        <hmi-element:table hmi-bind:auto-scroll="{ParamProps.AlwaysShowRecent}" hmi-bind:config="{ HmiProps }" hmi-bind:height="{Layout.ActualHeight}" hmi-bind:width="{Layout.ActualWidth}" start-x="0" start-y="0" hmi-bind:horizontal-scrollbar-visibility="{HmiProps.HorizontalScrollBarVisibility}"
                           hmi-bind:vertical-scrollbar-visibility="{ HmiProps.VerticalScrollBarVisibility }">
						                
            <hmi-feature:dataTemplates>
                <hmi:master-include template="include.style.flat.datacell.svghmi">
                        <hmi:param name="Padding"   type="HmiPaddingPart"   hmi-bind:value="{ HmiProps.CellPadding }" />
                </hmi:master-include>
            </hmi-feature:dataTemplates>
                
            <!--Column Header --> 
            <hmi-feature:header>
                <hmi:master-inline>
                    <hmi:param name="Padding"   type="HmiPaddingPart"   hmi-bind:value="{ HmiProps.CellPadding }" />

                    <hmi:template>
                        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                          xmlns:hmi="http://svg.siemens.com/hmi/"
                          xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                          height="10" width="10" id="ColumnHeaderSVG" >

                          <hmi:self type="system:HmiHeaderCellSystemPart" displayName="ColumnHeader" name="columnheader" version="1.0.0" performanceClass="s">
                              <hmi:paramDef name="Padding"          type="HmiPaddingPart" />
                          </hmi:self>

                          <defs>
                              <hmi:localDef name="PaddingLeftRight"   type="number"     hmi-bind:value="{{ ( ParamProps.Padding.Left + ParamProps.Padding.Right ) }}" />
                              <hmi:localDef name="ReducedWidth"       type="number"     hmi-bind:value="{{ ( HmiProps.Width - 30 ) }}"                                />
                              <hmi:localDef name="ReducedHeight"      type="number"     hmi-bind:value="{{ ( HmiProps.Height / 2 ) }}"                                />
                          </defs>

                          <g id="TIFID_ColumnHeaderGroup"  opacity="1">
                              <rect id="ColumnHeaderRect"
                                    x="0"
                                    y="0"
                                    hmi-bind:width="{ HmiProps.Width }"
                                    hmi-bind:height="{ HmiProps.Height }"
                                    hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}"/>
                                <hmi:include template="include.style.flat.text.svghmi"
                                           hmi-bind:x="{ ParamProps.Padding.Left }"
                                           hmi-bind:y="{ ParamProps.Padding.Top }"
                                           hmi-bind:width="{{ HmiProps.Width - LocalProps.PaddingLeftRight }}"
                                           hmi-bind:height="{{ HmiProps.Height - ParamProps.Padding.Bottom }}">
                                    <hmi:param name="Text"                    type="string"                   hmi-bind:value="{ HmiProps.Text}"                       />
                                    <hmi:param name="Font"                    type="HmiFontPart"              hmi-bind:value="{ HmiProps.Font }"                            />
                                    <hmi:param name="TextColor"               type="HmiColor"                 hmi-bind:value="{ HmiProps.ForeColor }"                       />
                                    <hmi:param name="HorizontalTextAlignment" type="HmiHorizontalAlignment"   hmi-bind:value="{ HmiProps.Content.HorizontalTextAlignment }" />
                                    <hmi:param name="VerticalTextAlignment"   type="HmiVerticalAlignment"     hmi-bind:value="{ HmiProps.Content.VerticalTextAlignment }"                                                     />
                                </hmi:include>
                          </g>
                        </svg>
                    </hmi:template>
                </hmi:master-inline>

            </hmi-feature:header> 

            <!--Row Headers-->
            <hmi-feature:recordHeader >
                <hmi:master-inline >
                    <hmi:param name="Padding"   type="HmiPaddingPart"   hmi-bind:value="{ HmiProps.CellPadding }" />
                    <hmi:template>
                        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                            xmlns:hmi="http://svg.siemens.com/hmi/"
                            xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                            xmlns:hmi-data-bind="http://svg.siemens.com/hmi/data/bind/"
                            height="10" width="10" >
                            <hmi:self type="system:HmiHeaderCellSystemPart" displayName="RowHeader" name="rowheader" version="1.0.0" performanceClass="s">
                                <hmi:data type="header-view"></hmi:data>
                                <hmi:paramDef name="Padding"      type="HmiPaddingPart" />
                            </hmi:self>

                            <g id="TIFID_RowHeaderGroup" opacity="1">
                                <rect id="RowHeaderRect"
                                      x="0"
                                      y="0"
                                      hmi-bind:width="{ HmiProps.Width }"
                                      hmi-bind:height="{ HmiProps.Height }"
                                      hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}"
                                      />
                                <hmi:include template="include.style.flat.text.svghmi"
                                           hmi-bind:x="{ ParamProps.Padding.Left }"
                                           hmi-bind:y="{ ParamProps.Padding.Top }"
                                           hmi-bind:width="{{ HmiProps.Width - ( ParamProps.Padding.Right + ParamProps.Padding.Left ) }}"
                                           hmi-bind:height="{{ HmiProps.Height - ParamProps.Padding.Bottom }}">
                                    <hmi:param name="Text"                    type="string"                   hmi-data-bind:value="{ Content.Index }"                       />
                                    <hmi:param name="Font"                    type="HmiFontPart"              hmi-bind:value="{ HmiProps.Font }"                            />
                                    <hmi:param name="TextColor"               type="HmiColor"                 hmi-bind:value="{ HmiProps.ForeColor }"                       />
                                    <hmi:param name="HorizontalTextAlignment" type="HmiHorizontalAlignment"   hmi-bind:value="{ HmiProps.Content.HorizontalTextAlignment }" />
                                    <hmi:param name="VerticalTextAlignment"   type="HmiVerticalAlignment"     value="1"                                                     />


                              </hmi:include>
                            </g>
                        </svg>
                    </hmi:template>
                </hmi:master-inline>
            </hmi-feature:recordHeader>

            <hmi-feature:rowBackground >
                <hmi:master-include template="include.style.flat.rowbackground.svghmi">
                </hmi:master-include>
            </hmi-feature:rowBackground> 

            <hmi-feature:columnBackground >
                <hmi:master-include template="include.style.flat.columnbackground.svghmi">
                </hmi:master-include>
            </hmi-feature:columnBackground>

            <!--Grid lines-->
            <hmi-feature:gridlines>
                <hmi-feature:gridline
                    position-filter="begin header end" expansion="header inner"
                    hmi-bind:stroke-width="{ HmiProps.GridLineWidth }"
                    hmi-bind:stroke="{{ Converter.RGBA(  HmiProps.HeaderSettings.HeaderGridLineColor ) }}"
                    orientation="row column">
                </hmi-feature:gridline>
                <hmi-feature:gridline
                    position-filter="inner" expansion="header"
                    hmi-bind:stroke-width="{ HmiProps.GridLineWidth }"
                    hmi-bind:stroke="{{ Converter.RGBA(  HmiProps.HeaderSettings.HeaderGridLineColor ) }}"
                    orientation="row column">
                </hmi-feature:gridline>
                <hmi-feature:gridline
                    position-filter="inner" expansion="inner"
                    hmi-bind:stroke-width="{ HmiProps.GridLineWidth }"
                    hmi-bind:stroke="{{ HmiProps.GridLineVisibility == 0 ? 'rgba(0,0,0,0)' : Converter.RGBA(  HmiProps.GridLineColor ) }}"
                    hmi-bind:orientation="{{ HmiProps.GridLineVisibility == 3 ? 'row column' : ( HmiProps.GridLineVisibility == 2 ? 'column':'row') }}">
                </hmi-feature:gridline>
            </hmi-feature:gridlines>

            <hmi-feature:selection>
                <hmi:master-inline>
                    <hmi:template>
                        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                            xmlns:hmi="http://svg.siemens.com/hmi/"
                            xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                            height="10" width="10" >
                                <hmi:self type="system:HmiSelectionSystemPart" displayName="SelectionBorder" name="selectionborder" version="1.0.0" performanceClass="s">
                                </hmi:self>
                                <defs>
                                    <hmi:localDef name="ChangedBorderWidth" type="number" hmi-bind:value="{{ HmiProps.BorderWidth / 2 }}"/>
                                </defs>
                    
                                <g id="TIFID_SelectionRect" opacity="1">
                                    <rect id="ItemBGRect3"
                                        hmi-bind:x="{LocalProps.ChangedBorderWidth}"
                                         hmi-bind:y="{LocalProps.ChangedBorderWidth}"
                                         hmi-bind:width="{ HmiProps.Width}"
                                         hmi-bind:height="{ HmiProps.Height }"
                                         fill="none"
                                         hmi-bind:stroke-width="{ HmiProps.BorderWidth }"
                                         hmi-bind:stroke="{{Converter.RGBA(HmiProps.BorderColor)}}"/>
                                </g>
                            </svg>
                    </hmi:template>
                </hmi:master-inline>
            </hmi-feature:selection>
        </hmi-element:table>

        <rect id="ItemBGRect"
            hmi-bind:x="{{ LocalProps.BorderWidth / 2 }}"
            hmi-bind:y="{{ LocalProps.BorderWidth / 2 }}"
            hmi-bind:width="{{ Layout.ActualWidth - LocalProps.BorderWidth }}"
            hmi-bind:height="{{ Layout.ActualHeight - LocalProps.BorderWidth }}"
            fill="none"
            hmi-bind:stroke-width="{{ LocalProps.ShowFocus ? 4 : 0 }}"
            hmi-bind:stroke="{{ LocalProps.ShowFocus ? ParamProps.FocusColor : 'black' }}"/>
    </g>
</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
               xmlns:hmi="http://svg.siemens.com/hmi/"
               xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                xmlns:hmi-data-bind="http://svg.siemens.com/hmi/data/bind/"
               height="10" width="10" >
  <hmi:self type="system:HmiDataCellSystemPart" displayName="DataCell" name="datacell" version="1.0.0" performanceClass="s">
    <hmi:data type="cell-view"></hmi:data>
    <hmi:paramDef name="Padding"      type="HmiPaddingPart" />
  </hmi:self>

  <defs>
    <hmi:localDef name="Text"                    type="string"                   hmi-data-bind:value="{ Content.Data }" />
    <hmi:localDef name="TextColor"               type="string"                   hmi-data-bind:value="{ Colors.Fore }" />
    <hmi:localDef name="HorizontalTextAlignment" type="HmiHorizontalAlignment"   hmi-bind:value="{ HmiProps.Content.HorizontalTextAlignment }" />
    <hmi:localDef name="VerticalTextAlignment"   type="HmiVerticalAlignment"     hmi-bind:value="{ HmiProps.Content.VerticalTextAlignment }" />
    <hmi:localDef name="TextTrimming"            type="HmiTextTrimming"          hmi-bind:value="{ HmiProps.Content.TextTrimming }" />
    <hmi:localDef name="InteriorWidth"           type="number"                   hmi-bind:value="{{ HmiProps.Width - ParamProps.Padding.Right - ParamProps.Padding.Left }}" />
    <hmi:localDef name="InteriorHeight"          type="number"                   hmi-bind:value="{{ HmiProps.Height - ParamProps.Padding.Bottom }}" />


    <hmi:localDef name="TextHeightFontSize"      type="number"                   hmi-bind:value="{ HmiProps.Font.Size }" />

    <!-- x, y and baseline position of the text-->
    <hmi:localDef name="TextAnchorX"             type="string"                   hmi-bind:value="{{ LocalProps.HorizontalTextAlignment == HmiHorizontalAlignment.Center ? 'middle' : LocalProps.HorizontalTextAlignment == HmiHorizontalAlignment.Left ? 'start' : 'end' }}" />
    <hmi:localDef name="TextAnchorY"             type="string"                   hmi-bind:value="{{ LocalProps.VerticalTextAlignment == HmiVerticalAlignment.Center ? 'middle' : LocalProps.VerticalTextAlignment == HmiVerticalAlignment.Top ? 'start' : 'end' }}" />

  </defs>
  <g  opacity="1">
    <rect id="TIFID_ItemBGRect2"
                    x="0"
                    y="0"
                   hmi-bind:width="{ HmiProps.Width }"
                   hmi-bind:height="{ HmiProps.Height }"
                   hmi-data-bind:fill="{{ Converter.RGBA( Colors.Back ) }}"
                   stroke-width="1"/>

    <g id="TextGroup">
      <text id="TextText"
            hmi-bind:x="{{ floor( (LocalProps.TextAnchorX == 'start' ? ParamProps.Padding.Left : LocalProps.TextAnchorX == 'middle' ? (LocalProps.InteriorWidth / 2) :  LocalProps.InteriorWidth ) ) }}"
            hmi-bind:y="{{ floor( (LocalProps.TextAnchorY == 'start' ? ( LocalProps.TextHeightFontSize + ParamProps.Padding.Top )
                                                                : LocalProps.TextAnchorY == 'middle' ? ( ( LocalProps.InteriorHeight + LocalProps.TextHeightFontSize * 0.65 ) / 2 )
                                                                                                     : ( LocalProps.InteriorHeight - LocalProps.TextHeightFontSize * 0.20 - 2     )  ) ) }}"
            hmi-bind:fill="{{ Converter.RGBA( LocalProps.TextColor ) }}"
            hmi-bind:font-size="{ HmiProps.Font.Size }"
            hmi-bind:font-style="{{ HmiProps.Font.Italic ? 'italic' : 'normal' }}"
            hmi-bind:font-weight="{ HmiProps.Font.Weight }"
            hmi-bind:font-family="{ HmiProps.Font.Name }"
            hmi-bind:text-decoration="{{ Converter.TextDecoration( HmiProps.Font ) }}"
            hmi-bind:text-anchor="{ LocalProps.TextAnchorX }" >

        <hmi:text hmi-bind:value="{{ LocalProps.TextTrimming == HmiTextTrimming.None ? LocalProps.Text : Converter.TextEllipsis( LocalProps.Text, LocalProps.InteriorWidth, HmiProps.Font ) }}" />
      </text>
    </g>

  </g>
</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.4/dtd/svg14-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
       xmlns:xlink="http://www.w3.org/1999/xlink"
       xmlns:hmi="http://svg.siemens.com/hmi/"
       xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
       xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
       xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
       xmlns:hmi-data-bind="http://svg.siemens.com/hmi/data/bind/"
     height="10" width="10" >
    <hmi:self type="system:HmiDataCellSystemPart" displayName="DataCell" name="datacell" version="1.0.0" performanceClass="s">
        <hmi:data type="cell-view"></hmi:data>
        <hmi:paramDef name="Padding"      type="HmiPaddingPart" />
        <hmi:focus focusVisual="local"  canFocus="false"/>
    </hmi:self>
    <defs>
        <hmi:localDef name="Width"        type="number" hmi-bind:value="{ HmiProps.Width }"   />
        <hmi:localDef name="Height"       type="number" hmi-bind:value="{ HmiProps.Height }"   />
    </defs>
    <g>
        <hmi:inline
            hmi-bind:width="{ HmiProps.Width }"
            hmi-bind:height="{ HmiProps.Height }">
            <hmi:param name="Text"                    type="string"                   hmi-data-bind:value="{ Content.Data }" />
            <hmi:param name="IsEditing"               type="boolean"                  hmi-data-bind:value="{ Content.IsEditing }" />
            <hmi:param name="OutputFormat"            type="string"                   hmi-data-bind:value="{ Content.OutputFormat }" />
            <hmi:param name="TextColor"               type="HmiColor"                 hmi-data-bind:value="{ Colors.Fore }" />
            <hmi:param name="BackColor"               type="HmiColor"                 hmi-data-bind:value="{ Colors.Back }" />
            <hmi:param name="Systempart"              type="HmiDataCellSystemPart"    hmi-bind:value="{ HmiProps }" />
            <hmi:param name="Font"                    type="HmiFontPart"              hmi-bind:value="{ HmiProps.Font }" />
            <hmi:param name="Padding"                 type="HmiPaddingPart"           hmi-bind:value="{ ParamProps.Padding }" />
            <hmi:param name="Width"                   type="number"                   hmi-bind:value="{ LocalProps.Width }" />
            <hmi:param name="Height"                  type="number"                   hmi-bind:value="{ LocalProps.Height }" />
            <hmi:template  >
            <svg xmlns="http://www.w3.org/2000/svg"
                xmlns:xlink="http://www.w3.org/1999/xlink"
                xmlns:hmi="http://svg.siemens.com/hmi/"
                xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
                xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
                xmlns:hmi-data-bind="http://svg.siemens.com/hmi/data/bind/"
                preserveAspectRatio="none" >
            <hmi:self type="custom" displayName="Custom Flat Text Part" name="custom.flat.text.part" version="1.0.1" performanceClass="L">
                <hmi:paramDef name="Systempart"                 type="HmiDataCellSystemPart"    />
                <hmi:paramDef name="Text"                       type="string"                   />
                <hmi:paramDef name="IsEditing"                  type="boolean"                  />
                <hmi:paramDef name="Font"                       type="HmiFontPart"              />
                <hmi:paramDef name="TextColor"                  type="HmiColor"                 />
                <hmi:paramDef name="BackColor"                  type="HmiColor"                 />
                <hmi:paramDef name="Padding"                    type="HmiPaddingPart"           />
                <hmi:paramDef name="Width"                      type="number"                   />
                <hmi:paramDef name="Height"                     type="number"                   />
                <hmi:paramDef name="OutputFormat"               type="string"                   />
                <hmi:focus focusVisual="local"  canFocus="false"/>
            </hmi:self>
            <rect id="TIFID_ItemBGRect2"
                    x="0"
                    y="0"
                    hmi-bind:width="{ ParamProps.Width }"
                    hmi-bind:height="{ ParamProps.Height }"
                    hmi-bind:fill="{{ ParamProps.IsEditing ? 'rgba(255,255,255,1)' : Converter.RGBA( ParamProps.BackColor ) }}"
                />
            <g id="editBox" >
                <hmi-element:textField
                                        hmi-bind:start-x="{ ParamProps.Padding.Left }"
                                        hmi-bind:start-y="{ ParamProps.Padding.Top }"
                                        hmi-bind:fore-color="{{ ParamProps.IsEditing ? 'rgba(0,0,0,1)' : Converter.RGBA( ParamProps.TextColor ) }}"
                                        hmi-bind:width="{ ParamProps.Systempart.Width }"
                                        hmi-bind:height="{  ParamProps.Systempart.Height }"
                                        hmi-bind:vertical-text-alignment="{  ParamProps.Systempart.Content.VerticalTextAlignment }"
                                        hmi-bind:horizontal-text-alignment="{ ParamProps.Systempart.Content.HorizontalTextAlignment }"
                                        hmi-bind:value="{ParamProps.Text}"
                                        hmi-bind:output-format="{ParamProps.OutputFormat}"
                                        padding="0"
                                        hmi-bind:read-only="{{ParamProps.IsEditing ? false : true}}"
                                        hmi-bind:enabled="{ParamProps.Systempart.Enabled}"
                                        target="ParamProps.Text"
                                        hmi-bind:horizontal-scrollbar-visibility="{{ HmiScrollBarVisibility.Collapsed }}"
                                                        hmi-bind:vertical-scrollbar-visibility="{{ HmiScrollBarVisibility.Collapsed }}"
                                    >
                <hmi-feature:font
                    hmi-bind:size="{ ParamProps.Systempart.Font.Size }"
                    hmi-bind:italic="{ ParamProps.Systempart.Font.Italic }"
                    hmi-bind:weight="{ ParamProps.Systempart.Font.Weight }"
                    hmi-bind:strike-out="{ ParamProps.Systempart.Font.StrikeOut }"
                    hmi-bind:underline="{ ParamProps.Systempart.Font.Underline }"
                    hmi-bind:name="{ParamProps.Systempart.Font.Name }" />
                </hmi-element:textField>
            </g>
            </svg>
        </hmi:template>
        </hmi:inline>
    </g>
</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     preserveAspectRatio="none">

  <hmi:self type="custom" displayName="Flat BlockDiagram" name="style.flat.blockdiagram">
    <hmi:paramDef name="LineColor"             type="string"                 />
    <hmi:paramDef name="ActiveLineColor"       type="string"                 />
    <hmi:paramDef name="InActiveLineColor"     type="string"               />
    
  </hmi:self>



    <hmi-element:flowDiagram hmi-bind:height="{ Layout.ActualHeight }" hmi-bind:width="{ Layout.ActualWidth }" start-x="30" start-y="30" type="functionblock">

      <hmi-feature:flowLines>
        <hmi-feature:flowLine hmi-bind:stroke="{ ParamProps.LineColor }" line-state="normal" line-style="solid" stroke-width="2">
          <hmi-feature:flowLineDecorator decorator-type="input" show-text="true">
          </hmi-feature:flowLineDecorator>
          <hmi-feature:flowLineDecorator decorator-type="output" show-text="true">
          </hmi-feature:flowLineDecorator>
          <hmi-feature:flowLineDecorator decorator-type="terminal" show-text="true" symbol-type="line">
          </hmi-feature:flowLineDecorator>
        </hmi-feature:flowLine>


        <hmi-feature:flowLine hmi-bind:stroke="{ ParamProps.ActiveLineColor }" line-state="active" line-style="solid" stroke-width="2">
          <hmi-feature:flowLineDecorator decorator-type="input" show-text="true">
          </hmi-feature:flowLineDecorator>
          <hmi-feature:flowLineDecorator decorator-type="output" show-text="true">
          </hmi-feature:flowLineDecorator>
          <hmi-feature:flowLineDecorator decorator-type="terminal" show-text="true" symbol-type="line">
          </hmi-feature:flowLineDecorator>
        </hmi-feature:flowLine>


        <hmi-feature:flowLine hmi-bind:stroke="{ ParamProps.InActiveLineColor }" line-state="inactive" line-style="dash" stroke-width="2">
          <hmi-feature:flowLineDecorator decorator-type="input" show-text="true">
          </hmi-feature:flowLineDecorator>
          <hmi-feature:flowLineDecorator decorator-type="output" show-text="true">
          </hmi-feature:flowLineDecorator>
          <hmi-feature:flowLineDecorator decorator-type="terminal" show-text="true" symbol-type="line">
          </hmi-feature:flowLineDecorator>
        </hmi-feature:flowLine>
        
      </hmi-feature:flowLines>
       <hmi-feature:block content-height="300" content-width="300">
          <!--modify the value as required-->
          <hmi:master-include template="include.style.flat.blockview.svghmi" >
          </hmi:master-include>
        </hmi-feature:block>

        <hmi:master-inline>
            <hmi:template>
                <svg xmlns="http://www.w3.org/2000/svg" 
                 xmlns:hmi="http://svg.siemens.com/hmi/"
                 xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/" 
                 xmlns:hmi-data-bind="http://svg.siemens.com/hmi/data/bind/"
                 overflow="visible">
                    <hmi:self type="custom" name="title" displayName="title" >
                        <hmi:data type="text-details"></hmi:data>
                    </hmi:self>
                    <defs>
                        <hmi:localDef name="Text"               type="string"                     hmi-data-bind:value="{ Content.Text }" />
                        <hmi:localDef name="TextFontWeight"     type="string"                     hmi-data-bind:value="{ Content.TextFontWeight }" />
                        <hmi:localDef name="TextFontSize"       type="number"                     hmi-data-bind:value="{ Content.TextFontSize }" />
                        <hmi:localDef name="TextFontName"       type="string"                     hmi-data-bind:value="{ Content.TextFontName }" />
                        <hmi:localDef name="BlockSystemPart"    type="HmiBlockSymbolSystemPart"   hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiBlockSymbolSystemPart' ) }}" />
                    </defs>
                    <text  hmi-bind:font-size="{ LocalProps.TextFontSize }"
                        hmi-bind:font-weight="{ LocalProps.TextFontWeight }"
                        hmi-bind:fill="{{ Converter.RGBA(LocalProps.BlockSystemPart.HeaderForeColor) }}"
                        hmi-bind:font-family="{ LocalProps.TextFontName }">
                        <hmi:text hmi-bind:value="{ LocalProps.Text }"/>
                    </text>
                </svg>
            </hmi:template>
        </hmi:master-inline>

    </hmi-element:flowDiagram>
</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2020. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/"
     preserveAspectRatio="none"
     hmi:if="{ HmiProps.Visible }"
     hmi-flex:grow="{{ HmiProps.Visible ? HmiProps.SizeFactor : 0 }}" 
     hmi-flex:marginBottom = "{{ ParamProps.ShiftAxes ? 0 : (HmiProps.Visible == false ? 0 : ((HmiProps.$index == HmiProps.$count - 1) ? 0 :LocalProps.AreaDependentSpacing))}}"
     hmi-flex:marginRight = "{{ ParamProps.ShiftAxes ? (HmiProps.Visible == false ? 0 : ((HmiProps.$index == HmiProps.$count - 1) ? 0 :LocalProps.AreaDependentSpacing)): 0}}"
     >

    <hmi:self type="part:HmiFunctionTrendAreaPart" displayName="Flat Function Trend Area" name="style.flat.functiontrend.area" version="2.9">
        <hmi:paramDef name="BackColor"              type="HmiColor" />
        <hmi:paramDef name="AreaSpacing"            type="number"   />
        <hmi:paramDef name="ShiftAxes"              type="boolean"  />
        <hmi:paramDef name="Online"                 type="boolean"  />
        <hmi:paramDef name="ShowRuler"              type="boolean"  />
        <hmi:paramDef name="ExtendRulerToAxis"      type="boolean"  />
        <hmi:paramDef name="LegendFont"             type="HmiFontPart"  />
        <hmi:paramDef name="LegendForeColor"        type="HmiColor"  />
        <hmi:paramDef name="LegendVisibilty"        type="boolean"  />
    </hmi:self>

    <defs>
        <hmi:localDef name="LegendTextHeightWithFont"   type="number"                       hmi-bind:value="{{ Converter.TextHeight( 'XY', ParamProps.LegendFont ) }}"/>
        <hmi:localDef name="LegendTextHeight"           type="number"                       value="30"/>
        <hmi:localDef name="MarginFactor"               type="number"                       value="10"/>
        <hmi:localDef name="MarginBetweenAreas"         type="number"                       hmi-bind:value="{{ ParamProps.LegendVisibilty ? 10 : 20 }}"/>
        <hmi:localDef name="RulerExtension"             type="number"                       hmi-bind:value="{{ ( ParamProps.ExtendRulerToAxis ? -1 : 0 ) }}" />
        <hmi:localDef name="OffsetBetweenText"          type="number"                       value="5"/>
        <hmi:localDef name="LegendWidth"                type="number"                       value="180"/>
        <hmi:localDef name="VertScrollBarPosition"      type="number"                       value="0" />
        <hmi:localDef name="LegendMaxHeight"            type="number"                       hmi-bind:value="{{ ParamProps.LegendVisibilty ? ( gt( HmiProps.VisibleTrendCount, 0 ) ? ( (4 * LocalProps.LegendTextHeight) + (4 * LocalProps.OffsetBetweenText) ) : 0 ) : 0 }}" />
        <hmi:localDef name="ScrollBarPart"              type="HmiScrollBarSystemPart"       hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiScrollBarSystemPart' ) }}" />
        <hmi:localDef name="LegendFactor"               type="number"                       value="1" />
        <hmi:localDef name="LegendRightMargin"          type="number"                       hmi-bind:value="{{ LocalProps.ScrollBarPart.Thickness + ( 2 * LocalProps.MarginFactor ) }}" />
        <hmi:localDef name="RulerIndicatorSystemPart"   type="HmiRulerIndicatorSystemPart"  hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiRulerIndicatorSystemPart' ) }}" />
        <hmi:localDef name="StartX"                     type="number"                       hmi-bind:value="{{ ParamProps.ShiftAxes ? 0 : LocalProps.MarginFactor }}" />
        <hmi:localDef name="AreaDependentSpacing"       type="number"                       hmi-bind:value="{{ gt( HmiProps.$count, 1 ) ? ParamProps.AreaSpacing : 0 }}" />
    </defs>

    <g id="Background">
        <g hmi-flex:width="{ Layout.ActualWidth }" hmi-flex:height="{ Layout.ActualHeight }" hmi-flex:direction="column-reverse" hmi-flex:justifyContent="end">
            <g hmi-flex:grow="1">
                <hmi-element:chart hmi-bind:area-spacing="{ ParamProps.AreaSpacing }"
                                   hmi-bind:shift-axes="{ ParamProps.ShiftAxes }"
                                   hmi-bind:config="{ HmiProps }"
                                   hmi-bind:online="{ ParamProps.Online }"
                                   hmi-bind:show-ruler="{ ParamProps.ShowRuler }"
                                   hmi-bind:height="{{ Layout.ActualHeight - ( ParamProps.ShiftAxes ? LocalProps.MarginBetweenAreas : 0) }}"
                                   hmi-bind:width="{{ Layout.ActualWidth - ( ParamProps.ShiftAxes ? 0 : ( 2 * LocalProps.MarginFactor ) ) }}"
                                   hmi-bind:start-x="{ LocalProps.StartX }">
                    <hmi-feature:axes>
                        <hmi-feature:axis>
                            <!--Add structuring and visual children here.-->
                            <hmi-feature:areaGridlines />
                        </hmi-feature:axis>
                    </hmi-feature:axes>
                    <hmi-feature:rulers hmi-bind:low-extension="{ LocalProps.RulerExtension }"
                                        hmi-bind:high-extension="{ LocalProps.RulerExtension }">
                        <hmi-feature:rulerIndicator ruler-filter="regular"
                                                    content-height="300"
                                                    content-width="300">
                            <hmi:master-inline>
                                <hmi:param name="RulerColor" type="HmiColor"   hmi-bind:value="{ HmiProps.Ruler.Color }"/>
                                <hmi:template>
                                    <svg xmlns="http://www.w3.org/2000/svg"
                                         xmlns:xlink="http://www.w3.org/1999/xlink"
                                         xmlns:hmi="http://svg.siemens.com/hmi/"
                                         xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                                         xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/"
                                         xmlns:hmi-data-bind="http://svg.siemens.com/hmi/data/bind/">
                                        <hmi:self type="system:HmiRulerIndicatorSystemPart" displayName="Ruler" name="ruler" version="1.0.0" performanceClass="s">
                                            <hmi:paramDef name="RulerColor" 	type="HmiColor" />
                                            <hmi:data type="ruler-details"></hmi:data>
                                        </hmi:self>

                                        <defs>
                                            <hmi:localDef name="RawRulerText"           type="string"   hmi-data-bind:value="{ Content.Text1 }" />
                                            <hmi:localDef name="RulerText"		        type="string"   hmi-bind:value="{{ Converter.FormatPattern( LocalProps.RawRulerText, HmiProps.OutputFormat ) }}" />
                                            <hmi:localDef name="HorizRuler"             type="boolean"  hmi-bind:value="{{ HmiProps.Orientation == 0 }}" />
                                            <hmi:localDef name="TextHeight"             type="number"   hmi-bind:value="{{ Converter.TextHeight( 'XY', HmiProps.Font ) }}" />
                                            <hmi:localDef name="RectHeight"             type="number"   hmi-bind:value="{{ LocalProps.TextHeight + 12 }}" />
                                            <hmi:localDef name="MidRectHeight"          type="number"   hmi-bind:value="{{ LocalProps.RectHeight / 2 }}" />
                                            <hmi:localDef name="TextWidth"              type="number"   hmi-bind:value="{{ Converter.TextWidth( LocalProps.RulerText, HmiProps.Font ) }}" />
                                            <hmi:localDef name="ForeColor"              type="string"   value="rgba(125,205,245,1)" />
                                            <hmi:localDef name="TextY"                  type="number"   hmi-bind:value="{{ LocalProps.MidRectHeight + LocalProps.TextHeight / 4 + 1 }}" />
                                            <hmi:localDef name="FontStyle"              type="string"   hmi-bind:value="{{ HmiProps.Font.Italic ? 'italic' : 'normal' }}"/>
                                            <hmi:localDef name="TextDecoration"         type="string"   hmi-bind:value="{{ Converter.TextDecoration( HmiProps.Font ) }}"/>
                                            <hmi:localDef name="BackColor"              type="number"   value="0xFF64646A" />
                                            <hmi:localDef name="BackColorDarker"        type="HmiColor" hmi-bind:value="{{ Converter.Darker( LocalProps.BackColor, 0.7 ) }}" />
                                            <hmi:localDef name="RulerDimension"         type="number"   hmi-bind:value="{{ LocalProps.HorizRuler ? HmiProps.Height : HmiProps.Width }}" />
                                            <hmi:localDef name="MidRulerDimension"      type="number"   hmi-bind:value="{{ LocalProps.RulerDimension / 2 }}" />
                                            <hmi:localDef name="Derivation"             type="number"   hmi-bind:value="{{ -LocalProps.RulerDimension * HmiProps.RulerPosition / 2 }}" />
                                            <hmi:localDef name="RectWidth"              type="number"   hmi-bind:value="{{ LocalProps.TextWidth + 10 }}" />
                                            <hmi:localDef name="RectWidthPadding"       type="number"   hmi-bind:value="{{ LocalProps.RectWidth + 10 }}" />
                                            <hmi:localDef name="OffsetX"                type="number"   hmi-bind:value="{{ LocalProps.Derivation + ( LocalProps.RectWidthPadding / 2 ) }}" />
                                            <hmi:localDef name="RightLimit"             type="number"   hmi-bind:value="{{ LocalProps.RectWidthPadding - LocalProps.MidRulerDimension }}" />
                                            <hmi:localDef name="LowerLimitReached"      type="boolean"  hmi-bind:value="{{ gt( LocalProps.OffsetX, LocalProps.MidRulerDimension ) }}" />
                                            <hmi:localDef name="UpperLimitReached"      type="boolean"  hmi-bind:value="{{ lt( LocalProps.OffsetX, LocalProps.RightLimit ) }}" />
                                            <hmi:localDef name="RectXY"                 type="number"   hmi-bind:value="{{ LocalProps.LowerLimitReached ? -LocalProps.MidRulerDimension : ( LocalProps.UpperLimitReached ? -LocalProps.RightLimit : -LocalProps.OffsetX ) }}" />
                                            <hmi:localDef name="TextHeightPadding"      type="number"   hmi-bind:value="{{ - LocalProps.TextHeight - 5 }}" />
                                            <hmi:localDef name="TextX"                  type="number"   hmi-bind:value="{{ LocalProps.Derivation + LocalProps.TextHeightPadding }}" />
                                            <hmi:localDef name="RectXYPadding"          type="number"   hmi-bind:value="{{ LocalProps.RectXY + LocalProps.RectWidthPadding }}" />
                                            <!--When axis shifts then Width and height are interchanged-->

                                        </defs>

                                        <g hmi-flex:width="{ HmiProps.Width }"
                                           hmi-flex:height="{ HmiProps.Height }"
                                           hmi-flex:justifyContent="center"
                                           hmi-flex:direction="{{ LocalProps.HorizRuler ? 'column' : 'row' }}">
                                            <g opacity="1" hmi-flex:alignSelf="{{ LocalProps.HorizRuler ? 'end' : 'start' }}">
                                                <rect hmi-bind:x="{{ LocalProps.HorizRuler ? -LocalProps.RectHeight - 1 : LocalProps.RectXY }}"
                                                      hmi-bind:y="{{ LocalProps.HorizRuler ? LocalProps.RectXY : 1 }}"
                                                      hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}"
                                                      hmi-bind:width="{{ LocalProps.HorizRuler ? LocalProps.RectHeight : LocalProps.RectWidthPadding }}"
                                                      hmi-bind:height="{{ LocalProps.HorizRuler ? LocalProps.RectWidthPadding : LocalProps.RectHeight }}"
                                                      hmi-bind:stroke = "{{ Converter.RGBA( ParamProps.RulerColor ) }}" />
                                                <line id="ItemBorder"
                                                      hmi-bind:x1="{{ LocalProps.HorizRuler ? -LocalProps.RectHeight : LocalProps.RectXY }}"
                                                      hmi-bind:y1="{{ LocalProps.HorizRuler? LocalProps.RectXY : LocalProps.RectHeight }}"
                                                      hmi-bind:x2="{{ LocalProps.HorizRuler? -LocalProps.RectHeight : LocalProps.RectXYPadding }}"
                                                      hmi-bind:y2="{{ LocalProps.HorizRuler? LocalProps.RectXYPadding : LocalProps.RectHeight }}"
                                                      hmi-bind:stroke="{{ Converter.RGBA( ParamProps.RulerColor) }}"
                                                      stroke-width="2" />
                                                <text hmi:if="{ LocalProps.HorizRuler }"
                                                      stroke-width="0"
                                                      hmi-bind:x="{{ LocalProps.LowerLimitReached ? LocalProps.TextX - ( LocalProps.OffsetX - ( HmiProps.Height / 2 ) ) : ( LocalProps.UpperLimitReached ? LocalProps.TextX + LocalProps.RightLimit - LocalProps.OffsetX : LocalProps.TextX) }}"
                                                      hmi-bind:y="{{ LocalProps.TextHeight * ( 3 / 4 ) }}"
                                                      hmi-bind:fill="{{ Converter.RGBA( ParamProps.RulerColor ) }}"
                                                      hmi-bind:font-size="{ HmiProps.Font.Size }"
                                                      hmi-bind:font-style="{ LocalProps.FontStyle }"
                                                      hmi-bind:font-weight="{ HmiProps.Font.Weight }"
                                                      hmi-bind:font-family="{ HmiProps.Font.Name }"
                                                      hmi-bind:text-decoration="{ LocalProps.TextDecoration }"
                                                      text-anchor="middle"
                                                      hmi-bind:transform="rotate(-90, { LocalProps.TextHeightPadding } ,0)">
                                                    <hmi:text hmi-bind:value="{ LocalProps.RulerText }" />
                                                </text>
                                                <text hmi:if="{{ not(LocalProps.HorizRuler) }}"
                                                      stroke-width="0"
                                                      hmi-bind:x="{{ LocalProps.LowerLimitReached ? ( LocalProps.RectWidthPadding - HmiProps.Width ) / 2 : ( LocalProps.UpperLimitReached ? ( HmiProps.Width - LocalProps.RectWidthPadding ) / 2 : -LocalProps.Derivation) }}"
                                                      hmi-bind:y="{{ LocalProps.TextHeight / 3 + LocalProps.MidRectHeight }}"
                                                      hmi-bind:fill="{{ Converter.RGBA( ParamProps.RulerColor ) }}"
                                                      hmi-bind:font-size="{ HmiProps.Font.Size }"
                                                      hmi-bind:font-style="{ LocalProps.FontStyle }"
                                                      hmi-bind:font-weight="{ HmiProps.Font.Weight }"
                                                      hmi-bind:font-family="{ HmiProps.Font.Name }"
                                                      hmi-bind:text-decoration="{ LocalProps.TextDecoration }"
                                                      text-anchor="middle">
                                                    <hmi:text hmi-bind:value="{ LocalProps.RulerText }" />
                                                </text>
                                            </g>
                                        </g>
                                    </svg>
                                </hmi:template>
                            </hmi:master-inline>
                        </hmi-feature:rulerIndicator>
                    </hmi-feature:rulers>
                  
                    <hmi-feature:graphs>
                        <hmi-feature:graph>
                            <hmi-feature:graphMarker/>
                            <hmi-feature:tooltip>
                                <hmi:master-include template="include.style.flat.tooltip.svghmi">
                                </hmi:master-include>
                            </hmi-feature:tooltip>
                        </hmi-feature:graph>
                    </hmi-feature:graphs>
                </hmi-element:chart>
            </g>

            <g hmi-flex:maxHeight="{{ LocalProps.LegendMaxHeight + LocalProps.LegendFactor }}" hmi-flex:marginTop="{{ ParamProps.ShiftAxes ? LocalProps.MarginFactor : 0 }}" hmi-flex:marginLeft="{ LocalProps.StartX }" hmi:if="{ ParamProps.LegendVisibilty }">
                <defs>
                    <clipPath id="legendClipPath">
                        <rect id="legendClipRect"
                              hmi-bind:width="{ Layout.ActualWidth }"
                              hmi-bind:height="{{ gt( Layout.ActualHeight, LocalProps.LegendMaxHeight ) ? LocalProps.LegendMaxHeight : Layout.ActualHeight }}"/>
                    </clipPath>
                </defs>
                <g id="TIFID_TrendLegendsLabel" clip-path="url(#legendClipPath)" hmi-flex:maxWidth="{{ Layout.ActualWidth - LocalProps.LegendRightMargin - ( ParamProps.ShiftAxes ? LocalProps.AreaDependentSpacing : 0 ) }}" hmi-flex:minHeight="{{ ParamProps.ShiftAxes ? ( gt( LocalProps.LegendMaxHeight, 0 ) : round( LocalProps.LegendMaxHeight ) : 0 ) : 0 }}">
                    <hmi:inline hmi-bind:forEach="{ HmiProps.FunctionTrends }"
                                hmi-bind:y="{{ gt( Layout.ActualHeight , round( LocalProps.LegendMaxHeight )) ? -( LocalProps.VertScrollBarPosition ) : 0 }}"
                                hmi-flex:direction="row"
                                hmi-flex:wrap="true" hmi-flex:alignContent="start"  >
                        <hmi:param name="Font"                     type="HmiFontPart"    hmi-bind:value="{ ParamProps.LegendFont }" />
                        <hmi:param name="LegendForeColor"          type="HmiColor"       hmi-bind:value="{ ParamProps.LegendForeColor }" />
                        <hmi:param name="SelectedLegendBackColor"  type="HmiColor"       hmi-bind:value="{ HmiProps.Ruler.Color }" />
                        <hmi:param name="SelectedLegendForeColor"  type="HmiColor"       hmi-bind:value="{ LocalProps.RulerIndicatorSystemPart.BackColor }" />
                        <hmi:param name="LegendWidth"              type="number"         hmi-bind:value="{ LocalProps.LegendWidth }"/>
                        <hmi:param name="OffsetBetweenText"        type="number"         hmi-bind:value="{ LocalProps.OffsetBetweenText }"/>
                        <hmi:param name="LegendTextHeight"         type="number"         hmi-bind:value="{ LocalProps.LegendTextHeight }"/>
                        <hmi:param name="SelectedTrendId"          type="number"         hmi-bind:value="{ HmiProps.SelectedFunctionTrend }"/>
                        <hmi:param name="BackColor"                type="HmiColor"       hmi-bind:value="{ ParamProps.BackColor }"/>
                        <hmi:param name="LegendTextHeightWithFont" type="number"         hmi-bind:value="{ LocalProps.LegendTextHeightWithFont }"/>
                        <hmi:param name="VisibleTrendCount"        type="number"         hmi-bind:value="{ HmiProps.VisibleTrendCount }" />
                      <hmi:template>
                            <svg xmlns="http://www.w3.org/2000/svg"
                                 xmlns:xlink="http://www.w3.org/1999/xlink"
                                 xmlns:hmi="http://svg.siemens.com/hmi/"
                                 xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                                 xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/"
                                 xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
                                 xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
                                 hmi:if="{ HmiProps.Visible }"
                                 hmi-flex:minHeight="{{ HmiProps.Visible ? ParamProps.LegendTextHeight + ParamProps.OffsetBetweenText : 0 }}"
                                 hmi-flex:width="{{ HmiProps.Visible ? ParamProps.LegendWidth : 0 }}">

                                <hmi:self type="part:HmiFunctionTrendPart">
                                    <hmi:paramDef name="Font"                     type="HmiFontPart"  />
                                    <hmi:paramDef name="LegendForeColor"          type="HmiColor"     />
                                    <hmi:paramDef name="SelectedLegendBackColor"  type="HmiColor"     />
                                    <hmi:paramDef name="SelectedLegendForeColor"  type="HmiColor"     />
                                    <hmi:paramDef name="LegendWidth"              type="number"  />
                                    <hmi:paramDef name="OffsetBetweenText"        type="number"  />
                                    <hmi:paramDef name="LegendTextHeight"         type="number"  />
                                    <hmi:paramDef name="SelectedTrendId"          type="number" two-way="true" />
                                    <hmi:paramDef name="BackColor"                type="HmiColor" />
                                    <hmi:paramDef name="LegendTextHeightWithFont" type="number" />
                                    <hmi:paramDef name="VisibleTrendCount"        type="number" />
                                </hmi:self>

                                <defs>
                                    <hmi:localDef name="InnerPadding"            type="number" value="10"/>
                                    <hmi:localDef name="LegendTextStartPos"      type="number" value="25"/>
                                    <hmi:localDef name="TrendDisplayText"        type="string" hmi-bind:value="{{ Converter.TextEllipsis( HmiProps.TrendDescription, ( ( ParamProps.LegendWidth - LocalProps.LegendTextStartPos ) - LocalProps.InnerPadding ) , ParamProps.Font )}}" />
                                    <hmi:localDef name="LegendTextMidPos"        type="number" hmi-bind:value="{{ ParamProps.LegendTextHeight / 2 }}"/>
                                    <hmi:localDef name="LegendTextMidPosPadding" type="number" hmi-bind:value="{{ LocalProps.LegendTextMidPos - 5 }}" />
									                  <hmi:localDef name="DashTypeSolid"           type="string" value="null" />
                                    <hmi:localDef name="DashTypeDash"            type="string" value="2,1" />
                                    <hmi:localDef name="DashTypeDot"             type="string" value="1,1" />
                                    <hmi:localDef name="DashTypeDashDot"         type="string" value="2,1,1,1" />
                                    <hmi:localDef name="DashTypeDashDotDot"      type="string" value="2,1,1,1,1,1" />
                                    <hmi:localDef name="DashArray"               type="string" hmi-bind:value="{{ HmiProps.DashType == 0 ? LocalProps.DashTypeSolid : HmiProps.DashType == 1 ? LocalProps.DashTypeDash : HmiProps.DashType == 2 ? LocalProps.DashTypeDot : HmiProps.DashType == 3 ? LocalProps.DashTypeDashDot : LocalProps.DashTypeDashDotDot }}" />
                                  
                                    <clipPath id="legendTextClipPath">
                                        <rect id="legendTextClip"
                                              hmi-bind:width="{ Layout.ActualWidth }"
                                              hmi-bind:height="{ ParamProps.LegendTextHeight }"/>
                                    </clipPath>
                                  
                                    <hmi:action id="onMouseEnter">
                                        <hmi:sendCommand name="SHOW_TOOLTIP"    type="string" hmi-bind:value="{HmiProps.TrendDescription}" hmi-bind:condition="{{ gt( Converter.TextWidth( HmiProps.TrendDescription, ParamProps.Font ), ( Layout.ActualWidth - 50 ) ) }}"/>
                                    </hmi:action>

                                    <hmi:action id="onMouseLeave">
                                        <hmi:sendCommand name="HIDE_TOOLTIP" />
                                    </hmi:action>

                                    <hmi:action id="onSelectingFunctionTrend">
                                        <hmi:setProperty name="ParamProps.SelectedTrendId"   type="number"  hmi-bind:value="{ HmiProps.ElementID }"  />
                                    </hmi:action>

                                </defs>
                                <g hmi-event:down="url(#onSelectingFunctionTrend)" clip-path="url(#legendTextClipPath)">
                                    <rect hmi-bind:width="{ Layout.ActualWidth }"
                                          hmi-bind:height="{ ParamProps.LegendTextHeight }"
                                          hmi-bind:fill="{{ and( gt( ParamProps.VisibleTrendCount, 1 ), eq( HmiProps.ElementID, ParamProps.SelectedTrendId )) ? Converter.RGBA( ParamProps.SelectedLegendBackColor ) : Converter.RGBA( ParamProps.BackColor ) }}">
                                    </rect>
                                    <line hmi-bind:stroke="{{ Converter.RGBA( HmiProps.LineColor ) }}"
                                          hmi-bind:stroke-dasharray="{ LocalProps.DashArray }"
                                          stroke-width="2"
                                          hmi-bind:x1="{ LocalProps.InnerPadding }"
                                          hmi-bind:y1="{ LocalProps.LegendTextMidPos }"
                                          hmi-bind:x2="{{ LocalProps.InnerPadding + 20 }}"
                                          hmi-bind:y2="{ LocalProps.LegendTextMidPos }"/>

                                    <rect hmi:if="{{ HmiProps.MarkerType == HmiMarkerType.Square }}" hmi-bind:fill="{{ HmiProps.MarkerType == HmiMarkerType.None ? Converter.RGBA( HmiProps.LineColor ) : Converter.RGBA( HmiProps.MarkerColor ) }}" stroke-width="0" hmi-bind:x="{{ 5 + LocalProps.InnerPadding }}" hmi-bind:y="{ LocalProps.LegendTextMidPosPadding }" width="10" height="10"/>

                                    <image hmi:if="{{ HmiProps.MarkerType == HmiMarkerType.Graphic }}" height="10" width="10" hmi-bind:x="{{ 5 + LocalProps.InnerPadding }}" hmi-bind:y="{ LocalProps.LegendTextMidPosPadding }" hmi-bind--xlink:href="{ HmiProps.MarkerGraphic }"/>

                                    <circle hmi:if="{{ or( HmiProps.MarkerType == HmiMarkerType.None , or( HmiProps.MarkerType == HmiMarkerType.Point , HmiProps.MarkerType == HmiMarkerType.Circle ) ) }}" hmi-bind:stroke="{{ Converter.RGBA ( HmiProps.LineColor ) }}" hmi-bind:fill="{{ HmiProps.MarkerType == HmiMarkerType.None ? Converter.RGBA( HmiProps.LineColor ) : Converter.RGBA( HmiProps.MarkerColor ) }}" stroke-width="0" r="5" hmi-bind:cx="{{ LocalProps.InnerPadding + 10 }}" hmi-bind:cy="{ LocalProps.LegendTextMidPos }"/>

                                    <text hmi-event:mouseEnter="url(#onMouseEnter)"
                                          hmi-event:mouseLeave="url(#onMouseLeave)"
                                          hmi-bind:fill="{{ and( gt( ParamProps.VisibleTrendCount, 1 ), eq( HmiProps.ElementID, ParamProps.SelectedTrendId )) ? Converter.RGBA( ParamProps.SelectedLegendForeColor ) :  Converter.RGBA( ParamProps.LegendForeColor ) }}"
                                          hmi-bind:font-style="{{ ParamProps.Font.Italic ? 'italic' : 'normal' }}"
                                          hmi-bind:font-weight="{ ParamProps.Font.Weight }"
                                          hmi-bind:font-family="{ ParamProps.Font.Name }"
                                          hmi-bind:text-decoration="{{ Converter.TextDecoration( ParamProps.Font ) }}"
                                          hmi-bind:font-size="{ ParamProps.Font.Size }"
                                          hmi-bind:y="{{ LocalProps.LegendTextMidPos +  ( ( ParamProps.LegendTextHeightWithFont - LocalProps.InnerPadding ) / 2 ) }}"
                                          stroke-width="0"
                                          hmi-bind:x="{{ LocalProps.LegendTextStartPos + LocalProps.InnerPadding }}">
                                        <hmi:text hmi-bind:value="{ LocalProps.TrendDisplayText }" />
                                    </text>
                                </g>
                            </svg>
                        </hmi:template>
                    </hmi:inline>
                </g>
                <g hmi:if="{{ gt( Layout.ActualHeight , round( LocalProps.LegendMaxHeight) ) }}">
                    <hmi:include template="include.style.flat.scrollbarstandalone.svghmi"
                                 hmi-bind:width="{ Layout.ActualWidth }"
                                 hmi-bind:height="{ Layout.ActualHeight }">

                        <hmi:param name="BackColor"           type="HmiColor"         hmi-bind:value="{ LocalProps.ScrollBarPart.BackColor }" />
                        <hmi:param name="ThumbBackColor"      type="HmiColor"         hmi-bind:value="{ LocalProps.ScrollBarPart.ThumbBackColor }" />
                        <hmi:param name="Orientation"         type="HmiOrientation"   hmi-bind:value="{{ HmiOrientation.Vertical }}" />
                        <hmi:param name="Width"               type="number"           hmi-bind:value="{ LocalProps.ScrollBarPart.Thickness }" />
                        <hmi:param name="Height"              type="number"           hmi-bind:value="{ LocalProps.LegendMaxHeight }" />
                        <hmi:param name="BeginValue"          type="number"           hmi-bind:value="{ LocalProps.ScrollBarPart.BeginValue }" />
                        <!--Formula to calculate number of rows legends could have been extended considering the visible trend count and Actual Width-->
                        <hmi:param name="EndValue"            type="number"           hmi-bind:value="{{ gt( Layout.ActualWidth, LocalProps.LegendWidth ) ? (ceil( HmiProps.VisibleTrendCount / floor( (Layout.ActualWidth - LocalProps.LegendRightMargin ) / LocalProps.LegendWidth ))) * ( LocalProps.LegendTextHeight + LocalProps.OffsetBetweenText ) :  HmiProps.VisibleTrendCount * ( LocalProps.LegendTextHeight + LocalProps.OffsetBetweenText ) }}" />
                        <hmi:param name="CurrentValue"        type="number"           hmi-bind:value="{ LocalProps.VertScrollBarPosition }" />
                        <hmi:param name="VisibleValueRange"   type="number"           hmi-bind:value="{ LocalProps.LegendMaxHeight }" />
                        <hmi:param name="Thickness"           type="number"           hmi-bind:value="{ LocalProps.ScrollBarPart.Thickness }" />
                        <hmi:param name="SmallStepValueRange" type="number"           hmi-bind:value="{{ gt( Layout.ActualWidth, LocalProps.LegendWidth ) ? ceil( HmiProps.VisibleTrendCount / floor( (Layout.ActualWidth - LocalProps.LegendRightMargin ) / LocalProps.LegendWidth )) :  HmiProps.VisibleTrendCount }}" />
                        <hmi:param name="BorderWidth"         type="number"           hmi-bind:value= "{ LocalProps.ScrollBarPart.BorderWidth }" />
                        <hmi:param name="OffsetX"             type="number"           hmi-bind:value="{{ Layout.ActualWidth - LocalProps.ScrollBarPart.Thickness - ( ParamProps.ShiftAxes ? LocalProps.AreaDependentSpacing : LocalProps.MarginFactor )  }}" />
                        <hmi:param name="OffsetY"             type="number"           value="0" />
                    </hmi:include>
                </g>
            </g>
        </g>
    </g>
</svg><!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2022. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     preserveAspectRatio="none"
     id="custom_GraphOverviewContent"
     data-tif-type="WSI:SvgGrid">

  <hmi:self type="part:HmiDataGridViewPart" displayName="Flat Graph Overview Content" name="style.flat.graphoverviewcontent">
    <hmi:paramDef name="WindowInnerWidth"       type="number"   />
    <hmi:paramDef name="AlwaysShowRecent"       type="boolean"  />
    <hmi:paramDef name="FocusColor"             type="string"   />
    <hmi:paramDef name="ShowFocusVisual"        type="boolean"   />
    <hmi:paramDef name="CaptionColor"           type="string" />
    <hmi:paramDef name="Font"                   type="HmiFontPart" />
    <hmi:paramDef name="HeightValue"            type="number"   />
  </hmi:self>

  <g id="Background">
    <!--chnage x to Layout.ActualX-->
   <hmi-element:table auto-scroll="false" hmi-bind:config="{ HmiProps }" hmi-bind:height="{{ ParamProps.HeightValue }}" hmi-bind:width="{ ParamProps.WindowInnerWidth }" start-x="0" start-y="2" horizontal-scrollbar-visibility="collapsed"
                vertical-scrollbar-visibility="collapsed">

      <hmi-feature:dataTemplates>
        <hmi:master-inline>
          <hmi:param name="Padding"   type="HmiPaddingPart"   hmi-bind:value="{ HmiProps.CellPadding }" />
          <hmi:template>
            <svg xmlns="http://www.w3.org/2000/svg"
                  xmlns:xlink="http://www.w3.org/1999/xlink"
                  xmlns:hmi="http://svg.siemens.com/hmi/"
                  xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                  xmlns:hmi-data-bind="http://svg.siemens.com/hmi/data/bind/"
                  height="10"
                  width="10" >

              <hmi:self type="system:HmiDataCellSystemPart" displayName="DataCell" name="datacell" version="1.0.0" performanceClass="s">
                <hmi:data type="cell-view"></hmi:data>
                <hmi:paramDef name="Padding"      type="HmiPaddingPart" />
              </hmi:self>

              <g>
                <rect id="TIFID_ItemBGRect5"
                      hmi-bind:width="{ HmiProps.Width }"
                      hmi-bind:height="{ HmiProps.Height }"
                      hmi-data-bind:fill="{{ Converter.RGBA( Colors.Back ) }}"
                      stroke-width="1"/>

                <hmi:include template="include.style.flat.content.svghmi" hmi-bind:for="{ HmiProps.Content }"
                            hmi-bind:x="{ ParamProps.Padding.Left }"
                            hmi-bind:y="{ ParamProps.Padding.Top }"
                            hmi-bind:width="{{ HmiProps.Width - ParamProps.Padding.Left - ParamProps.Padding.Right }}"
                            hmi-bind:height="{{ HmiProps.Height - ParamProps.Padding.Bottom }}">
                  <hmi:param name="Graphic"         type="HmiGraphic"   hmi-data-bind:value="{ Content.Graphic.Url }"       />
                  <hmi:param name="Text"            type="string"       hmi-data-bind:value="{ Content.Data }"              />
                  <hmi:param name="Font"            type="HmiFontPart"  hmi-bind:value="{ HmiProps.Font }"                  />
                  <hmi:param name="TextColor"       type="HmiColor"     hmi-data-bind:value="{ Colors.Fore }"               />
                  <hmi:param name="GraphicWidth"    type="number"       hmi-data-bind:value="{ Content.Graphic.Width }"     />
                  <hmi:param name="GraphicHeight"   type="number"       hmi-data-bind:value="{ Content.Graphic.Height }"    />
                </hmi:include>
              </g>
            </svg>
          </hmi:template>
        </hmi:master-inline>
      </hmi-feature:dataTemplates>

      <hmi-feature:gridlines>
         <hmi-feature:gridline
              position-filter="begin inner end" expansion="inner header"
              hmi-bind:stroke-width="{ HmiProps.GridLineWidth }"
              hmi-bind:stroke="{{ HmiProps.GridLineVisibility == 0 ? 'rgba(0,0,0,0)' : Converter.RGBA(  HmiProps.GridLineColor ) }}"
              orientation="row column">
        </hmi-feature:gridline>
      </hmi-feature:gridlines>
    </hmi-element:table>
  </g>
</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2022. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg" xmlns:hmi="http://svg.siemens.com/hmi/"
    xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
    xmlns:hmi-types="http://svg.siemens.com/hmi/types/"
    xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/"
    xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
    xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
    xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/">

  <hmi:self type="part:HmiDynamicPropertyPart" name="style.flat.graphoverviewstep" displayName="Content of the Steps" >
    <hmi:paramDef name="FocusColor"                 type="HmiColor"/>
    <hmi:paramDef name="ForeColor"                  type="HmiColor"/>
    <hmi:paramDef name="BackColor"                  type="HmiColor"/>
    <hmi:paramDef name="Font"                       type="HmiFontPart"/>
    <hmi:paramDef name="GridLineColor"              type="HmiColor"/>
    <hmi:paramDef name="OperationMode"              type="boolean"/>
    <hmi:paramDef name="AmountOfSteps"              type="number"/>
    <hmi:paramDef name="Width"                      type="number"/>
    <hmi:paramDef name="Height"                     type="number"/>
  </hmi:self>
  <defs>
    <hmi:localDef name="PropNameText"                   type="string"         value="Text"/>
    <hmi:localDef name="VertPos"                        type="number"         value="0"/>
    <hmi:localDef name="CurrentStep"                    type="string"         value="CurrentStep"/>
    <hmi:localDef name="LastStep"                    	  type="string"         value="LastStep"/>
    <hmi:localDef name="SupervisionError"               type="string"         value="SupervisionError"/>
    <hmi:localDef name="InterlockError"                 type="string"         value="InterlockError"/>
    <hmi:localDef name="PropNameBorderColor"            type="string"         value="BorderColor" />
    <hmi:localDef name="PropNameBorderWidth"            type="string"         value="BorderWidth" />
    <hmi:localDef name="PropNameBackColor"              type="string"         value="BackColor" />
    <hmi:localDef name="PropNameForeColor"              type="string"         value="ForeColor" />
    <hmi:localDef name="PropNameTitleBgColor"           type="string"         value="TitleBgColor" />
    <hmi:localDef name="PropNameTitleForeColor"         type="string"         value="TitleForeColor" />
    <hmi:localDef name="PropSpacePaddingItem"           type="string"         value="SpacePaddingItem" />
    <hmi:localDef name="StepWidth"                      type="string"         value="StepWidth" />
    <hmi:localDef name="EmptyList"                      type="string"         value="EmptyList" />
  </defs>
  <g id="ElementsGroup" >
    <hmi-element:listContainer source="1" hmi-bind:width="{ Layout.ActualWidth }" hmi-bind:height="{ Layout.ActualHeight }">
      <hmi-feature:properties>
        <hmi-feature:select hmi-bind:name="{ LocalProps.PropNameText }"             as="Text" />
        <hmi-feature:select hmi-bind:name="{ LocalProps.CurrentStep }"              as="CurrentStep" />
        <hmi-feature:select hmi-bind:name="{ LocalProps.LastStep }"                 as="LastStep" />
        <hmi-feature:select hmi-bind:name="{ LocalProps.InterlockError }"           as="InterlockError" />
        <hmi-feature:select hmi-bind:name="{ LocalProps.SupervisionError }"         as="SupervisionError" />
        <hmi-feature:select hmi-bind:name="{ LocalProps.PropNameTitleBgColor }"     as="TitleBgColor" />
        <hmi-feature:select hmi-bind:name="{ LocalProps.PropNameTitleForeColor }"   as="TitleForeColor" />
        <hmi-feature:select hmi-bind:name="{ LocalProps.PropNameBorderColor }"      as="BorderColor" />
        <hmi-feature:select hmi-bind:name="{ LocalProps.StepWidth }"                as="StepWidth" />
        <hmi-feature:select hmi-bind:name="{ LocalProps.EmptyList }"                as="EmptyList" />
      </hmi-feature:properties>
      <hmi:master-inline>
        <hmi:param name="Font"              type="HmiFontPart"     hmi-bind:value="{ ParamProps.Font }" />
        <hmi:param name="ForeColor"         type="HmiColor"        hmi-bind:value="{ ParamProps.ForeColor }" />
        <hmi:param name="GridLineColor"     type="HmiColor"        hmi-bind:value="{ ParamProps.GridLineColor }"/>
        <hmi:param name="BackColor"         type="HmiColor"        hmi-bind:value="{ ParamProps.BackColor }"/>
        <hmi:param name="FocusColor"        type="HmiColor"        hmi-bind:value="{ ParamProps.FocusColor }"/>
        <hmi:param name="Height"            type="number"          hmi-bind:value="{ ParamProps.Height }"/>
        <hmi:template>
          <svg id="TIFID_List_Steps_Data" data-tif-type="WSI:StepData"
              xmlns="http://www.w3.org/2000/svg" xmlns:hmi="http://svg.siemens.com/hmi/"
              xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
              xmlns:hmi-types="http://svg.siemens.com/hmi/types/"
              xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/" overflow="visible">
            <hmi:self type="system:HmiListContainerSystemPart" name="lc-master" displayName="Content of the ListContainer master" >
              <hmi:paramDef name="Font"             type="HmiFontPart"  />
              <hmi:paramDef name="ForeColor"        type="HmiColor"     />
              <hmi:paramDef name="GridLineColor"    type="HmiColor"     />
              <hmi:paramDef name="BackColor"        type="HmiColor"     />
              <hmi:paramDef name="FocusColor"       type="HmiColor"     />
              <hmi:paramDef name="Height"           type="number"       />
            </hmi:self>
            <hmi:inline hmi-bind:forEach="{ HmiProps.List }" x="0" y="0" hmi-flex:direction="row" hmi-flex:wrap="true">
              <hmi:param name="Font"                type="HmiFontPart"      hmi-bind:value="{ ParamProps.Font }" />
              <hmi:param name="FocusColor"          type="HmiColor"         hmi-bind:value="{ ParamProps.FocusColor }"/>
              <hmi:param name="ForeColor"           type="HmiColor"         hmi-bind:value="{ ParamProps.ForeColor }" />
              <hmi:param name="BackColor"           type="HmiColor"         hmi-bind:value="{ ParamProps.BackColor }"/>
              <hmi:param name="GridLineColor"       type="HmiColor"         hmi-bind:value="{ ParamProps.GridLineColor }"/>
              <hmi:param name="SelectedIndex"       type="number"           hmi-bind:value="{ HmiProps.SelectedIndex }" />
              <hmi:param name="Height"              type="number"           hmi-bind:value="{ ParamProps.Height }"/>
              <hmi:template>
                <svg id="TIFID_List_Step_Content" data-tif-type="WSI:StepContent"
                      xmlns="http://www.w3.org/2000/svg" xmlns:hmi="http://svg.siemens.com/hmi/"
                      xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                      xmlns:hmi-types="http://svg.siemens.com/hmi/types/"
                      xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/"
                      xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
                      hmi-flex:minWidth="{{ eq(HmiProps.LastStep, true) ? 150 : (eq(HmiProps.EmptyList, true) ? HmiProps.StepWidth : 50) }}"
                      hmi-flex:minHeight="60"
                      hmi-flex:maxHeight="100">
                  <hmi:self type="part:HmiDynamicPropertyPart" name="lc-master" displayName="Content of the ListContainer master" >
                    <hmi:paramDef name="Font"             type="HmiFontPart" />
                    <hmi:paramDef name="FocusColor"       type="HmiColor" />
                    <hmi:paramDef name="ForeColor"        type="HmiColor" />
                    <hmi:paramDef name="BackColor"        type="HmiColor"  />
                    <hmi:paramDef name="GridLineColor"    type="HmiColor"  />
                    <hmi:paramDef name="SelectedIndex"    type="number"  two-way="true" />
                    <hmi:paramDef name="Height"           type="number"  />
                  </hmi:self>
                  <defs>
                    <hmi:localDef name="Size"                    type="number"     value="14"  />
                    <hmi:localDef name="Weight"                  type="number"     value="200"  />
                    <hmi:localDef name="FName"                   type="string"     value="Arial" />   
                    <hmi:localDef name="RectHeight"              type="number"     hmi-bind:value="{ ParamProps.Height }"  />
                    <hmi:localDef name="Supervision"             type="number"     value="4294321223" />
                    <hmi:localDef name="Interlock"               type="number"     value="4294936898 " />
                    <hmi:localDef name="EmptyStepWidth"          type="number"     hmi-bind:value="{{(eq(HmiProps.EmptyList, true) ? HmiProps.StepWidth : 50 )}}"  />
                    <hmi:localDef name="RectWidth"               type="number"     hmi-bind:value="{{ eq(HmiProps.LastStep, true) ? 150 : LocalProps.EmptyStepWidth }}" />
                    <hmi:localDef name="TextCharWidth"           type="number"     hmi-bind:value="{{ Converter.TextWidth( HmiProps.Text, ParamProps.Font, true) }}" />
                    <hmi:localDef name="IsMultiline"             type="boolean"    hmi-bind:value="{{ gt(LocalProps.TextCharWidth, 75) ? true: false }}" />
                    <hmi:localDef name="TextStartX"              type="number"     hmi-bind:value="{{ (LocalProps.RectWidth/2) -  (LocalProps.TextCharWidth/2) }}" />
                    <hmi:localDef name="TextStartY"              type="number"     hmi-bind:value="{{ LocalProps.RectHeight/2 + 5 }}"  />
                    <hmi:localDef name="isSelectedStep"          type="boolean"    hmi-bind:value="{{ and(eq(ParamProps.SelectedIndex,HmiProps.$index), not(eq(HmiProps.EmptyList, true))) ? true: false }}" />
                    <hmi:localDef name="RectBorder"              type="HmiColor"   hmi-bind:value="{{ LocalProps.isSelectedStep ? ParamProps.FocusColor: ParamProps.GridLineColor}}"  />
                    <hmi:localDef name="RectBorderWidth"         type="number"     hmi-bind:value="{{ LocalProps.isSelectedStep ? 4: 1}}" />
                    <hmi:localDef name="StepBackColor"           type="HmiColor"   hmi-bind:value="{{ eq(HmiProps.SupervisionError, true)? LocalProps.Supervision: (eq(HmiProps.InterlockError, true) ? LocalProps.Interlock: ParamProps.BackColor)}}" />
                  </defs>
                  <rect hmi:if="{{ not(eq(HmiProps.EmptyList, true)) }}" hmi-bind:height="{{ LocalProps.RectHeight }}" hmi-bind:width="{{ LocalProps.RectWidth }}" hmi-bind:fill="{{Converter.RGBA(LocalProps.StepBackColor)}}"
                    hmi-bind:stroke-width="{ LocalProps.RectBorderWidth }" hmi-bind:stroke="{{ LocalProps.RectBorder }}"></rect>
                  <path hmi:if="{{ and(eq(HmiProps.LastStep, false), eq(HmiProps.EmptyList, true)) }}" hmi-bind:d="M0,0 L{{LocalProps.RectWidth}},0 L{{LocalProps.RectWidth}},{{LocalProps.RectHeight}} L0,{{LocalProps.RectHeight}} L0,0"
                    hmi-bind:stroke-width="{ LocalProps.RectBorderWidth }" fill="none" hmi-bind:stroke="{{ LocalProps.RectBorder }}"/>
                  <path hmi:if="{{ eq(HmiProps.LastStep, true) }}" hmi-bind:d="M0,0 L{{LocalProps.RectWidth}},0 L{{LocalProps.RectWidth}},{{LocalProps.RectHeight}} L0,{{LocalProps.RectHeight}} L0,0"
                    hmi-bind:stroke-width="{ LocalProps.RectBorderWidth }" fill="none" hmi-bind:stroke="{{ LocalProps.RectBorder }}"/>
                    <text 
                      hmi-bind:fill="{{ParamProps.ForeColor}}"
                      hmi-bind:font-size="{ ParamProps.Font.Size }"
                      hmi-bind:font-weight="{ ParamProps.Font.Weight }"
                      hmi-bind:font-family="{ ParamProps.Font.Name }"
                      hmi-bind:x="{{ LocalProps.TextStartX  }}"
                      hmi-bind:y="{ LocalProps.TextStartY }">
                      <hmi:text hmi-bind:value="{ HmiProps.Text }" />
                    </text>
                </svg>
              </hmi:template>
            </hmi:inline>
          </svg>
        </hmi:template>
      </hmi:master-inline>
    </hmi-element:listContainer>
  </g>
</svg><!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:hmi="http://svg.siemens.com/hmi/"
    xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
    xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
    xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
    xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
    xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
    xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/"
    preserveAspectRatio="none">

    <!-- Parameters passed from the root template -->
    <hmi:self type="part:HmiToolBarPart" displayName="Extended ToolBar Part" name="extended.toolbar.part" version="1.0.1" performanceClass="L" >

        <hmi:paramDef name="Width"           type="number"   />
        <hmi:paramDef name="Height"          type="number"   />
        <hmi:paramDef name="ItemOperable"    type="boolean"  />
        <hmi:paramDef name="FocusColor"      type="string"   />
        <hmi:paramDef name="ShowFocusVisual" type="boolean" />
    </hmi:self>

    <defs>
        <!-- Local definitions of this template -->
        <!-- The height of the status bar currently is calculated by javascript code and passed to the template in its Height property -->

        <hmi:localDef name="BackColor"          type="string"                   hmi-bind:value="{{ Converter.RGBA( HmiProps.BackColor ) }}" />
        <hmi:localDef name="ControlBarOperable" type="boolean"                  hmi-bind:value="{{ and( HmiProps.Enabled, ParamProps.ItemOperable ) }}" />

    </defs>

    <g hmi-flex:width="{ ParamProps.Width }" hmi-flex:height="{ ParamProps.Height }">
        <g id="TIFID_ToolBarCompositum" hmi-flex:direction="column" hmi-flex:grow="1" hmi-flex:shrink="0">
            <g id="TIFID_ToolBarElements" hmi:if="{ HmiProps.Visible }" hmi-flex:direction="row" hmi-flex:grow="1" hmi-flex:shrink="0">
                <rect id="ToolBarBackgroundRect"
                    hmi-bind:width="{ ParamProps.Width }"
                    hmi-bind:height="{ ParamProps.Height }"
                    hmi-bind:fill="{ LocalProps.BackColor }"
                />

                <hmi:include template="include.style.flat.graphoverviewtoolbarelements.svghmi" hmi-bind:forEach="{ HmiProps.Elements }"
                    x="0"
                    y="0"
                    hmi-flex:padding="5"
                    hmi-flex:alignItems="{{ gt(Layout.ActualWidth, ParamProps.Width) ? 'start' : 'center' }}"
                    hmi-flex:direction="row"
                    hmi-flex:wrap="false">
                    <hmi:param name="Font"                  type="HmiFontPart"  hmi-bind:value="{ HmiProps.Font }"           />
                    <hmi:param name="ControlBarOperable"    type="boolean"      hmi-bind:value="{ LocalProps.ControlBarOperable }" />
                    <hmi:param name="FocusColor"            type="string"       hmi-bind:value="{ ParamProps.FocusColor }" />
                    <hmi:param name="ShowFocusVisual"       type="boolean"      hmi-bind:value="{ ParamProps.ShowFocusVisual }" />
                </hmi:include>
            </g>
           
        </g>
    </g>
</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:hmi="http://svg.siemens.com/hmi/"
    xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
    xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
    xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
    xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
    xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
    xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/"
	
    hmi-flex:shrink="0"
    hmi-flex:grow="{{ ( HmiProps.Type == HmiScreenObjectType.ControlBarTextBoxPart ) ? 1 : 0 }}"
    hmi-flex:width="{{ HmiProps.Visible ? HmiProps.Width : 0 }}"
    hmi-flex:height="{{ HmiProps.Visible ? HmiProps.Height : 0 }}"
    hmi-flex:marginTop="{{ HmiProps.Visible ? (HmiProps.Margin.Top / 2) : 0 }}"
    hmi-flex:marginLeft="2"
    hmi-flex:marginBottom="{{ HmiProps.Visible ? (HmiProps.Margin.Bottom / 2) : 0 }}"
    hmi-flex:marginRight="2"
    preserveAspectRatio="none"
    
    overflow="visible">

<hmi:self type="part:HmiControlBarElementPartBase" displayName="Extended ControlBarElement" name="extended.controlbarelement.part" version="1.0.1" performanceClass="L">

        <hmi:paramDef name="Font"                 type="HmiFontPart" />
        <hmi:paramDef name="ControlBarOperable"   type="boolean" />
        <hmi:paramDef name="FocusColor"           type="string" />
        <hmi:paramDef name="ShowFocusVisual"      type="boolean" />

    </hmi:self>

    <g id="IncludeControlBarElementContainer" hmi:if="{ HmiProps.Visible }">
        <g hmi:if="{{ HmiProps.Type == HmiScreenObjectType.ControlBarButtonPart }}" id="IncludeControlBarElementButton" >
            <hmi:include template="include.style.flat.controlbarbutton.default.svghmi" hmi-bind:for="{ HmiProps }"
                hmi-bind:width="{ Layout.ActualWidth }"
                hmi-bind:height="{ Layout.ActualHeight }">
                <hmi:param name="Font" 					type="HmiFontPart" 	hmi-bind:value="{ ParamProps.Font }" 				/>
                <hmi:param name="ControlBarOperable" 	type="boolean" 		hmi-bind:value="{ ParamProps.ControlBarOperable }" 	/>
                <hmi:param name="FocusColor" 			type="string" 	 	hmi-bind:value="{ ParamProps.FocusColor }" 			/>
                <hmi:param name="ShowFocusVisual"		type="boolean" 	 	hmi-bind:value="{ ParamProps.ShowFocusVisual }"		/>
            </hmi:include>
        </g>

        <g hmi:if="{{ HmiProps.Type == HmiScreenObjectType.ControlBarDisplayPart }}" id="IncludeControlBarElementDisplay" >
            <hmi:include template="include.style.flat.controlbardisplay.default.svghmi" hmi-bind:for="{ HmiProps }"
                hmi-bind:width="{ Layout.ActualWidth }"
                hmi-bind:height="{ Layout.ActualHeight }">
                <hmi:param name="Font" 					type="HmiFontPart" 	hmi-bind:value="{ ParamProps.Font }" 				/>
                <hmi:param name="ControlBarOperable" 	type="boolean"      hmi-bind:value="{ ParamProps.ControlBarOperable }" 	/>
                <hmi:param name="ShowFocusVisual"		type="boolean" 	 	hmi-bind:value="{ ParamProps.ShowFocusVisual }"		/>
            </hmi:include>
        </g>

        <g hmi:if="{{ HmiProps.Type == HmiScreenObjectType.ControlBarLabelPart }}" id="IncludeControlBarElementLabel" >
            <hmi:include template="include.style.flat.controlbarlabel.default.svghmi" hmi-bind:for="{ HmiProps }"
                hmi-bind:width="{ Layout.ActualWidth }"
                hmi-bind:height="{ Layout.ActualHeight }">
                <hmi:param name="Font" 					type="HmiFontPart" 	hmi-bind:value="{ ParamProps.Font }" 				/>
                <hmi:param name="ControlBarOperable" 	type="boolean"      hmi-bind:value="{ ParamProps.ControlBarOperable }" 	/>
                <hmi:param name="FocusColor" 			type="string" 	 	hmi-bind:value="{ ParamProps.FocusColor }" 			/>
                <hmi:param name="ShowFocusVisual"		type="boolean" 	 	hmi-bind:value="{ ParamProps.ShowFocusVisual }"		/>
            </hmi:include>
        </g>

        <g hmi:if="{{ HmiProps.Type == HmiScreenObjectType.ControlBarSeparatorPart }}" id="IncludeControlBarElementSeparator" >
            <hmi:include template="include.style.flat.controlbarseparator.default.svghmi" hmi-bind:for="{ HmiProps }"
                hmi-bind:width="{ Layout.ActualWidth }"
                hmi-bind:height="{ Layout.ActualHeight }">
            </hmi:include>
        </g>

        <g hmi:if="{{ HmiProps.Type == HmiScreenObjectType.ControlBarTextBoxPart }}" id="IncludeControlBarElementTextBox" >
            <hmi:include template="include.style.flat.controlbartextbox.default.svghmi" hmi-bind:for="{ HmiProps }"
                hmi-bind:width="{ Layout.ActualWidth }"
                hmi-bind:height="{ Layout.ActualHeight }">
                <hmi:param name="Font" 					type="HmiFontPart" 	hmi-bind:value="{ ParamProps.Font }" 				/>
                <hmi:param name="ControlBarOperable" 	type="boolean"      hmi-bind:value="{ ParamProps.ControlBarOperable }" 	/>
                <hmi:param name="FocusColor" 			type="string" 	 	hmi-bind:value="{ ParamProps.FocusColor }" 			/>
                <hmi:param name="ShowFocusVisual"		type="boolean" 	 	hmi-bind:value="{ ParamProps.ShowFocusVisual }"		/>
            </hmi:include>
        </g>

        <g hmi:if="{{ HmiProps.Type == HmiScreenObjectType.ControlBarToggleSwitchPart }}" id="IncludeControlBarElementToggleSwitch">
            <hmi:include template="include.style.flat.controlbartoggleswitch.default.svghmi" hmi-bind:for="{ HmiProps }"
                hmi-bind:width="{ Layout.ActualWidth }"
                hmi-bind:height="{ Layout.ActualHeight }">
                <hmi:param name="Font" 					type="HmiFontPart"  hmi-bind:value="{ ParamProps.Font }"                />
                <hmi:param name="ControlBarOperable" 	type="boolean"      hmi-bind:value="{ ParamProps.ControlBarOperable }"  />
                <hmi:param name="FocusColor"            type="string"       hmi-bind:value="{ ParamProps.FocusColor }"          />
                <hmi:param name="ShowFocusVisual"		type="boolean" 	 	hmi-bind:value="{ ParamProps.ShowFocusVisual }"		/>
            </hmi:include>
        </g>
    </g>
</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-data-bind="http://svg.siemens.com/hmi/data/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"

     preserveAspectRatio="none">

    <hmi:self type="system:HmiHeaderCellSystemPart" displayName="Flat HeaderCell" name="style.flat.headercell" version="2.9" performanceClass="s">
        <hmi:data type="header-view"></hmi:data>
    </hmi:self>

    <g id="RowHeaderGroup" opacity="1">
        <rect id="RowHeaderRect"
              hmi-bind:x="{ HmiProps.Left }"
              hmi-bind:y="{ HmiProps.Top }"
              hmi-bind:width="{ HmiProps.Width }"
              hmi-bind:height="{ HmiProps.Height }"
              hmi-data-bind:fill="{ Colors.Back }"
              stroke-width="1"
              hmi-bind:FontSize="{{HmiProps.Font.Size}}" />
        <hmi:include template="include.text.svghmi"
                     hmi-bind:x="{ HmiProps.Left }"
                     hmi-bind:y="{ HmiProps.Top }"
                     hmi-bind:width="{ HmiProps.Width }"
                     hmi-bind:height="{ HmiProps.Height }">
            <hmi:param name="Text" type="string" hmi-data-bind:value="{ Content.Index }" />
            <hmi:param name="Font" type="HmiFontPart" hmi-bind:value="{ HmiProps.Font }" />
            <hmi:param name="TextColor" type="HmiColor" hmi-data-bind:value="{ Colors.Fore }" />
            <hmi:param name="HorizontalTextAlignment" hmi-bind:value="{ HmiProps.Content.HorizontalTextAlignment }" />
            <hmi:param name="VerticalTextAlignment" value="1" />

        </hmi:include>
    </g>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg14-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2020. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
            xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
               xmlns:hmi="http://svg.siemens.com/hmi/"
               xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
               xmlns:hmi-data-bind="http://svg.siemens.com/hmi/data/bind/"
               xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
               xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
               xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
               height="10" width="10">
  <hmi:self type="system:HmiDataCellSystemPart" displayName="DataCell" name="datacell" version="1.0.0" performanceClass="s">
    <hmi:data type="cell-view"></hmi:data>
    <hmi:paramDef name="Padding"      type="HmiPaddingPart" />
    <hmi:paramDef name="RowBackColor" type="HmiColor"       />
    <hmi:paramDef name="RowForeColor" type="HmiColor"       />
  </hmi:self>
  <defs>
    <hmi:localDef name="Text"                    type="string"                   hmi-data-bind:value="{ Content.Data }" />
    <hmi:localDef name="TextColor"               type="HmiColor"                 hmi-data-bind:value="{ Colors.Fore }" />
    <hmi:localDef name="BackColor"               type="HmiColor"                 hmi-data-bind:value="{ Colors.Back }" />
    <hmi:localDef name="HorizontalTextAlignment" type="HmiHorizontalAlignment"   hmi-bind:value="{ HmiProps.Content.HorizontalTextAlignment }" />
    <hmi:localDef name="VerticalTextAlignment"   type="HmiVerticalAlignment"     hmi-bind:value="{ HmiProps.Content.VerticalTextAlignment }" />
    <hmi:localDef name="InteriorWidth"           type="number"                   hmi-bind:value="{{ HmiProps.Width - ParamProps.Padding.Right - ParamProps.Padding.Left }}" />
    <hmi:localDef name="InteriorHeight"          type="number"                   hmi-bind:value="{{ HmiProps.Height - ParamProps.Padding.Bottom }}" />
    <hmi:localDef name="RowID"                   type="number"                   hmi-data-bind:value="{ Content.RowID }" />
    <hmi:localDef name="CurrentDepth"            type="number"                   hmi-data-bind:value="{ Content.CurrentDepth }" />
    <hmi:localDef name="IsExpanded"              type="boolean"                  hmi-data-bind:value="{ Content.IsExpanded }" />
    <hmi:localDef name="IsExpandable"            type="boolean"                  hmi-data-bind:value="{ Content.IsExpandable }" />
    <hmi:localDef name="IsEditing"               type="boolean"                  hmi-data-bind:value="{ Content.IsEditing }" />
    <hmi:localDef name="OutputFormat"            type="string"                   hmi-data-bind:value="{ Content.OutputFormat }" />
    <hmi:localDef name="IsCurrentDepthValid"     type="boolean"                  hmi-bind:value="{{ gt( LocalProps.CurrentDepth, -1 ) }}" />
    <hmi:localDef name="HasTextandExpandable"    type="boolean"                  hmi-bind:value="{{ and(LocalProps.Text, LocalProps.IsExpandable) }}" />

    <hmi:localDef name="TextHeightFontSize"      type="number"                   hmi-bind:value="{ HmiProps.Font.Size }" />

    <!-- x, y and baseline position of the text-->
    <hmi:localDef name="TextAnchorX"             type="string"                   hmi-bind:value="{{ LocalProps.HorizontalTextAlignment == HmiHorizontalAlignment.Center ? 'middle' : LocalProps.HorizontalTextAlignment == HmiHorizontalAlignment.Left ? 'start' : 'end' }}" />
    <hmi:localDef name="TextAnchorY"             type="string"                   hmi-bind:value="{{ LocalProps.VerticalTextAlignment == HmiVerticalAlignment.Center ? 'middle' : LocalProps.VerticalTextAlignment == HmiVerticalAlignment.Top ? 'start' : 'end' }}" />
    <hmi:localDef name="AdjustedWidth"           type="number"                   hmi-bind:value="{{ and( LocalProps.IsCurrentDepthValid, LocalProps.Text ) ? 20 * LocalProps.CurrentDepth : 0 }}"/>
    <hmi:localDef name="AdjustedHeight"          type="number"                   hmi-bind:value="{{ floor( (LocalProps.TextAnchorY == 'start' ? ( LocalProps.TextHeightFontSize + ParamProps.Padding.Top )
                                                                                     : LocalProps.TextAnchorY == 'middle' ? ( ( LocalProps.InteriorHeight + LocalProps.TextHeightFontSize * 0.65 ) / 2 )
                                                                                     : ( LocalProps.InteriorHeight  - LocalProps.TextHeightFontSize * 0.20 - 2     )  ) ) }}"/>
    <hmi:localDef name="OffsetExpanseIcon"       type="number"                   hmi-bind:value="{{ and( LocalProps.IsCurrentDepthValid, LocalProps.IsExpandable ) ? 20 : 0}}"/>
    <hmi:localDef name="Graphic"                 type="string"                   hmi-data-bind:value="{ Content.Graphic.Url }"       />
    <hmi:localDef name="GraphicWidth"            type="number"                   hmi-bind:value="{{ (HmiProps.Font.Size * 2) }}"     />
    <hmi:localDef name="GraphicHeight"           type="number"                   hmi-bind:value="{{ (HmiProps.Font.Size * 2) }}"     />
    <hmi:localDef name="HasGraphic"              type="boolean"                  hmi-bind:value="{{ LocalProps.Graphic != '' ? true: false }}"     />
    <hmi:localDef name="AdjustedGraphicWidth"    type="number"                   hmi-bind:value="{{ LocalProps.AdjustedWidth + LocalProps.OffsetExpanseIcon + floor( ( LocalProps.TextAnchorX == 'start' ? (ParamProps.Padding.Left + ParamProps.Padding.Left - 19) : LocalProps.TextAnchorX == 'middle' ? ( HmiProps.Width - (ParamProps.Padding.Left * 2) ) :  LocalProps.InteriorWidth ) ) }}"/>
    <hmi:localDef name="OffsetGraphicHeight"     type="number"                   hmi-bind:value="{{ abs(0.6 * HmiProps.Height)  }}"/>

    <!-- Action definitions of this template -->
    <hmi:action id="onMouseDown" hmi-bind:condition="{ LocalProps.HasTextandExpandable }">
      <hmi:sendCommand hmi-bind:value="{{'RowID:' + LocalProps.RowID+ ',IsExpanded:' + not(LocalProps.IsExpanded)}}"
                       name="EXPAND_COLLAPSE">
      </hmi:sendCommand>
      <hmi:setCursor name="auto" value="element"></hmi:setCursor>
      <hmi:setCursor name="pointer" value="element"></hmi:setCursor>
    </hmi:action>
    <hmi:action id="pointer">
      <hmi:setCursor name="auto" value="element"></hmi:setCursor>
      <hmi:setCursor name="pointer" value="element"></hmi:setCursor>
    </hmi:action>
    <hmi:action id="default">
      <hmi:setCursor name="auto" value="element"></hmi:setCursor>
    </hmi:action>
  </defs>

  <g  opacity="1">
    <rect id="TIFID_ItemBGRect2"
          hmi-bind:width="{ HmiProps.Width }"
          hmi-bind:height="{ HmiProps.Height }"
          hmi-bind:fill="{{ LocalProps.IsEditing ? 'rgba(255,255,255,1)' : Converter.RGBA( LocalProps.BackColor ) }}"/>

<g id="Picture" hmi:if="{{ LocalProps.HasGraphic }}">
      <svg hmi-bind:y="{{ (LocalProps.AdjustedHeight + ParamProps.Padding.Top + ParamProps.Padding.Bottom ) - LocalProps.OffsetGraphicHeight }}"
         hmi-bind:x="{{ LocalProps.AdjustedGraphicWidth }}"
             hmi-bind:width="{ LocalProps.GraphicWidth }"
             hmi-bind:height="{ LocalProps.GraphicHeight }">

        <image hmi-bind--xlink:href="{ LocalProps.Graphic }"
						 hmi-bind:width="{ LocalProps.GraphicWidth }"
						 hmi-bind:height="{ LocalProps.GraphicHeight }" />
      </svg>
    </g>

    <g id="TextGroup">
      <svg id ="TIFID_onExpandCollapse"
           hmi:if="{ LocalProps.HasTextandExpandable }"
           hmi-bind:x="{{ ParamProps.Padding.Left + LocalProps.AdjustedWidth }}"
           hmi-bind:y="{{ LocalProps.AdjustedHeight - 9 }}"
           hmi-event:tapped="url(#onMouseDown)"
           hmi-event:mouseEnter="url(#pointer)"
           hmi-event:mouseHover="url(#pointer)"
           hmi-event:mouseLeave="url(#default)">
        <path d="M 0 12 L 10 6 L 0 0 z"
              hmi-bind:fill="{{ Converter.RGBA( LocalProps.TextColor ) }}"
              hmi-bind:transform="rotate( {{ LocalProps.IsExpanded ? 90 : 0}}, 6, 6)">
        </path>
      </svg>
      <hmi-element:textField hmi-bind:start-x="{{ LocalProps.AdjustedWidth + LocalProps.OffsetExpanseIcon + floor( ( LocalProps.TextAnchorX == 'start' ? ParamProps.Padding.Left : LocalProps.TextAnchorX == 'middle' ? ( LocalProps.InteriorWidth / 2 ) :  LocalProps.InteriorWidth ) ) }}"
                        hmi-bind:start-y="{ ParamProps.Padding.Top }"
                        hmi-bind:fore-color="{{ LocalProps.IsEditing ? 'rgba(0,0,0,1)' : Converter.RGBA( LocalProps.TextColor ) }}"
                        hmi-bind:width="{ HmiProps.Width }"
                        hmi-bind:height="{  HmiProps.Height }"
                        hmi-bind:vertical-text-alignment="{  HmiProps.Content.VerticalTextAlignment }"
                        hmi-bind:horizontal-text-alignment="{ HmiProps.Content.HorizontalTextAlignment }"
                        hmi-bind:value="{ LocalProps.Text }"
                        hmi-bind:output-format="{ LocalProps.OutputFormat }"
                        padding="0"
                        hmi-bind:read-only="{{ LocalProps.IsEditing ? false : true }}"
                        hmi-bind:enabled="{ HmiProps.Enabled }"
                        target="LocalProps.Text"
                        hmi-bind:horizontal-scrollbar-visibility="{{ HmiScrollBarVisibility.Collapsed }}"
                        hmi-bind:vertical-scrollbar-visibility="{{ HmiScrollBarVisibility.Collapsed }}">
        <hmi-feature:font hmi-bind:size="{ HmiProps.Font.Size }"
                          hmi-bind:italic="{ HmiProps.Font.Italic }"
                          hmi-bind:weight="{ HmiProps.Font.Weight }"
                          hmi-bind:strike-out="{ HmiProps.Font.StrikeOut }"
                          hmi-bind:underline="{ HmiProps.Font.Underline }"
                          hmi-bind:name="{ HmiProps.Font.Name }" />

      </hmi-element:textField>


    </g>
  </g>
</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     overflow="visible">

    <hmi:self type="custom" displayName="Flat HmiWindow Frame" name="style.flat.hmiwindowframe" version="2.9" performanceClass="L">

        <hmi:paramDef name="Top"                type="number"        two-way="true"  />
        <hmi:paramDef name="Left"               type="number"        two-way="true"  />
        <hmi:paramDef name="Width"              type="number"        two-way="true"  />
        <hmi:paramDef name="Height"             type="number"        two-way="true"  />
        <hmi:paramDef name="WindowFlags"        type="HmiWindowFlag"                 />
        <hmi:paramDef name="MinimumWidth"       type="number"                        />
        <hmi:paramDef name="MinimumHeight"      type="number"                        />
        <hmi:paramDef name="Icon"               type="HmiGraphic"                    />
        <hmi:paramDef name="Caption"            type="HmiTextPart"                   />
        <hmi:paramDef name="CaptionColor"       type="HmiColor"                      />
        <hmi:paramDef name="ShowCaption"        type="boolean"                       />
        <hmi:paramDef name="CaptionHeight"      type="number"                        />
        <hmi:paramDef name="WindowBorderWidth"  type="number"                        />
        <hmi:paramDef name="WindowBorderColor"  type="HmiColor"                      />
        <hmi:paramDef name="ItemOperable"       type="boolean"                       />
        <hmi:paramDef name="WindowState"        type="number"         two-way="true" />

    </hmi:self>

    <defs>
        <!-- Local definitions of this template -->
        <hmi:localDef name="HoverMax"                   type="number"   value="0" />
        <hmi:localDef name="PressedMax"                 type="number"   value="0" />

        <hmi:localDef name="HoverClose"                 type="number"   value="0" />
        <hmi:localDef name="PressedClose"               type="number"   value="0" />

        <hmi:localDef name="SYS_CaptionOffsetLeft"      type="number"   value="10" />
        <hmi:localDef name="SYS_CaptionOffsetRight"     type="number"   value="10" />
        <hmi:localDef name="SYS_CaptionIconSize"        type="number"   value="21" />
        <hmi:localDef name="SYS_CaptionButtonSize"      type="number"   value="20" />
        <hmi:localDef name="SYS_CaptionButtonPadding"   type="number"   value="15" />
        <hmi:localDef name="SYS_CaptionTextOffset"      type="number"   value="10" />
        <hmi:localDef name="SYS_HandleWidth"            type="number"   value="10" />

        <hmi:localDef name="CaptionButtonsXPosition"    type="number"   hmi-bind:value="{{  ParamProps.Width - LocalProps.SYS_CaptionOffsetRight - LocalProps.SYS_CaptionButtonSize }}" />
        <hmi:localDef name="CaptionTextXPosition"       type="number"   hmi-bind:value="{{ ( ParamProps.Icon != '' ) ? LocalProps.SYS_CaptionOffsetLeft + LocalProps.SYS_CaptionIconSize + LocalProps.SYS_CaptionTextOffset  : LocalProps.SYS_CaptionOffsetLeft }}" />
        <hmi:localDef name="CaptionTextWidth"           type="number"   hmi-bind:value="{{ ParamProps.Width - LocalProps.CaptionTextXPosition - ( ParamProps.Width - LocalProps.CaptionButtonsXPosition ) - LocalProps.SYS_CaptionOffsetLeft - 2 * LocalProps.SYS_CaptionTextOffset }}" />
        <hmi:localDef name="CaptionDisplayText"         type="string"   hmi-bind:value="{{ Converter.TextEllipsis( ParamProps.Caption.Text, LocalProps.CaptionTextWidth, ParamProps.Caption.Font ) }}" />
        <hmi:localDef name="CaptionForeColor"           type="string"   hmi-bind:value="{{ Converter.RGBA( ParamProps.Caption.ForeColor ) }}" />

        <hmi:localDef name="HandleWidthHalf"            type="number"   hmi-bind:value="{{ LocalProps.SYS_HandleWidth / 2 }}" />
        <hmi:localDef name="CornerX"                    type="number"   hmi-bind:value="{{ ParamProps.Width + LocalProps.HandleWidthHalf }}" />
        <hmi:localDef name="CornerY"                    type="number"   hmi-bind:value="{{ ParamProps.Height + LocalProps.HandleWidthHalf }}" />
        <hmi:localDef name="StrokeWidth"                type="number"   hmi-bind:value="{{ LocalProps.SYS_HandleWidth + 2 }}" />

        <!-- Local actions of this template -->
        <hmi:action id="onMouseHoverMax" hmi-bind:condition="{ ParamProps.ItemOperable }" event-propagation="false">
            <hmi:setProperty name="LocalProps.HoverMax" type="number" value="1" />
        </hmi:action>

        <hmi:action id="onMouseDownMax" hmi-bind:condition="{ ParamProps.ItemOperable }" event-propagation="false" >
            <hmi:setProperty name="LocalProps.PressedMax" type="number" value="1" />
        </hmi:action>

        <hmi:action id="onMouseUpMax" hmi-bind:condition="{{ and( ParamProps.ItemOperable, LocalProps.PressedMax == 1 ) }}" event-propagation="false" >
            <hmi:setProperty name="LocalProps.PressedMax" type="number" value="0" />
            <hmi:sendCommand name="MAXIMIZE" type="boolean" value="true" hmi-bind:condition="{{ ( ParamProps.WindowState == HmiWindowState.Normal ) }}" />
            <hmi:sendCommand name="RESTORE" type="boolean" value="true" hmi-bind:condition="{{ ( ParamProps.WindowState == HmiWindowState.Maximized ) }}" />
            <hmi:setProperty name="ParamProps.WindowState" type="number" hmi-bind:value="{{ ParamProps.WindowState ? HmiWindowState.Normal : 1 }}" />
        </hmi:action>

        <hmi:action id="onMouseLeaveMax" hmi-bind:condition="{ ParamProps.ItemOperable }" event-propagation="false">
            <hmi:setProperty name="LocalProps.HoverMax" type="number" value="0" />
        </hmi:action>

        <hmi:action id="onMouseHoverClose" hmi-bind:condition="{ ParamProps.ItemOperable }" event-propagation="false">
            <hmi:setProperty name="LocalProps.HoverClose" type="number" value="1" />
        </hmi:action>

        <hmi:action id="onMouseDownClose" hmi-bind:condition="{ ParamProps.ItemOperable }" event-propagation="false">
            <hmi:setProperty name="LocalProps.PressedClose" type="number" value="1" />
        </hmi:action>

        <hmi:action id="onMouseUpClose" hmi-bind:condition="{{ and( ParamProps.ItemOperable, LocalProps.PressedClose == 1 ) }}" event-propagation="false" >
            <hmi:setProperty name="LocalProps.PressedClose" type="number" value="0" />
            <hmi:sendCommand name="CLOSE" type="boolean" value="true" />
        </hmi:action>

        <hmi:action id="onMouseLeaveClose" hmi-bind:condition="{ ParamProps.ItemOperable }" event-propagation="false" >
            <hmi:setProperty name="LocalProps.HoverClose" type="number" value="0" />
        </hmi:action>

        <hmi:action id="onMove" hmi-bind:condition="{{ and( ParamProps.ItemOperable, has( ParamProps.WindowFlags, HmiWindowFlag.CanMove ) ) }}">
            <hmi:setProperty name="ParamProps.Top"      type="number" hmi-bind:value="{{ ParamProps.Top  + EventArgs.PanDeltaY }}" />
            <hmi:setProperty name="ParamProps.Left"     type="number" hmi-bind:value="{{ ParamProps.Left + EventArgs.PanDeltaX }}" />
            <hmi:sendCommand name="MOVED"               type="boolean" value="true" />
        </hmi:action>

        <hmi:action id="onSlideTopLeft">
            <hmi:setProperty name="ParamProps.Top"      type="number" hmi-bind:value="{{ ge( ParamProps.Height - EventArgs.PanDeltaY, ParamProps.MinimumHeight ) ? ParamProps.Top  + EventArgs.PanDeltaY : ParamProps.Top }}" />
            <hmi:setProperty name="ParamProps.Left"     type="number" hmi-bind:value="{{ ge( ParamProps.Width - EventArgs.PanDeltaX, ParamProps.MinimumWidth ) ? ParamProps.Left + EventArgs.PanDeltaX : ParamProps.Left }}" />
            <hmi:setProperty name="ParamProps.Width"    type="number" hmi-bind:value="{{ ge( ParamProps.Width - EventArgs.PanDeltaX, ParamProps.MinimumWidth ) ? ParamProps.Width - EventArgs.PanDeltaX : ParamProps.Width }}" />
            <hmi:setProperty name="ParamProps.Height"   type="number" hmi-bind:value="{{ ge( ParamProps.Height - EventArgs.PanDeltaY, ParamProps.MinimumHeight ) ? ParamProps.Height - EventArgs.PanDeltaY : ParamProps.Height }}" />
        </hmi:action>

        <hmi:action id="onSlideTop">
            <hmi:setProperty name="ParamProps.Top"      type="number" hmi-bind:value="{{ ge( ParamProps.Height - EventArgs.PanDeltaY, ParamProps.MinimumHeight ) ? ParamProps.Top + EventArgs.PanDeltaY : ParamProps.Top }}" />
            <hmi:setProperty name="ParamProps.Height"   type="number" hmi-bind:value="{{ ge( ParamProps.Height - EventArgs.PanDeltaY, ParamProps.MinimumHeight ) ? ParamProps.Height - EventArgs.PanDeltaY : ParamProps.Height }}" />
        </hmi:action>

        <hmi:action id="onSlideTopRight">
            <hmi:setProperty name="ParamProps.Top"      type="number" hmi-bind:value="{{ ge( ParamProps.Height - EventArgs.PanDeltaY, ParamProps.MinimumHeight ) ? ParamProps.Top + EventArgs.PanDeltaY : ParamProps.Top }}" />
            <hmi:setProperty name="ParamProps.Width"    type="number" hmi-bind:value="{{ ge( ParamProps.Width + EventArgs.PanDeltaX,  ParamProps.MinimumWidth ) ? ParamProps.Width + EventArgs.PanDeltaX : ParamProps.Width }}" />
            <hmi:setProperty name="ParamProps.Height"   type="number" hmi-bind:value="{{ ge( ParamProps.Height - EventArgs.PanDeltaY, ParamProps.MinimumHeight ) ? ParamProps.Height - EventArgs.PanDeltaY : ParamProps.Height }}" />
        </hmi:action>

        <hmi:action id="onSlideRight">
            <hmi:setProperty name="ParamProps.Width"    type="number" hmi-bind:value="{{ ge( ParamProps.Width + EventArgs.PanDeltaX, ParamProps.MinimumWidth ) ? ParamProps.Width + EventArgs.PanDeltaX : ParamProps.Width }}" />
        </hmi:action>

        <hmi:action id="onSlideBottomRight">
            <hmi:setProperty name="ParamProps.Width"    type="number" hmi-bind:value="{{ ge( ParamProps.Width  + EventArgs.PanDeltaX, ParamProps.MinimumWidth ) ? ParamProps.Width + EventArgs.PanDeltaX : ParamProps.Width }}" />
            <hmi:setProperty name="ParamProps.Height"   type="number" hmi-bind:value="{{ ge( ParamProps.Height + EventArgs.PanDeltaY, ParamProps.MinimumHeight ) ? ParamProps.Height + EventArgs.PanDeltaY : ParamProps.Height }}" />
        </hmi:action>

        <hmi:action id="onSlideBottom">
            <hmi:setProperty name="ParamProps.Height"   type="number" hmi-bind:value="{{ ge( ParamProps.Height + EventArgs.PanDeltaY, ParamProps.MinimumHeight ) ? ParamProps.Height + EventArgs.PanDeltaY : ParamProps.Height }}" />
        </hmi:action>

        <hmi:action id="onSlideBottomLeft">
            <hmi:setProperty name="ParamProps.Left"     type="number" hmi-bind:value="{{ ge( ParamProps.Width - EventArgs.PanDeltaX, ParamProps.MinimumWidth ) ? ParamProps.Left + EventArgs.PanDeltaX : ParamProps.Left }}" />
            <hmi:setProperty name="ParamProps.Width"    type="number" hmi-bind:value="{{ ge( ParamProps.Width - EventArgs.PanDeltaX, ParamProps.MinimumWidth ) ? ParamProps.Width - EventArgs.PanDeltaX : ParamProps.Width }}" />
            <hmi:setProperty name="ParamProps.Height"   type="number" hmi-bind:value="{{ ge( ParamProps.Height + EventArgs.PanDeltaY, ParamProps.MinimumHeight ) ? ParamProps.Height + EventArgs.PanDeltaY : ParamProps.Height }}" />
        </hmi:action>

        <hmi:action id="onSlideLeft">
            <hmi:setProperty name="ParamProps.Left"     type="number" hmi-bind:value="{{ ge( ParamProps.Width - EventArgs.PanDeltaX, ParamProps.MinimumWidth ) ? ParamProps.Left + EventArgs.PanDeltaX : ParamProps.Left }}" />
            <hmi:setProperty name="ParamProps.Width"    type="number" hmi-bind:value="{{ ge( ParamProps.Width - EventArgs.PanDeltaX, ParamProps.MinimumWidth ) ? ParamProps.Width - EventArgs.PanDeltaX : ParamProps.Width }}" />
        </hmi:action>

        <hmi:action id="onStartResize">
            <hmi:sendCommand name="RESIZE_TRIGGERED" type="boolean" value="true" />
        </hmi:action>
        <hmi:action id="onStopResize">
            <hmi:sendCommand name="RESIZE_TRIGGERED" type="boolean" value="false" />
        </hmi:action>

        <hmi:action id="onSetCursorMove" hmi-bind:condition="{{ and( ParamProps.ItemOperable, has( ParamProps.WindowFlags, HmiWindowFlag.CanMove ) ) }}">
            <hmi:setCursor name="move" value="screen" />
            <hmi:sendCommand name="MOVE_TRIGGERED" type="boolean" value="true" />
        </hmi:action>
        <hmi:action id="onCursorResumeMove" hmi-bind:condition="{ ParamProps.ItemOperable }">
            <hmi:setCursor name="auto" value="screen" />
            <hmi:sendCommand name="MOVE_TRIGGERED" type="boolean" value="false" />
        </hmi:action>

        <hmi:action id="onSetCursorResizeNESW">
            <hmi:setCursor name="nesw-resize" value="screen" />
        </hmi:action>

        <hmi:action id="onSetCursorResizeNWSE">
            <hmi:setCursor name="nwse-resize" value="screen" />
        </hmi:action>

        <hmi:action id="onSetCursorResizeNS">
            <hmi:setCursor name="ns-resize" value="screen" />
        </hmi:action>

        <hmi:action id="onSetCursorResizeEW">
            <hmi:setCursor name="ew-resize" value="screen" />
        </hmi:action>

        <hmi:action id="onCursorResumeLeave" hmi-bind:condition="{{ or( EventArgs.Trigger != HmiEventTrigger.Left, EventArgs.Trigger==HmiEventTrigger.Touch ) }}">
            <hmi:setCursor name="auto" value="screen" />
        </hmi:action>

        <clipPath id="ItemClipRect">
            <rect id="ItemRect"
                  hmi-bind:width="{{ ParamProps.Width }}"
                  hmi-bind:height="{{ ParamProps.Height }}"
                  stroke="none" />
        </clipPath>

    </defs>

    <g id="WindowFrame" >

        <g clip-path="url(#ItemClipRect)" >
            <!-- Caption -->
            <g id="TIFID_Caption" hmi:if="{{ ParamProps.ShowCaption }}"
                hmi-bind:transform="translate( {{ParamProps.WindowBorderWidth }}, {{ ParamProps.WindowBorderWidth }} )"
                hmi-event:pan="url(#onMove)" hmi-event:down="url(#onSetCursorMove)" hmi-event:up="url(#onCursorResumeMove)">

              <rect id="CaptionBackground"
                    hmi-bind:width="{{ ParamProps.Width - 2 * ParamProps.WindowBorderWidth }}"
                    hmi-bind:height="{{ ParamProps.CaptionHeight }}"
                    hmi-bind:fill="{{ Converter.RGBA( ParamProps.CaptionColor ) }}"
                    hmi-bind:stroke="{{ Converter.RGBA( ParamProps.CaptionColor ) }}"
                    stroke-width="1" />

                <g id="CaptionContent">
                    <image id="CaptionIcon" hmi:if="{{ ParamProps.Icon != '' }}" hmi-bind--xlink:href="{{ ParamProps.Icon }}"
                           x="5" y="4" width="21" height="21" />
                    <text id="CaptionText" hmi:if="{ ParamProps.Caption.Visible }"
                          hmi-bind:x="{ LocalProps.CaptionTextXPosition }"
                          hmi-bind:y="{{ ( ParamProps.CaptionHeight - ParamProps.Caption.Font.Size ) / 2 + ParamProps.Caption.Font.Size - 2 }}"
                          hmi-bind:fill="{ LocalProps.CaptionForeColor }"
                          hmi-bind:font-size="{{ ParamProps.Caption.Font.Size }}"
                          hmi-bind:font-style="{{ ParamProps.Caption.Font.Italic ? 'italic' : 'normal' }}"
                          hmi-bind:font-weight="{{ ParamProps.Caption.Font.Weight }}"
                          hmi-bind:font-family="{{ ParamProps.Caption.Font.Name }}"
                          hmi-bind:text-decoration="{{ Converter.TextDecoration( ParamProps.Caption.Font ) }}"><hmi:text hmi-bind:value="{ LocalProps.CaptionDisplayText }" /></text>

                    <g id="CaptionButtons" hmi-bind:transform="translate( { LocalProps.CaptionButtonsXPosition }, 0 )">

                        <g hmi:if="{{ has( ParamProps.WindowFlags, HmiWindowFlag.CanClose ) }}" id="TIFID_CaptionCloseButton" hmi:focusArea="box"
                           hmi-event:mouseHover="url(#onMouseHoverClose)" hmi-event:down="url(#onMouseDownClose)" hmi-event:up="url(#onMouseUpClose)" hmi-event:mouseLeave="url(#onMouseLeaveClose)">

                            <rect id="BtClose"
                                  x="-5"
                                  y="0"
                                  hmi-bind:width="{{ LocalProps.SYS_CaptionButtonSize + 10 }}"
                                  hmi-bind:height="{{ ParamProps.CaptionHeight }}"
                                  hmi-bind:opacity="{{ LocalProps.HoverClose ? 0.5 : 0 }}"
                                  fill="#C0C0C0"
                                  stroke="none" />

                            <path hmi-bind:d="M {{ LocalProps.SYS_CaptionButtonSize / 2 }} {{ ParamProps.CaptionHeight / 2 }}
                                        L {{ LocalProps.SYS_CaptionButtonSize / 2 - 10 }} {{ ParamProps.CaptionHeight / 2 - 10 }}
                                        M {{ LocalProps.SYS_CaptionButtonSize / 2 }} {{ ParamProps.CaptionHeight / 2 }}
                                        L {{ LocalProps.SYS_CaptionButtonSize / 2 + 10 }} {{ ParamProps.CaptionHeight / 2 + 10 }}
                                        M {{ LocalProps.SYS_CaptionButtonSize / 2 }} {{ ParamProps.CaptionHeight / 2 }}
                                        L {{ LocalProps.SYS_CaptionButtonSize / 2 - 10 }} {{ ParamProps.CaptionHeight / 2 + 10 }}
                                        M {{ LocalProps.SYS_CaptionButtonSize / 2 }} {{ ParamProps.CaptionHeight / 2 }}
                                        L {{ LocalProps.SYS_CaptionButtonSize / 2 + 10 }} {{ ParamProps.CaptionHeight / 2 - 10 }}"
                                  hmi-bind:stroke="{ LocalProps.CaptionForeColor }"
                                  stroke-width="3" />
                        </g>

                        <g hmi:if="{{ has( ParamProps.WindowFlags, HmiWindowFlag.CanMaximize ) }}" id="TIFID_CaptionMaxButton" hmi:focusArea="box"
                           hmi-bind:transform="translate( {{ has( ParamProps.WindowFlags, HmiWindowFlag.CanClose ) ? -( LocalProps.SYS_CaptionButtonSize + LocalProps.SYS_CaptionButtonPadding ) : 0 }}, 0 )"
                           hmi-event:mouseHover="url(#onMouseHoverMax)" hmi-event:down="url(#onMouseDownMax)" hmi-event:up="url(#onMouseUpMax)" hmi-event:mouseLeave="url(#onMouseLeaveMax)">

                            <rect id="BtMax"
                                  x="-5"
                                  y="0"
                                  hmi-bind:width="{{ LocalProps.SYS_CaptionButtonSize + 10 }}"
                                  hmi-bind:height="{{ ParamProps.CaptionHeight }}"
                                  hmi-bind:opacity="{{ LocalProps.HoverMax ? 0.5 : 0 }}"
                                  fill="#C0C0C0"
                                  stroke="none" />
                            <g hmi-bind:stroke="{ LocalProps.CaptionForeColor }" stroke-width="2" fill="none" >
                                <rect hmi:if="{{ ParamProps.WindowState == HmiWindowState.Normal }}"
                                    x="1" y="9" width="18" height="16" />

                                <line hmi:if="{{ ParamProps.WindowState == HmiWindowState.Normal }}"
                                    x1="0" y1="5" x2="20" y2="5" />

                                <rect hmi:if="{{ ParamProps.WindowState == HmiWindowState.Maximized }}"
                                    x="0" y="12" width="17" height="14" />

                                <rect hmi:if="{{ ParamProps.WindowState == HmiWindowState.Maximized }}"
                                    x="6" y="5" width="16" height="13" />
                            </g>
                        </g>
                    </g>
                </g>
            </g>
        </g>

        <!-- Window Border -->
        <g id="WindowBorder" hmi:if="{{ has( ParamProps.WindowFlags, HmiWindowFlag.ShowBorder ) }}">
          <rect fill="none"
              hmi-bind:stroke="{{ Converter.RGBA( ParamProps.WindowBorderColor ) }}"
              hmi-bind:width="{{ ParamProps.Width - ParamProps.WindowBorderWidth }}"
              hmi-bind:height="{{ ParamProps.Height - ParamProps.WindowBorderWidth }}"
              hmi-bind:x="{{ ParamProps.WindowBorderWidth / 2 }}"
              hmi-bind:y="{{ ParamProps.WindowBorderWidth / 2 }}"
              hmi-bind:stroke-width="{{ ParamProps.WindowBorderWidth }}" />

          <g id="SizeHandles" hmi:if="{{ and( ParamProps.ItemOperable, has( ParamProps.WindowFlags, HmiWindowFlag.CanSize ) ) }}">
            <line id="TopBorderLine" hmi-event:mouseEnter="url(#onSetCursorResizeNS)" hmi-event:mouseLeave="url(#onCursorResumeLeave)"
                hmi-event:pan="url(#onSlideTop)" hmi-event:down="url(#onStartResize)" hmi-event:up="url(#onStopResize)"
                x1="0"
                hmi-bind:x2="{ ParamProps.Width }"
                y1="0"
                y2="0"
                hmi-bind:stroke-width="{ LocalProps.SYS_HandleWidth }"
                stroke="rgba(0,0,0,0)" />

            <line id="RightBorderLine" hmi-event:mouseEnter="url(#onSetCursorResizeEW)" hmi-event:mouseLeave="url(#onCursorResumeLeave)"
                hmi-event:pan="url(#onSlideRight)" hmi-event:down="url(#onStartResize)" hmi-event:up="url(#onStopResize)"
                hmi-bind:x1="{ ParamProps.Width }"
                hmi-bind:x2="{ ParamProps.Width }"
                y1="0"
                hmi-bind:y2="{ ParamProps.Height }"
                hmi-bind:stroke-width="{ LocalProps.SYS_HandleWidth }"
                stroke="rgba(0,0,0,0)" />

            <line id="BottomBorderLine" hmi-event:mouseEnter="url(#onSetCursorResizeNS)" hmi-event:mouseLeave="url(#onCursorResumeLeave)"
                hmi-event:pan="url(#onSlideBottom)" hmi-event:down="url(#onStartResize)" hmi-event:up="url(#onStopResize)"
                x1="0"
                hmi-bind:x2="{ ParamProps.Width }"
                hmi-bind:y1="{ ParamProps.Height }"
                hmi-bind:y2="{ ParamProps.Height }"
                hmi-bind:stroke-width="{ LocalProps.SYS_HandleWidth }"
                stroke="rgba(0,0,0,0)" />

            <line id="LeftBorderLine" hmi-event:mouseEnter="url(#onSetCursorResizeEW)" hmi-event:mouseLeave="url(#onCursorResumeLeave)"
                hmi-event:pan="url(#onSlideLeft)" hmi-event:down="url(#onStartResize)" hmi-event:up="url(#onStopResize)"
                x1="0"
                x2="0"
                y1="0"
                hmi-bind:y2="{ ParamProps.Height }"
                hmi-bind:stroke-width="{ LocalProps.SYS_HandleWidth }"
                stroke="rgba(0,0,0,0)" />

            <line id="TopLeftBorderCorner" hmi-event:mouseEnter="url(#onSetCursorResizeNWSE)" hmi-event:mouseLeave="url(#onCursorResumeLeave)"
                hmi-event:pan="url(#onSlideTopLeft)" hmi-event:down="url(#onStartResize)" hmi-event:up="url(#onStopResize)"
                hmi-bind:x1="{{ - LocalProps.HandleWidthHalf }}"
                hmi-bind:x2="{ LocalProps.HandleWidthHalf }"
                hmi-bind:y1="{{ - LocalProps.HandleWidthHalf }}"
                hmi-bind:y2="{ LocalProps.HandleWidthHalf }"
                hmi-bind:stroke-width="{ LocalProps.StrokeWidth }"
                stroke="rgba(0,0,0,0)" />

            <line id="TopRightCorner" hmi-event:mouseEnter="url(#onSetCursorResizeNESW)" hmi-event:mouseLeave="url(#onCursorResumeLeave)"
                hmi-event:pan="url(#onSlideTopRight)" hmi-event:down="url(#onStartResize)" hmi-event:up="url(#onStopResize)"
                hmi-bind:x1="{{ ParamProps.Width - LocalProps.HandleWidthHalf }}"
                hmi-bind:x2="{LocalProps.CornerX}"
                hmi-bind:y1="{ LocalProps.HandleWidthHalf }"
                hmi-bind:y2="{{ - LocalProps.HandleWidthHalf }}"
                hmi-bind:stroke-width="{ LocalProps.StrokeWidth }"
                stroke="rgba(0,0,0,0)" />

            <line id="BottomRightCorner" hmi-event:mouseEnter="url(#onSetCursorResizeNWSE)" hmi-event:mouseLeave="url(#onCursorResumeLeave)"
                hmi-event:pan="url(#onSlideBottomRight)" hmi-event:down="url(#onStartResize)" hmi-event:up="url(#onStopResize)"
                hmi-bind:x1="{LocalProps.CornerX}"
                hmi-bind:x2="{{ ParamProps.Width - LocalProps.HandleWidthHalf }}"
                hmi-bind:y1="{LocalProps.CornerY}"
                hmi-bind:y2="{{ ParamProps.Height - LocalProps.HandleWidthHalf  }}"
                hmi-bind:stroke-width="{ LocalProps.StrokeWidth }"
                stroke="rgba(0,0,0,0)" />

            <line id="BottomLeftCorner" hmi-event:mouseEnter="url(#onSetCursorResizeNESW)" hmi-event:mouseLeave="url(#onCursorResumeLeave)"
                hmi-event:pan="url(#onSlideBottomLeft)" hmi-event:down="url(#onStartResize)" hmi-event:up="url(#onStopResize)"
                hmi-bind:x1="{{ - LocalProps.HandleWidthHalf }}"
                hmi-bind:x2="{ LocalProps.HandleWidthHalf }"
                hmi-bind:y1="{LocalProps.CornerY}"
                hmi-bind:y2="{{ ParamProps.Height - LocalProps.HandleWidthHalf }}"
                hmi-bind:stroke-width="{ LocalProps.StrokeWidth }"
                stroke="rgba(0,0,0,0)" />
          </g>
        </g>

    </g>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2020. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/">
    <hmi:self type="system:HmiInputHintSystemPart" displayName="Flat InputHint" name="style.flat.inputhint" version="2.9" performanceClass="s">
        <hmi:paramDef name="BackColor"    type="HmiColor" />
        <hmi:paramDef name="TextColor"    type="HmiColor" />
        <hmi:paramDef name="Font"         type="HmiFontPart" />
		<hmi:paramDef name="MinimumValue" type="string" />
		<hmi:paramDef name="MaximumValue" type="string" />
        <hmi:data type="inputHint-details"></hmi:data>
    </hmi:self>
    <defs>
          <hmi:localDef name="TextForRange"            type="string"        hmi-bind:value="{{ Converter.GetTextByID( 'TBID_InputHint_Range' ) }}" />
          <hmi:localDef name="TextForMin"              type="string"        hmi-bind:value="{{ Converter.GetTextByID( 'TBID_InputHint_Minimum' ) }}" />
          <hmi:localDef name="TextForMax"              type="string"        hmi-bind:value="{{ Converter.GetTextByID( 'TBID_InputHint_Maximum' ) }}" />
          <hmi:localDef name="IsMin"                   type="boolean"       hmi-bind:value="{{ ParamProps.MinimumValue == '' ? Converter.IsNumber( ParamProps.MinimumValue ) : true }}" />
          <hmi:localDef name="IsMax"                   type="boolean"       hmi-bind:value="{{ ParamProps.MaximumValue == '' ? Converter.IsNumber( ParamProps.MaximumValue ) : true }}" />
          <hmi:localDef name="IsRange"                 type="boolean"       hmi-bind:value="{{ or( LocalProps.IsMin, LocalProps.IsMax ) }}" />
          <hmi:localDef name="ToolTipText"             type="string"        hmi-bind:value="{{ LocalProps.IsRange ? LocalProps.TextForRange + ( LocalProps.IsMin ? ( '\n' + LocalProps.TextForMin + ParamProps.MinimumValue ) : '' ) + ( LocalProps.IsMax ? ( '\n' + LocalProps.TextForMax + ParamProps.MaximumValue ) : '' ) : '' }}" />
          <hmi:localDef name="TextHeight"              type="number"        hmi-bind:value="{{ Converter.TextHeight( LocalProps.ToolTipText, ParamProps.Font, true ) }}"/>
          <hmi:localDef name="TooltipHeight"           type="number"        hmi-bind:value="{{ LocalProps.TextHeight - ( and( LocalProps.IsMax, LocalProps.IsMin ) ? 10 : 4 ) }}"/>
          <hmi:localDef name="TooltipWidth"            type="number"        hmi-bind:value="{{ Converter.TextWidth( LocalProps.ToolTipText, ParamProps.Font, true ) + 20 }}"/>
          <hmi:localDef name="TwiceTooltipHeight"      type="number"        hmi-bind:value="{{ 2 * LocalProps.TooltipHeight }}" />
          <hmi:localDef name="HalfTooltipHeight"       type="number"        hmi-bind:value="{{ LocalProps.TooltipHeight / 2 }}" />
          <hmi:localDef name="StaticZero"              type="number"        value="0" />
          <hmi:localDef name="StaticOne"               type="number"        value="1" />
    </defs>
    <g hmi-flex:width="{ HmiProps.Width }" id="TIFID_inputHintDetails" hmi-flex:height="{ HmiProps.Height }" hmi-flex:justifyContent="start" hmi:if="{ LocalProps.IsRange }" >
        <g opacity="1" hmi-flex:alignSelf="end">
            <!--Background polyline-->
            <polyline hmi-bind:points="{ LocalProps.StaticOne },{{ -LocalProps.TwiceTooltipHeight }}
	                                     { LocalProps.TooltipWidth },{{ -LocalProps.TwiceTooltipHeight }}
					                             { LocalProps.TooltipWidth },{{ -LocalProps.HalfTooltipHeight }}
					                             {{ LocalProps.TooltipWidth - ( 0.8 * LocalProps.TooltipWidth ) }},{{ -LocalProps.HalfTooltipHeight }}
					                             {{ LocalProps.TooltipWidth - ( 0.85 * LocalProps.TooltipWidth ) }},{ LocalProps.StaticZero }
					                             {{ LocalProps.TooltipWidth - ( 0.9 * LocalProps.TooltipWidth ) }},{{ -LocalProps.HalfTooltipHeight }}
					                             { LocalProps.StaticOne },{{ -LocalProps.HalfTooltipHeight }}
					                             { LocalProps.StaticOne },{{ -LocalProps.TwiceTooltipHeight }}"
                      hmi-bind:fill="{{ Converter.RGBA( ParamProps.BackColor ) }}"
                      stroke="rgba(235, 120, 10, 1.0)">
            </polyline>
            <g>
                <hmi-element:textField start-x="5"
                                       hmi-bind:start-y="{{ -LocalProps.TwiceTooltipHeight+ LocalProps.TooltipHeight / 6 }}"
                                       hmi-bind:width="{ LocalProps.TooltipWidth }"
                                       hmi-bind:height="{ LocalProps.TextHeight }"
                                       hmi-bind:value="{ LocalProps.ToolTipText }"
                                       hmi-bind:fore-color="{{ Converter.RGBA( ParamProps.TextColor ) }}"
                                       output-format=""
                                       enabled="false"
                                       read-only="true"
                                       multi-line= "true"
                                       hmi-bind:horizontal-scrollbar-visibility="{{ HmiScrollBarVisibility.Collapsed }}"
									                     hmi-bind:vertical-scrollbar-visibility="{{ HmiScrollBarVisibility.Collapsed }}">
                    <hmi-feature:font hmi-bind:size="{ ParamProps.Font.Size }"
                                      hmi-bind:italic="{ ParamProps.Font.Italic }"
                                      hmi-bind:weight="{ ParamProps.Font.Weight }"
                                      hmi-bind:strike-out="{ ParamProps.Font.StrikeOut }"
                                      hmi-bind:underline="{ ParamProps.Font.Underline }"
                                      hmi-bind:name="{ ParamProps.Font.Name }" />
                </hmi-element:textField>
            </g>
        </g>
    </g>
</svg><!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2022. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     preserveAspectRatio="none">

    <hmi:self type="custom" displayName="Flat LadderDiagram" name="style.flat.ladderdiagram">
        <hmi:paramDef name="LineColor"             type="string"               />
        <hmi:paramDef name="ActiveLineColor"       type="string"               />
        <hmi:paramDef name="InActiveLineColor"     type="string"               />
    </hmi:self>

    <hmi-element:flowDiagram hmi-bind:height="{ Layout.ActualHeight }" hmi-bind:width="{ Layout.ActualWidth }" type="ladder"  start-x="30" start-y="30">
        <hmi-feature:flowLines>
            <hmi-feature:flowLine line-state="normal" line-style="solid" hmi-bind:stroke="{ ParamProps.LineColor }" stroke-width="2">
                <hmi-feature:flowLineDecorator decorator-type="input" show-text="true">
                </hmi-feature:flowLineDecorator>
                <hmi-feature:flowLineDecorator decorator-type="output" show-text="true">
                </hmi-feature:flowLineDecorator>
                <hmi-feature:flowLineDecorator decorator-type="terminal" show-text="true" symbol-type="line">
                </hmi-feature:flowLineDecorator>
            </hmi-feature:flowLine>
          <hmi-feature:flowLine line-state="normal" line-style="dash"  hmi-bind:stroke="{ ParamProps.LineColor }" stroke-width="2">
            <hmi-feature:flowLineDecorator decorator-type="input" show-text="true">
            </hmi-feature:flowLineDecorator>
            <hmi-feature:flowLineDecorator decorator-type="output" show-text="true">
            </hmi-feature:flowLineDecorator>
            <hmi-feature:flowLineDecorator decorator-type="terminal" show-text="true" symbol-type="line">
            </hmi-feature:flowLineDecorator>
          </hmi-feature:flowLine>
            <hmi-feature:flowLine line-state="active" line-style="solid" hmi-bind:stroke="{ ParamProps.ActiveLineColor }" stroke-width="2">
                <hmi-feature:flowLineDecorator decorator-type="input" show-text="true">
                </hmi-feature:flowLineDecorator>
                <hmi-feature:flowLineDecorator decorator-type="output" show-text="true">
                </hmi-feature:flowLineDecorator>
                <hmi-feature:flowLineDecorator decorator-type="terminal" show-text="true" symbol-type="line">
                </hmi-feature:flowLineDecorator>
            </hmi-feature:flowLine>
            <hmi-feature:flowLine line-state="inactive" line-style="dash" hmi-bind:stroke="{ ParamProps.InActiveLineColor }" stroke-width="2">
                <hmi-feature:flowLineDecorator decorator-type="input" show-text="true">
                </hmi-feature:flowLineDecorator>
                <hmi-feature:flowLineDecorator decorator-type="output" show-text="true">
                </hmi-feature:flowLineDecorator>
                <hmi-feature:flowLineDecorator decorator-type="terminal" show-text="true" symbol-type="line">
                </hmi-feature:flowLineDecorator>
            </hmi-feature:flowLine>
        </hmi-feature:flowLines>
        <hmi-feature:logic content-height="200" content-width="110">
            <!--this template will render the logic gates/symbols along with the associated texts-->
            <hmi:master-include template="include.style.flat.logicview.svghmi">
            </hmi:master-include>
        </hmi-feature:logic>
        <hmi-feature:block content-height="300" content-width="300">
          <!--modify the value as required-->
          <hmi:master-include template="include.style.flat.blockview.svghmi" >
          </hmi:master-include>
        </hmi-feature:block>
        <hmi:master-inline>
            <hmi:template>
                <svg xmlns="http://www.w3.org/2000/svg" 
                 xmlns:hmi="http://svg.siemens.com/hmi/"
                 xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/" 
                 xmlns:hmi-data-bind="http://svg.siemens.com/hmi/data/bind/"
                 overflow="visible">
                    <hmi:self type="custom" name="title" displayName="title" >
                        <hmi:data type="text-details"></hmi:data>
                    </hmi:self>
                    <defs>
                        <hmi:localDef name="Text"               type="string"                    hmi-data-bind:value="{ Content.Text }" />
                        <hmi:localDef name="TextFontWeight"     type="string"                    hmi-data-bind:value="{ Content.TextFontWeight }" />
                        <hmi:localDef name="TextFontSize"       type="number"                    hmi-data-bind:value="{ Content.TextFontSize }" />
                        <hmi:localDef name="TextFontName"       type="string"                    hmi-data-bind:value="{ Content.TextFontName }" />
                        <hmi:localDef name="LogicSystemPart"    type="HmiLogicSymbolSystemPart"  hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiLogicSymbolSystemPart' ) }}" />
                    </defs>
                    <text  hmi-bind:font-size="{ LocalProps.TextFontSize }"
                           hmi-bind:font-weight="{ LocalProps.TextFontWeight }"
                           hmi-bind:fill="{{ Converter.RGBA(LocalProps.LogicSystemPart.HeaderForeColor) }}"
                           hmi-bind:font-family="{ LocalProps.TextFontName }">
                      <hmi:text hmi-bind:value="{ LocalProps.Text }"/>
                    </text>
                </svg>
            </hmi:template>
        </hmi:master-inline>
    </hmi-element:flowDiagram>
</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     preserveAspectRatio="none">

    <hmi:self type="part:HmiSelectionItemPart" displayName="Flat Listbox Part" name="style.flat.listbox.part" version="2.9" performanceClass="L">

        <hmi:paramDef name="ItemOperable"           type="boolean"          />
        <hmi:paramDef name="ForeColor"              type="HmiColor"         />
        <hmi:paramDef name="BackColor"              type="HmiColor"         />
        <hmi:paramDef name="AlternateBackColor"     type="HmiColor"         />
        <hmi:paramDef name="BorderColor"            type="HmiColor"         />
        <hmi:paramDef name="FocusColor"             type="HmiColor"         />
        <hmi:paramDef name="Content"                type="HmiContentPart"   />
        <hmi:paramDef name="Font"                   type="HmiFontPart"      />
        <hmi:paramDef name="SelectionItemHeight"    type="number"           />
        <hmi:paramDef name="TextPaddingLeft"        type="number"           />
        <hmi:paramDef name="PaddingLeftPlusRight"   type="number"           />

    </hmi:self>

    <defs>
        <!-- Local definitions of this template -->
        <hmi:localDef name="ContentAreaWidth"       type="number" hmi-bind:value="{{ Layout.ActualWidth - ParamProps.PaddingLeftPlusRight }}" />
        <hmi:localDef name="BackColor"              type="string" hmi-bind:value="{{ eq( (HmiProps.$index % 2), 0) ? Converter.RGBA(ParamProps.BackColor) :Converter.RGBA(ParamProps.AlternateBackColor) }}" />

        <!-- Action definitions of this template -->
        <hmi:action id="onMouseTapped" hmi-bind:condition="{ ParamProps.ItemOperable }" >
            <hmi:setProperty name="HmiProps.IsSelected" type="boolean" hmi-bind:value="{{ HmiProps.IsSelected ? false : true }}" hmi-bind:condition="{{ or( EventArgs.Trigger==HmiEventTrigger.Left, EventArgs.Trigger==HmiEventTrigger.Touch ) }}" />
        </hmi:action>
    </defs>

    <g id="TIFID_SelectionItemRect" hmi-bind:transform="translate(0, {{ ( HmiProps.$index * ParamProps.SelectionItemHeight ) }} )" hmi-event:tapped="url(#onMouseTapped)"
        hmi-bind:opacity="{{ ParamProps.ItemOperable ? 1.0 : 0.5 }}">

        <rect id="CheckBoxAreaRect"
              hmi-bind:width="{ LocalProps.ContentAreaWidth }"
              hmi-bind:height="{ ParamProps.SelectionItemHeight }"
              hmi-bind:stroke="{{ Converter.RGBA(ParamProps.BorderColor) }}"
              hmi-bind:fill="{{ HmiProps.IsSelected ? Converter.RGBA(ParamProps.FocusColor) : LocalProps.BackColor }}"
              opacity="1"/>

        <hmi:include template="include.style.flat.content.svghmi" hmi-bind:for="{ ParamProps.Content }"
                     hmi-bind:width="{ LocalProps.ContentAreaWidth }"
                     hmi-bind:height="{ ParamProps.SelectionItemHeight }">

            <hmi:param name="Graphic"       type="HmiGraphic"  hmi-bind:value="{ HmiProps.Graphic }" />
            <hmi:param name="GraphicWidth"  type="number"      hmi-bind:value="{ HmiProps.GraphicWidth }" />
            <hmi:param name="GraphicHeight" type="number"      hmi-bind:value="{ HmiProps.GraphicHeight }" />
            <hmi:param name="Text"          type="string"      hmi-bind:value="{ HmiProps.Text }" />
            <hmi:param name="Font"          type="HmiFontPart" hmi-bind:value="{ ParamProps.Font }" />
            <hmi:param name="TextColor"     type="HmiColor"    hmi-bind:value="{{ HmiProps.IsSelected ? ParamProps.BackColor : ParamProps.ForeColor }}" />
            <hmi:param name="TextPaddingLeft" type="number"    hmi-bind:value="{ ParamProps.TextPaddingLeft }" />
        </hmi:include>



    </g>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg" id="SvgIncludeListContainer"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     preserveAspectRatio="none"
     overflow="visible" >

    <hmi:self type="part:HmiDynamicPropertyPart" displayName="Flat ListContainer" name="style.flat.listcontainer" version="2.9" performanceClass="L">

        <hmi:paramDef name="ListContainerSelectedIndex" type="number"           two-way="true" />
        <hmi:paramDef name="SelectedIndex"              type="number"           two-way="true" />
        <hmi:paramDef name="Pressed"                    type="number"           two-way="true" />
        <hmi:paramDef name="ItemOperable"               type="boolean"          />
        <hmi:paramDef name="ForeColor"                  type="HmiColor"         />
        <hmi:paramDef name="BackColor"                  type="HmiColor"         />
        <hmi:paramDef name="AlternateBackColor"         type="HmiColor"         />
        <hmi:paramDef name="SelectionForeColor"         type="HmiColor"         />
        <hmi:paramDef name="SelectionBackColor"         type="HmiColor"         />
        <hmi:paramDef name="Content"                    type="HmiContentPart"   />
        <hmi:paramDef name="Font"                       type="HmiFontPart"      />
        <hmi:paramDef name="SelectionItemHeight"        type="number"           />
        <hmi:paramDef name="TextPaddingLeft"            type="number"           />

    </hmi:self>

    <defs>
        <!-- Local definitions of this template -->
        <hmi:localDef name="MouseHover"             type="number" value="0" />
		<hmi:localDef name="Panning"				type="number" value="0" />

        <hmi:localDef name="ContentAreaWidth"       type="number" hmi-bind:value="{ Layout.ActualWidth }" />

        <hmi:localDef name="BackColor"              type="string" hmi-bind:value="{{ eq( (HmiProps.$index % 2), 0) ? Converter.RGBA(ParamProps.BackColor) : Converter.RGBA(ParamProps.AlternateBackColor) }}" />
        <hmi:localDef name="IsTextTrimmed"          type="boolean"  value="false" />
        <!-- Action definitions of this template -->
        <hmi:action id="onMouseHover" hmi-bind:condition="{ ParamProps.ItemOperable }" >
	          <hmi:sendCommand name="SHOW_TOOLTIP"            type="string" hmi-bind:value="{ HmiProps.Text }" hmi-bind:condition="{{ and( (HmiProps.Text != ''), LocalProps.IsTextTrimmed) }}" />
            <hmi:setProperty name="LocalProps.MouseHover"   type="number" value="1" />
        </hmi:action>
        <hmi:action id="onMouseDown" hmi-bind:condition="{ ParamProps.ItemOperable }" >
            <hmi:setProperty name="LocalProps.MouseHover"                   type="number"   value="0" />
        </hmi:action>
        <hmi:action id="onMouseUp" hmi-bind:condition="{ ParamProps.ItemOperable }" >
            <hmi:setProperty name="ParamProps.SelectedIndex"                type="number"   hmi-bind:value="{ HmiProps.$index }" hmi-bind:condition="{{ and( LocalProps.Panning == 0, or( EventArgs.Trigger==HmiEventTrigger.Left, EventArgs.Trigger==HmiEventTrigger.Touch )) }}" />
            <hmi:setProperty name="ParamProps.ListContainerSelectedIndex"   type="number"   hmi-bind:value="{ HmiProps.$index }" hmi-bind:condition="{{ and( LocalProps.Panning == 0, or( EventArgs.Trigger==HmiEventTrigger.Left, EventArgs.Trigger==HmiEventTrigger.Touch )) }}" />
            <hmi:setProperty name="ParamProps.Pressed"                      type="number"   value="0" hmi-bind:condition="{{ and( LocalProps.Panning == 0, or( EventArgs.Trigger==HmiEventTrigger.Left, EventArgs.Trigger==HmiEventTrigger.Touch )) }}" />
            <hmi:setProperty name="LocalProps.Panning"   type="number" value="0" />
            <hmi:setProperty name="LocalProps.MouseHover"   type="number" value="1" />
        </hmi:action>
        <hmi:action id="onMouseLeave" hmi-bind:condition="{ ParamProps.ItemOperable }" >
            <hmi:setProperty name="LocalProps.MouseHover"   type="number" value="0" />
            <hmi:sendCommand name="HIDE_TOOLTIP" />
        </hmi:action>
		<hmi:action id="onPan" hmi-bind:condition="{ ParamProps.ItemOperable }" >
            <hmi:setProperty name="LocalProps.Panning"   type="number" value="1" />
		</hmi:action>

    </defs>

    <g id="TIFID_SelectionItemRect"
        hmi-event:down="url(#onMouseDown)" hmi-event:up="url(#onMouseUp)" hmi-event:mouseLeave="url(#onMouseLeave)" hmi-event:mouseHover="url(#onMouseHover)" hmi-event:pan="url(#onPan)" >

        <rect id="CheckBoxAreaRect"
              hmi-bind:width="{ LocalProps.ContentAreaWidth }"
              hmi-bind:height="{ ParamProps.SelectionItemHeight }"
              stroke="none"
              hmi-bind:fill="{{ HmiProps.$index == ParamProps.ListContainerSelectedIndex ? Converter.RGBA(ParamProps.SelectionBackColor) : LocalProps.BackColor }}"
              opacity="1" />

        <hmi:include template="include.style.flat.content.svghmi" hmi-bind:for="{ ParamProps.Content }"
                     hmi-bind:width="{ LocalProps.ContentAreaWidth }"
                     hmi-bind:height="{ ParamProps.SelectionItemHeight }">

            <hmi:param name="Graphic"         type="HmiGraphic"  hmi-bind:value="{ HmiProps.Graphic }" />
            <hmi:param name="GraphicWidth"    type="number"      hmi-bind:value="{ HmiProps.GraphicWidth }" />
            <hmi:param name="GraphicHeight"   type="number"      hmi-bind:value="{ HmiProps.GraphicHeight }" />
            <hmi:param name="TextPaddingLeft" type="number"      hmi-bind:value="{ ParamProps.TextPaddingLeft }" />
            <hmi:param name="Text"            type="string"      hmi-bind:value="{ HmiProps.Text }" />
            <hmi:param name="Font"            type="HmiFontPart" hmi-bind:value="{ ParamProps.Font }" />
            <hmi:param name="TextColor"       type="HmiColor"    hmi-bind:value="{{ HmiProps.$index == ParamProps.ListContainerSelectedIndex ? ParamProps.SelectionForeColor: ParamProps.ForeColor }}" />
            <hmi:param name="IsTextTrimmed"   type="boolean"     hmi-bind:value="{ LocalProps.IsTextTrimmed }" />
        </hmi:include>



    </g>

</svg>
<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-data-bind="http://svg.siemens.com/hmi/data/bind/"
     xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/"
     preserveAspectRatio="none">

    <hmi:self type="system:HmiLogicSymbolSystemPart" displayName="Flat HmiLogicSymbolSystemPart" name="include.style.flat.logicview">
        <hmi:data type="logic-details"></hmi:data>
    </hmi:self>
    <defs>
      <hmi:localDef name="HeaderTag"                     type="string"         hmi-data-bind:value="{ Content.HeaderTag }" />
      <hmi:localDef name="HeaderAddress"                 type="string"         hmi-data-bind:value="{ Content.HeaderAddress }" />
      <hmi:localDef name="HeaderAddressForeColor"        type="string"         hmi-data-bind:value="{ Content.HeaderAddressForeColor }" />
      <hmi:localDef name="HeaderText"                    type="string"         hmi-data-bind:value="{ Content.HeaderText }" />
      <hmi:localDef name="FooterTag"                     type="string"         hmi-data-bind:value="{ Content.FooterTag }" />
      <hmi:localDef name="FooterAddress"                 type="string"         hmi-data-bind:value="{ Content.FooterAddress }" />
      <hmi:localDef name="FooterAddressForeColor"        type="string"         hmi-data-bind:value="{ Content.FooterAddressForeColor }" />
      <hmi:localDef name="FooterText"                    type="string"         hmi-data-bind:value="{ Content.FooterText }" />
      <hmi:localDef name="HeaderBackColor"               type="HmiColor"       hmi-data-bind:value="{ Content.HeaderBackColor }" />
      <hmi:localDef name="HeaderForeColor"               type="HmiColor"       hmi-data-bind:value="{ Content.HeaderForeColor }" />
      <hmi:localDef name="HeaderOperandBackColor"        type="HmiColor"       hmi-data-bind:value="{ Content.HeaderOperandBackColor }" />
      <hmi:localDef name="HeaderOperandForeColor"        type="HmiColor"       hmi-data-bind:value="{ Content.HeaderOperandForeColor }" />
      <hmi:localDef name="FooterOperandBackColor"        type="HmiColor"       hmi-data-bind:value="{ Content.FooterOperandBackColor }" />
      <hmi:localDef name="FooterOperandForeColor"        type="HmiColor"       hmi-data-bind:value="{ Content.FooterOperandForeColor }" />
      <hmi:localDef name="FooterBackColor"               type="HmiColor"       hmi-data-bind:value="{ Content.FooterBackColor }" />
      <hmi:localDef name="FooterForeColor"               type="HmiColor"       hmi-data-bind:value="{ Content.FooterForeColor }" />
      <hmi:localDef name="ContentText"                   type="string"         hmi-data-bind:value="{ Content.ContentText }" />
      <hmi:localDef name="SymbolHeight"                  type="number"         hmi-data-bind:value="{ Content.ContentHeight }" />
      <hmi:localDef name="SymbolWidth"                   type="number"         hmi-data-bind:value="{ Content.ContentWidth }" />
      <hmi:localDef name="Stroke"                        type="string"         hmi-data-bind:value="{ Content.Stroke }" />
      <hmi:localDef name="StrokeWidth"                   type="number"         hmi-data-bind:value="{ Content.StrokeWidth }" />
      <hmi:localDef name="InActiveStroke"                type="string"         hmi-data-bind:value="{ Content.InActiveStroke }" />
      <hmi:localDef name="Type"                          type="string"         hmi-data-bind:value="{ Content.Type }" />
      <hmi:localDef name="ActiveStatus"                  type="number"         hmi-data-bind:value="{ Content.ActiveStatus }" />
      <hmi:localDef name="IsDashAllowed"                 type="boolean"        hmi-data-bind:value="{ Content.IsDashAllowed }" />
      <hmi:localDef name="DashTypeSolid"                 type="string"         value="null" />
      <hmi:localDef name="DashTypeDash"                  type="string"         value="5" />
      <hmi:localDef name="Padding"                       type="number"         value="4" /> 
      <hmi:localDef name="StartXVal"                     type="number"         value="6" />
      <hmi:localDef name="TextToSymbolPadding"           type="number"         value="10" />
      <hmi:localDef name="HeaderTextWidth"               type="number"         value="98" />
      <hmi:localDef name="VerticalLineStrokeWidth"       type="number"         value="2" />   
      <hmi:localDef name="SymbolHalfWidth"               type="number"         hmi-bind:value="{{ HmiProps.Width / 2 }}" />
      <hmi:localDef name="SymbolContentHalfWidth"        type="number"         hmi-bind:value="{{ LocalProps.SymbolWidth / 2 }}" />
      <hmi:localDef name="ActualHeaderTextWidth"         type="number"         hmi-bind:value="{{ Converter.TextWidth(LocalProps.HeaderText, HmiProps.HeaderFont, true ) + LocalProps.TextToSymbolPadding }}" />
      <hmi:localDef name="ActualFooterTextWidth"         type="number"         hmi-bind:value="{{ Converter.TextWidth(LocalProps.FooterText, HmiProps.HeaderFont, true ) + LocalProps.TextToSymbolPadding }}" />
      <hmi:localDef name="HeaderBeginYPos"               type="number"         hmi-bind:value="{{ ( HmiProps.Height / 2 ) - ( LocalProps.SymbolHeight / 2 ) - LocalProps.Padding }}" />
      <hmi:localDef name="FooterBeginYPos"               type="number"         hmi-bind:value="{{ ( HmiProps.Height / 2 ) + ( LocalProps.SymbolHeight / 2 ) + LocalProps.Padding }}" />

      <hmi:localDef name="HeaderAddressYPos"             type="number"         hmi-bind:value="{{ LocalProps.HeaderBeginYPos - Converter.TextHeight( LocalProps.HeaderText, HmiProps.HeaderFont, true ) - LocalProps.Padding }}" />
      <hmi:localDef name="FooterTextYPos"                type="number"         hmi-bind:value="{{ not( eq( LocalProps.FooterAddress, '')) ? ( LocalProps.FooterBeginYPos + Converter.TextHeight( 'X', HmiProps.HeaderFont )) : LocalProps.FooterBeginYPos }}" />
      <hmi:localDef name="HeaderTagYPos"                 type="number"         hmi-bind:value="{{ LocalProps.HeaderAddressYPos - Converter.TextHeight( 'X', HmiProps.HeaderFont ) - LocalProps.Padding }}" />
      <hmi:localDef name="HeaderTextCharLen"             type="number"         hmi-bind:value="{{ floor(LocalProps.HeaderTextWidth / Converter.TextWidth('X', HmiProps.HeaderFont )) }}" />
      <hmi:localDef name="BlockSystemPart"               type="HmiBlockSymbolSystemPart"   hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiBlockSymbolSystemPart' ) }}" />
      <hmi:localDef name="ComputedHeaderTag"             type="string"         hmi-bind:value="{{ Converter.TextEllipsis( LocalProps.HeaderTag, LocalProps.HeaderTextCharLen) }}" />
      <hmi:localDef name="ComputedFooterTag"             type="string"         hmi-bind:value="{{ Converter.TextEllipsis( LocalProps.FooterTag, LocalProps.HeaderTextCharLen) }}" />
      <hmi:localDef name="ComputedHeaderTagWidth"        type="number"         hmi-bind:value="{{ Converter.TextWidth( LocalProps.ComputedHeaderTag, HmiProps.HeaderFont ) }}" />
      <hmi:localDef name="ComputedFooterTagWidth"        type="number"         hmi-bind:value="{{ Converter.TextWidth( LocalProps.ComputedFooterTag, HmiProps.HeaderFont ) }}" />
      <hmi:localDef name="IsSymbolInActive"              type="boolean"       hmi-bind:value="{{ or ( or( or (LocalProps.ActiveStatus == 1, LocalProps.ActiveStatus == 2), LocalProps.ActiveStatus == 6 ),LocalProps.ActiveStatus == 7) }}" />
      
    </defs>


    <g hmi-flex:width="{ HmiProps.Width }" hmi-flex:height="{ HmiProps.Height }" hmi-flex:direction ="column" hmi-flex:justifyContent="center" >
      <g hmi-flex:grow="0">
        <!-- Calculations needs to be checked -->
        <line hmi-bind:x2="{{ LocalProps.SymbolHalfWidth - LocalProps.SymbolContentHalfWidth }}" 
              hmi-bind:stroke="{{ or( or ( LocalProps.ActiveStatus == 1,LocalProps.ActiveStatus == 3), LocalProps.ActiveStatus == 6)  ? LocalProps.InActiveStroke : LocalProps.Stroke }}" 
              hmi-bind:stroke-width ="{ LocalProps.StrokeWidth }"
              hmi-bind:stroke-dasharray =" {{ and( or( or( LocalProps.ActiveStatus == 1,LocalProps.ActiveStatus == 3), LocalProps.ActiveStatus == 6), LocalProps.IsDashAllowed) ? LocalProps.DashTypeDash : LocalProps.DashTypeSolid }} "/>

        <line hmi:if="{{ LocalProps.Type == 'input' }}" hmi-bind:x1="{{ (LocalProps.SymbolHalfWidth - LocalProps.SymbolContentHalfWidth ) }}"
              hmi-bind:y1="{{ -(LocalProps.SymbolHeight)/2 }}"
              hmi-bind:x2="{{ (LocalProps.SymbolHalfWidth - LocalProps.SymbolContentHalfWidth ) }}"
              hmi-bind:y2="{{ LocalProps.SymbolHeight/2 }}"
              hmi-bind:stroke="{{ LocalProps.IsSymbolInActive ? LocalProps.InActiveStroke : LocalProps.Stroke }}"
              hmi-bind:stroke-dasharray="{{ and( LocalProps.IsSymbolInActive, LocalProps.IsDashAllowed) ? LocalProps.DashTypeDash : LocalProps.DashTypeSolid }}"
              hmi-bind:stroke-width="{ LocalProps.VerticalLineStrokeWidth }" />
      
        <line hmi:if="{{ LocalProps.Type == 'input' }}" hmi-bind:x1="{{ (LocalProps.SymbolHalfWidth + LocalProps.SymbolContentHalfWidth ) }}"
              hmi-bind:y1="{{ -(LocalProps.SymbolHeight/2) }}"
              hmi-bind:x2="{{ (LocalProps.SymbolHalfWidth + LocalProps.SymbolContentHalfWidth ) }}"
              hmi-bind:y2="{{ LocalProps.SymbolHeight/2 }}"
              hmi-bind:stroke="{{ LocalProps.IsSymbolInActive ? LocalProps.InActiveStroke : LocalProps.Stroke }}"
              hmi-bind:stroke-dasharray="{{ and( LocalProps.IsSymbolInActive, LocalProps.IsDashAllowed) ? LocalProps.DashTypeDash : LocalProps.DashTypeSolid }}"
              hmi-bind:stroke-width="{ LocalProps.VerticalLineStrokeWidth }" />

        <path hmi:if="{{ LocalProps.Type == 'output' }}" 
              hmi-bind:d="M{{ (LocalProps.SymbolHalfWidth - LocalProps.SymbolContentHalfWidth + 2 ) }} {{ -(LocalProps.SymbolHeight / 2) }}  C {{ (LocalProps.SymbolHalfWidth - (LocalProps.SymbolWidth/2)  - 2) }} {{ -(LocalProps.SymbolHeight / 2) + 5 }} {{ (LocalProps.SymbolHalfWidth - (LocalProps.SymbolWidth/2)  - 2) }} {{ (LocalProps.SymbolHeight / 2) - 5 }} {{ (LocalProps.SymbolHalfWidth - (LocalProps.SymbolWidth/2) + 2 ) }} {{ (LocalProps.SymbolHeight / 2) }}" 
              hmi-bind:stroke="{{ LocalProps.IsSymbolInActive ? LocalProps.InActiveStroke : LocalProps.Stroke }}"
              hmi-bind:stroke-width="{ LocalProps.VerticalLineStrokeWidth }" fill="none" 
              hmi-bind:stroke-dasharray="{{ and( LocalProps.IsSymbolInActive, LocalProps.IsDashAllowed) ? LocalProps.DashTypeDash : LocalProps.DashTypeSolid }}"></path>
        <hmi-element:textField 
            hmi-bind:start-x="{{(LocalProps.SymbolHalfWidth - LocalProps.SymbolContentHalfWidth + (LocalProps.VerticalLineStrokeWidth / 2))}}"
            hmi-bind:start-y="{{-(LocalProps.SymbolHeight/2)}}"
            hmi-bind:width="{ LocalProps.SymbolWidth }"
            hmi-bind:height="{ LocalProps.SymbolHeight }"
            vertical-text-alignment="middle"
            horizontal-text-alignment="center"
            hmi-bind:value="{ LocalProps.ContentText }"
            target="LocalProps.ContentText"
            output-format="{S}"
            multi-line="true"
            enabled="false"
            read-only="true"
            hmi-bind:fore-color="{{ LocalProps.IsSymbolInActive ? LocalProps.InActiveStroke : LocalProps.Stroke }}"                           
            hmi-bind:horizontal-scrollbar-visibility="{{ HmiScrollBarVisibility.Collapsed }}"
            hmi-bind:vertical-scrollbar-visibility="{{ HmiScrollBarVisibility.Collapsed }}">
          <hmi-feature:font hmi-bind:scope="{ HmiProps.ContentFont }" />
        </hmi-element:textField>
        <path hmi:if="{{ LocalProps.Type == 'output' }}" 
              hmi-bind:d="M{{ (LocalProps.SymbolHalfWidth + LocalProps.SymbolContentHalfWidth - 2 ) }} {{ -(LocalProps.SymbolHeight / 2) }}  C {{ (LocalProps.SymbolHalfWidth + (LocalProps.SymbolWidth/2)  + 2) }} {{ -(LocalProps.SymbolHeight / 2) + 5 }} {{ (LocalProps.SymbolHalfWidth + (LocalProps.SymbolWidth/2)  + 2) }} {{ (LocalProps.SymbolHeight / 2) - 5 }} {{ (LocalProps.SymbolHalfWidth + (LocalProps.SymbolWidth/2) - 2 ) }} {{ (LocalProps.SymbolHeight / 2) }}"
              hmi-bind:stroke="{{ LocalProps.IsSymbolInActive ? LocalProps.InActiveStroke : LocalProps.Stroke }}"
              hmi-bind:stroke-width="{ LocalProps.VerticalLineStrokeWidth }" fill="none"
              hmi-bind:stroke-dasharray="{{ and( LocalProps.IsSymbolInActive,LocalProps.IsDashAllowed) ? LocalProps.DashTypeDash : LocalProps.DashTypeSolid }}"></path>

        <line hmi-bind:x1="{{ (LocalProps.SymbolHalfWidth + LocalProps.SymbolContentHalfWidth +( LocalProps.VerticalLineStrokeWidth/2)) }}" hmi-bind:x2="{ HmiProps.Width }" 
              hmi-bind:stroke="{{  or( or( or( LocalProps.ActiveStatus == 0, LocalProps.ActiveStatus == 4), LocalProps.ActiveStatus == 6 ), LocalProps.ActiveStatus == 7) ? LocalProps.Stroke : LocalProps.InActiveStroke }}" 
              hmi-bind:stroke-dasharray="{{ or( or( or ( LocalProps.ActiveStatus == 0, LocalProps.ActiveStatus == 4), LocalProps.ActiveStatus == 6 ), LocalProps.ActiveStatus == 7) ? LocalProps.DashTypeSolid : ( LocalProps.IsDashAllowed ? LocalProps.DashTypeDash : LocalProps.DashTypeSolid ) }}"
              hmi-bind:stroke-width ="{ LocalProps.StrokeWidth }" />
      </g>
    </g>
    <g>	
     <rect hmi:if="{{ not( eq( LocalProps.ComputedHeaderTag, '')) }}"
          hmi-bind:x="{{ HmiProps.Width / 2 - ( LocalProps.ComputedHeaderTagWidth / 2 )}}" 
          hmi-bind:y="{{ (LocalProps.HeaderAddress == '' ? LocalProps.HeaderAddressYPos  : LocalProps.HeaderTagYPos) - (Converter.TextHeight( 'X' , HmiProps.HeaderFont ) - LocalProps.Padding / 2) }}"
          hmi-bind:width="{ LocalProps.ComputedHeaderTagWidth }"
          hmi-bind:height="{{ Converter.TextHeight( 'X' , HmiProps.HeaderFont ) }}"
          hmi-bind:fill="{{ Converter.RGBA(LocalProps.HeaderBackColor) }}" />
     <text hmi-bind:x="{{ HmiProps.Width / 2 }}" id="TIFID_contactHeaderValue"
          hmi-bind:y="{{ LocalProps.HeaderAddress == '' ? LocalProps.HeaderAddressYPos : LocalProps.HeaderTagYPos }}"
          hmi-bind:font-size="{ HmiProps.HeaderFont.Size }"
          hmi-bind:font-style="{{ HmiProps.HeaderFont.Italic ? 'italic' : 'normal' }}"
          hmi-bind:font-weight="{ HmiProps.HeaderFont.Weight }" hmi-bind:font-family="{ HmiProps.HeaderFont.Name }"
          hmi-bind:fill="{{ Converter.RGBA( LocalProps.HeaderForeColor ) }}"
          text-anchor="middle">
        <hmi:text hmi-bind:value="{ LocalProps.ComputedHeaderTag }" />
     </text>
        <text hmi-bind:x="{{ HmiProps.Width / 2 }}" id="TIFID_contactHeaderAddress"
            hmi-bind:y="{ LocalProps.HeaderAddressYPos }"
            hmi-bind:font-size="{ HmiProps.HeaderFont.Size }"
            hmi-bind:font-style="{{ HmiProps.HeaderFont.Italic ? 'italic' : 'normal' }}"
            hmi-bind:font-weight="{ HmiProps.HeaderFont.Weight }" hmi-bind:font-family="{ HmiProps.HeaderFont.Name }"
            hmi-bind:fill="{ LocalProps.HeaderAddressForeColor }"
            text-anchor="middle">
            <hmi:text hmi-bind:value="{{ Converter.TextEllipsis( LocalProps.HeaderAddress, LocalProps.HeaderTextCharLen) }}" />
        </text>
	    <rect
	          hmi:if="{{ not( eq( LocalProps.HeaderOperandBackColor, '')) }}"
	          hmi-bind:width="{ LocalProps.ActualHeaderTextWidth }"
	          hmi-bind:height="{{ Converter.TextHeight( LocalProps.HeaderText , HmiProps.HeaderFont, true ) + LocalProps.Padding / 2 }}"
	          hmi-bind:fill="{{ Converter.RGBA(LocalProps.HeaderOperandBackColor) }}"
	          hmi-bind:x="{{ LocalProps.StartXVal + (LocalProps.HeaderTextWidth - LocalProps.ActualHeaderTextWidth)/2 }}"
	          hmi-bind:y="{{  LocalProps.HeaderBeginYPos - Converter.TextHeight(  LocalProps.HeaderText , HmiProps.HeaderFont, true ) }}"/>
	  
        <hmi-element:textField
              hmi-bind:start-x="{ LocalProps.StartXVal }"
              hmi-bind:width="{ LocalProps.HeaderTextWidth }"
              hmi-bind:height="{{ HmiProps.Height / 2 - LocalProps.SymbolHeight / 2 }}"
              hmi-bind:padding="{ LocalProps.Padding }"
              vertical-text-alignment="bottom"
              horizontal-text-alignment="center"
              hmi-bind:value="{ LocalProps.HeaderText }"
              hmi-bind:fore-color="{{ ne(LocalProps.HeaderOperandForeColor, '') ? Converter.RGBA( LocalProps.HeaderOperandForeColor ) : Converter.RGBA( LocalProps.HeaderForeColor ) }}"
              target="LocalProps.HeaderText"
              output-format="{S}"
              multi-line="true"
              enabled="false"
              read-only="true"
              hmi-bind:horizontal-scrollbar-visibility="{{ HmiScrollBarVisibility.Collapsed }}"
              hmi-bind:vertical-scrollbar-visibility="{{ HmiScrollBarVisibility.Collapsed }}">
            <hmi-feature:font hmi-bind:scope="{ HmiProps.HeaderFont }" />
         </hmi-element:textField>

        <text hmi-bind:x="{{ HmiProps.Width / 2 }}"
            hmi-bind:y="{ LocalProps.FooterBeginYPos }"
            hmi-bind:font-size="{ HmiProps.HeaderFont.Size }"
            hmi-bind:font-style="{{ HmiProps.HeaderFont.Italic ? 'italic' : 'normal' }}"
            hmi-bind:font-weight="{ HmiProps.HeaderFont.Weight }" hmi-bind:font-family="{ HmiProps.HeaderFont.Name }"
            hmi-bind:fill="{ LocalProps.FooterAddressForeColor }"
            text-anchor="middle" dominant-baseline="hanging">
            <hmi:text hmi-bind:value="{{ Converter.TextEllipsis( LocalProps.FooterAddress, LocalProps.HeaderTextCharLen) }}" />
        </text>
        <rect
            hmi:if="{{ not( eq( LocalProps.FooterOperandBackColor, '')) }}"
		    hmi-bind:width="{ LocalProps.ActualFooterTextWidth }"
		    hmi-bind:height="{{ Converter.TextHeight( LocalProps.FooterText , HmiProps.HeaderFont, true ) + LocalProps.Padding / 2 }}"
		    hmi-bind:fill="{{ Converter.RGBA(LocalProps.FooterOperandBackColor) }}"
		    hmi-bind:x="{{ LocalProps.StartXVal + (LocalProps.HeaderTextWidth - LocalProps.ActualFooterTextWidth)/2 }}"
		    hmi-bind:y="{ LocalProps.FooterTextYPos }" />
      <hmi-element:textField
            hmi-bind:start-x="{ LocalProps.StartXVal }"
            hmi-bind:start-y="{{ ne(LocalProps.FooterTextYPos, null) ? LocalProps.FooterTextYPos : 0 }}"
            hmi-bind:width="{ LocalProps.HeaderTextWidth }"
            hmi-bind:height="{{ ( HmiProps.Height / 2) - (LocalProps.SymbolHeight / 2) }}"
            vertical-text-alignment="top"
            horizontal-text-alignment="center"
            hmi-bind:value="{ LocalProps.FooterText }"
            hmi-bind:fore-color="{{ ne(LocalProps.FooterOperandForeColor, '') ? Converter.RGBA( LocalProps.FooterOperandForeColor ) : Converter.RGBA( LocalProps.FooterForeColor ) }}"
            target="LocalProps.HeaderText"
            output-format="{S}"
            multi-line="true"
            enabled="false"
            read-only="true"
            hmi-bind:horizontal-scrollbar-visibility="{{ HmiScrollBarVisibility.Collapsed }}"
            hmi-bind:vertical-scrollbar-visibility="{{ HmiScrollBarVisibility.Collapsed }}">
        <hmi-feature:font hmi-bind:scope="{ HmiProps.HeaderFont }" />
     </hmi-element:textField>
     <rect hmi:if="{{ not( eq( LocalProps.ComputedFooterTag, '')) }}"
           hmi-bind:x="{{ HmiProps.Width / 2 - ( LocalProps.ComputedFooterTagWidth / 2 ) }}" 
           hmi-bind:y="{{ LocalProps.FooterTextYPos + Converter.TextHeight( LocalProps.FooterText, HmiProps.HeaderFont, true ) + LocalProps.Padding }}"
           hmi-bind:width="{ LocalProps.ComputedFooterTagWidth }"
           hmi-bind:height="{{ Converter.TextHeight( 'X' , HmiProps.HeaderFont ) }}"
           hmi-bind:fill="{{ Converter.RGBA(LocalProps.FooterBackColor) }}" />
     <text hmi-bind:x="{{ HmiProps.Width / 2 }}" id="TIFID_contactFooterValue"
           hmi-bind:y="{{ LocalProps.FooterTextYPos + Converter.TextHeight( LocalProps.FooterText, HmiProps.HeaderFont, true ) + LocalProps.Padding * 2 }}"
           hmi-bind:font-size="{ HmiProps.HeaderFont.Size }"
           hmi-bind:font-style="{{ HmiProps.HeaderFont.Italic ? 'italic' : 'normal' }}"
           hmi-bind:font-weight="{ HmiProps.HeaderFont.Weight }" hmi-bind:font-family="{ HmiProps.HeaderFont.Name }"
           hmi-bind:fill="{{ Converter.RGBA( LocalProps.FooterForeColor ) }}"
           text-anchor="middle" dominant-baseline="hanging">
        <hmi:text hmi-bind:value="{ LocalProps.ComputedFooterTag }" />
     </text>
    </g>
</svg><!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2021. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/"
     preserveAspectRatio="none"
     id="custom_SystemDiagnosticMatrixView"
     data-tif-type="WSI:MatrixView">

  <hmi:self type="part:HmiDynamicPropertyPart" displayName="Flat MatrixView" name="style.flat.matrixview">
    <!-- type can be changed to matrix view once properties are available -->
    <hmi:paramDef name="ShowStatusPath"           type="boolean"        />
    <hmi:paramDef name="Font"                     type="HmiFontPart"            />
  </hmi:self>

  <defs>

    <hmi:localDef name="PropNameText"                 type="string"      value="Text"        />
    <hmi:localDef name="VertPos"				              type="number"      value="0"           />
    <hmi:localDef name="PropNameGraphic"              type="string"      value="Graphic"     />
    <hmi:localDef name="PropNameBorderColor"          type="string"      value="BorderColor" />
    <hmi:localDef name="PropNameBorderWidth"          type="string"      value="BorderWidth" />
    <hmi:localDef name="PropNameBackColor"            type="string"      value="BackColor" />
    <hmi:localDef name="PropNameForeColor"            type="string"      value="ForeColor" />
    <hmi:localDef name="PropNameNavigationIndicator"  type="string"      value="NavigationIndicator" />
    <hmi:localDef name="PropIp"				                type="string"      value="Ip"           />
    <hmi:localDef name="PropNodeIP"				            type="string"      value="NodeIP"           />
    <hmi:localDef name="PropDeviceNumber"	            type="string"      value="DeviceNumber" />
    <hmi:localDef name="PropType"	                    type="string"      value="Type" />
    <hmi:localDef name="PropSpacePaddingItem"	        type="string"      value="SpacePaddingItem" />
    <hmi:localDef name="PropTooltipText"	            type="string"      value="TooltipText" />
    <hmi:localDef name="PropOperatingState"	            type="string"      value="OperatingState" />
  </defs>
  <g>
    <hmi-element:listContainer hmi-bind:width="{ Layout.ActualWidth }" hmi-bind:height="{ Layout.ActualHeight }"
         source="2">

      <hmi-feature:properties>
        <hmi-feature:select hmi-bind:name="{ LocalProps.PropNameText }"                     as="Text"          />
        <hmi-feature:select hmi-bind:name="{ LocalProps.PropNameGraphic }"                  as="Graphic"       />
        <hmi-feature:select hmi-bind:name="{ LocalProps.PropNameBorderColor }"              as="BorderColor"   />
        <hmi-feature:select hmi-bind:name="{ LocalProps.PropNameBorderWidth }"              as="BorderWidth"   />
        <hmi-feature:select hmi-bind:name="{ LocalProps.PropNameBackColor }"                as="BackColor"     />
        <hmi-feature:select hmi-bind:name="{ LocalProps.PropNameForeColor }"                as="ForeColor"     />
        <hmi-feature:select hmi-bind:name="{ LocalProps.PropNameNavigationIndicator }"      as="NavigationIndicator"     />
        <hmi-feature:select hmi-bind:name="{ LocalProps.PropIp }"                           as="Ip"            />
        <hmi-feature:select hmi-bind:name="{ LocalProps.PropNodeIP }"                       as="NodeIP"            />
        <hmi-feature:select hmi-bind:name="{ LocalProps.PropDeviceNumber }"                 as="DeviceNumber"  />
        <hmi-feature:select hmi-bind:name="{ LocalProps.PropType }"                         as="Type"  />
        <hmi-feature:select hmi-bind:name="{ LocalProps.PropSpacePaddingItem }"             as="SpacePaddingItem"  />
        <hmi-feature:select hmi-bind:name="{ LocalProps.PropTooltipText }"                  as="TooltipText"  />
        <hmi-feature:select hmi-bind:name="{ LocalProps.PropOperatingState }"               as="OperatingState"  />
      </hmi-feature:properties>
      <hmi:master-inline>
        <hmi:param name="Font"                      type="HmiFontPart"      hmi-bind:value="{ ParamProps.Font }"           />
        <hmi:param name="VertPos"                   type="number"           hmi-bind:value="{ LocalProps.VertPos }"        />
        <hmi:param name="TileMinWidth"              type="number"           hmi-bind:value="{ HmiProps.TileWidthMin }"     />
        <hmi:param name="TileMaxWidth"              type="number"           hmi-bind:value="{ HmiProps.TileWidthMax }"     />
        <hmi:param name="TileMinHeight"             type="number"           hmi-bind:value="{ HmiProps.TileHeightMin }"    />
        <hmi:param name="TileMaxHeight"             type="number"           hmi-bind:value="{ HmiProps.TileHeightMax }"    />
        <hmi:param name="ShowStatusPath"            type="boolean"          hmi-bind:value="{ ParamProps.ShowStatusPath }" />

        <hmi:template>
          <svg id="TIFID_MatrixView_Container"  data-tif-type="WSI:MatrixViewContainer" xmlns="http://www.w3.org/2000/svg" xmlns:hmi="http://svg.siemens.com/hmi/"
               xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/" xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/"
               xmlns:hmi-types="http://svg.siemens.com/hmi/types/"						overflow="visible">

            <hmi:self type="system:HmiListContainerSystemPart" name="lc-master" displayName="Content of the ListContainer master" >
              <hmi:paramDef name="Font"                        type="HmiFontPart"               />
              <hmi:paramDef name="VertPos"                     type="number"     two-way="true" />
              <hmi:paramDef name="TileMinWidth"                type="number"                    />
              <hmi:paramDef name="TileMaxWidth"                type="number"                    />
              <hmi:paramDef name="TileMinHeight"               type="number"                    />
              <hmi:paramDef name="TileMaxHeight"               type="number"                    />
              <hmi:paramDef name="ShowStatusPath"              type="boolean"                   />
            </hmi:self>
            <defs>
              <hmi:localDef name="MarginTop"                     type="number"                         value="8" />
              <hmi:localDef name="MarginLeft"                    type="number"                         value="8" />
              <hmi:localDef name="ContentY"                      type="number"                         hmi-bind:value="{{ ParamProps.ShowStatusPath ? 40 : 0 }}" />
              <hmi:localDef name="TileWidth"                     type="number"                         hmi-bind:value="{ ParamProps.TileMinWidth }" />
              <hmi:localDef name="TileHeight"                    type="number"                         hmi-bind:value="{ ParamProps.TileMinHeight }" />
              <hmi:localDef name="ScrollBarPart"                 type="HmiScrollBarSystemPart"         hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiScrollBarSystemPart' ) }}" />
              <hmi:localDef name="ViewPort"                      type="number"                         hmi-bind:value="{{ Layout.ActualWidth - LocalProps.MarginLeft - LocalProps.ScrollBarPart.Thickness }}" />
              <hmi:localDef name="MaxTilesPerRow"                type="number"                         hmi-bind:value="{{ floor( LocalProps.ViewPort / ( ParamProps.TileMinWidth + LocalProps.MarginLeft )) }}" />
              <hmi:localDef name="EvalTileMinWidth"              type="number"                         hmi-bind:value="{{ ( LocalProps.ViewPort / LocalProps.MaxTilesPerRow ) - LocalProps.MarginLeft }}" />
              <hmi:localDef name="ItemPerRow"                    type="number"                         hmi-bind:value="{{ floor( LocalProps.ViewPort / ( LocalProps.EvalTileMinWidth + LocalProps.MarginLeft ) ) }}" />
              <hmi:localDef name="NormalizedItemsPerRow"         type="number"                         hmi-bind:value="{{ LocalProps.ItemPerRow == 0 ? 1 : LocalProps.ItemPerRow   }}"/>
              <hmi:localDef name="TotalItems"                    type="number"                         hmi-bind:value="{{ Converter.CountItems( HmiProps.List ) }}" />
              <hmi:localDef name="TotalRows"                     type="number"                         hmi-bind:value="{{ ceil( LocalProps.TotalItems / LocalProps.NormalizedItemsPerRow ) }}" />
              <hmi:localDef name="ScrollbarNeeded"               type="boolean"                        hmi-bind:value="{{ gt( ( ( LocalProps.TotalRows * ( LocalProps.TileHeight + LocalProps.MarginTop ) ) + LocalProps.ContentY ), Layout.ActualHeight ) }}" />
              <hmi:localDef name="CurrentScrollPos"              type="number"                         hmi-bind:value="{{ LocalProps.ScrollbarNeeded? ParamProps.VertPos :0 }}" />
            </defs>

            <hmi:include template="include.style.flat.matrixviewcontent.svghmi"
                         x="0" hmi-bind:y="{{ LocalProps.ScrollbarNeeded ? -LocalProps.CurrentScrollPos + LocalProps.ContentY : LocalProps.ContentY }}"
                         hmi-flex:justifyContent="start"
                         hmi-flex:width="{ LocalProps.ViewPort }"
                         hmi-bind:forEach="{ HmiProps.List }" hmi-flex:direction="row" hmi-flex:wrap="true">

              <hmi:param name="Font"            type="HmiFontPart"  hmi-bind:value="{ ParamProps.Font }"            />
              <hmi:param name="SelectedIndex"   type="number"       hmi-bind:value="{ HmiProps.SelectedIndex }"     />
              <hmi:param name="TileMinWidth"    type="number"       hmi-bind:value="{ ParamProps.TileMinWidth }"    />
              <hmi:param name="TileMaxWidth"    type="number"       hmi-bind:value="{ ParamProps.TileMaxWidth }"    />
              <hmi:param name="TileMinHeight"   type="number"       hmi-bind:value="{ ParamProps.TileMinHeight }"   />
              <hmi:param name="TileMaxHeight"   type="number"       hmi-bind:value="{ ParamProps.TileMaxHeight }"   />

            </hmi:include>
            <g hmi:if="{ LocalProps.ScrollbarNeeded }">
              <hmi:include template="include.style.flat.scrollbarstandalone.svghmi"
                           hmi-bind:width="{ Layout.ActualWidth }"
                           hmi-bind:height="{{ Layout.ActualHeight }}">

                <hmi:param name="BackColor"           type="string"           value="rgba(0,0,0,0)" />
                <hmi:param name="ThumbBackColor"      type="HmiColor"         hmi-bind:value="{ LocalProps.ScrollBarPart.ThumbBackColor }" />
                <hmi:param name="Orientation"         type="HmiOrientation"   hmi-bind:value="{{ HmiOrientation.Vertical }}" />
                <hmi:param name="Width"               type="number"           hmi-bind:value="{ LocalProps.ScrollBarPart.Thickness }" />
                <hmi:param name="Height"              type="number"           hmi-bind:value="{{ Layout.ActualHeight - LocalProps.ContentY }}" />
                <hmi:param name="BeginValue"          type="number"           hmi-bind:value="{ LocalProps.ScrollBarPart.BeginValue }" />
                <hmi:param name="EndValue"            type="number"           hmi-bind:value="{{ LocalProps.TotalRows * ( LocalProps.TileHeight + LocalProps.MarginTop ) }}" />
                <hmi:param name="CurrentValue"        type="number"           hmi-bind:value="{ LocalProps.CurrentScrollPos }" />
                <hmi:param name="VisibleValueRange"   type="number"           hmi-bind:value="{{ Layout.ActualHeight - LocalProps.ContentY - LocalProps.MarginTop }}" />
                <hmi:param name="Thickness"           type="number"           hmi-bind:value="{ LocalProps.ScrollBarPart.Thickness }" />
                <hmi:param name="SmallStepValueRange" type="number"           hmi-bind:value="{{ LocalProps.TotalRows }}" />
                <hmi:param name="BorderWidth"         type="number"           hmi-bind:value="{ LocalProps.ScrollBarPart.BorderWidth }" />
                <hmi:param name="OffsetX"             type="number"           hmi-bind:value="{{ Layout.ActualWidth - LocalProps.ScrollBarPart.Thickness }}" />
                <hmi:param name="OffsetY"             type="number"           hmi-bind:value="{ LocalProps.ContentY }" />
              </hmi:include>
            </g>
          </svg>
        </hmi:template>
      </hmi:master-inline>
    </hmi-element:listContainer>
  </g>
</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2021. All Rights Reserved. -->

<svg id="TIFID_MatrixView_Content"  data-tif-type="WSI:matrixViewContent"
     xmlns="http://www.w3.org/2000/svg"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
		 xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
		 xmlns:hmi-types="http://svg.siemens.com/hmi/types/"
		 xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/"
		 xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
		 hmi-flex:grow="1"
		 hmi-flex:minWidth="{ ParamProps.TileMinWidth }" hmi-flex:maxWidth="{ ParamProps.TileMaxWidth }"
     hmi-flex:minHeight="{ ParamProps.TileMinHeight }" hmi-flex:maxHeight="{ ParamProps.TileMaxHeight }"
		 hmi-flex:marginLeft="8" hmi-flex:marginTop="8">

  <hmi:self type="part:HmiDynamicPropertyPart" name="style.flat.matrixviewcontent" displayName="Content of the matrixview" >
    <hmi:paramDef name="Font"                      type="HmiFontPart"            />
    <hmi:paramDef name="SelectedIndex"             type="number"  two-way="true" />
    <hmi:paramDef name="TileMinWidth"              type="number"                 />
    <hmi:paramDef name="TileMaxWidth"              type="number"                 />
    <hmi:paramDef name="TileMinHeight"             type="number"                 />
    <hmi:paramDef name="TileMaxHeight"             type="number"                 />
    <hmi:paramDef name="TileBorderWidth"           type="number"                 />
  </hmi:self>
  <defs>
    <hmi:localDef name="CustomFontPart" type="HmiFontPart">
      <hmi-types:font name="Siemens Sans" size="14" weight="600"  hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor) }}" />
    </hmi:localDef>
    <hmi:localDef name="DisplayIp"        		type="string"  hmi-bind:value="{ HmiProps.Ip }" />
    <hmi:localDef name="DisplayDeviceNumber"    type="number"  hmi-bind:value="{ HmiProps.DeviceNumber }" />
    <hmi:localDef name="PosX"        	        type="number"  value="36" />
    <hmi:localDef name="NavigationIndicatorWidth"    type="number"  hmi-bind:value="{{ HmiProps.NavigationIndicator == '' ?0:10 }}" />
    <hmi:localDef name="AvailableSpaceForTextBox"        type="number"  hmi-bind:value ="{{(Layout.ActualWidth -(LocalProps.PosX)-8)}}"/>
    <hmi:localDef name="HeightReservedForName"           type="number"  hmi-bind:value="{{(2*(Converter.TextHeight(HmiProps.Text,LocalProps.CustomFontPart)))+ 2 }}" />
    <hmi:localDef name="DisplayType"        	type="string"  hmi-bind:value="{{ Converter.TextEllipsis( HmiProps.Type, (( Layout.ActualWidth - ceil(Layout.ActualWidth / 4) - 5 )-LocalProps.NavigationIndicatorWidth), ParamProps.Font ) }}" />

    <hmi:action id="onMouseDown">
      <hmi:setProperty name="ParamProps.SelectedIndex"  type="number"   hmi-bind:value="{ HmiProps.$index }" hmi-bind:condition="{{ or( EventArgs.Trigger==HmiEventTrigger.Left, EventArgs.Trigger==HmiEventTrigger.Touch ) }}" />
    </hmi:action>
    <hmi:action id="pointer">
      <hmi:setCursor name="pointer" value="element" hmi-bind:condition="{{ne(HmiProps.NavigationIndicator,'')}}"></hmi:setCursor>
    </hmi:action>
    <hmi:action id="auto">
      <hmi:setCursor name="auto" value="element"></hmi:setCursor>
    </hmi:action>
    <hmi:action id="onMouseEnter">
      <hmi:sendCommand name="SHOW_TOOLTIP"    type="string" hmi-bind:value="{ HmiProps.TooltipText }"/>
    </hmi:action>
    <hmi:action id="onMouseLeave">
      <hmi:sendCommand name="HIDE_TOOLTIP" />
    </hmi:action>
  </defs>
  <g hmi:if="{{eq(HmiProps.SpacePaddingItem ,false)}}"  hmi-event:mouseEnter="url(#onMouseEnter)" hmi-event:mouseLeave="url(#onMouseLeave)">
    >
    <g hmi-event:down="url(#onMouseDown)"
		   hmi-event:up="url(#pointer)"
		   hmi-event:mouseEnter="url(#pointer)"
		   hmi-event:mouseHover="url(#pointer)"
		   hmi-event:mouseLeave="url(#auto)">
      <rect hmi-bind:height="{ Layout.ActualHeight }"
				  hmi-bind:width="{ Layout.ActualWidth }"
				  hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor) }}"
				  hmi-bind:stroke="{{ Converter.RGBA( HmiProps.BorderColor) }}"
				  hmi-bind:stroke-width="{ HmiProps.BorderWidth }"/>
      <g id="Picture" >
        <svg x="8"
					 y="8"
					 width="20"
					 height="20">
          <rect x="0"
					      y="0"
					      width="20"
					      height="20"
				        fill="rgba(255,255,255,1)" />
          <image  hmi-bind--xlink:href="{ HmiProps.Graphic }"
						   x="0"
						   y="0"
						   width="20"
						   height="20" />
        </svg>
      </g>
      <hmi-element:textField  hmi-bind:start-x=" { LocalProps.PosX }  "
                                        start-y="10"
                                        hmi-bind:width=" {LocalProps.AvailableSpaceForTextBox}"
                                        hmi-bind:height="{LocalProps.HeightReservedForName}"
                                        text-wrapping="word-wrap"
                                        hmi-bind:value="{HmiProps.Text }"
                                        output-format=""
                                        enabled="false"
                                        read-only="true"
                                        hmi-bind:fore-color="{{ Converter.RGBA(  HmiProps.ForeColor) }}"
                                        vertical-scrollbar-visibility="collapsed"
                                        vertical-text-alignment ="top"
                                     >
        <hmi-feature:font hmi-bind:scope="{ LocalProps.CustomFontPart }" />
      </hmi-element:textField>
      <text
        id="displayIpText"
			  hmi-bind:x="{ LocalProps.PosX }"
			 	hmi-bind:y="{{LocalProps.HeightReservedForName + 25}}"
			  hmi-bind:font-size="{ ParamProps.Font.Size }"
			  hmi-bind:fill="{{ Converter.RGBA(  HmiProps.ForeColor) }}"
        hmi-bind:font-family="{ ParamProps.Font.Name }">
        <hmi:text hmi-bind:value="{ LocalProps.DisplayIp }" />
      </text>
      <!-- <text
			  hmi-bind:x="{ LocalProps.PosX }"
			  hmi-bind:y="{{LocalProps.HeightReservedForName + 40}}"
			  hmi-bind:font-size="{ ParamProps.Font.Size }"
			  hmi-bind:fill="{ HmiProps.ForeColor }"
        hmi-bind:font-family="{ ParamProps.Font.Name }">
        <hmi:text hmi-bind:value="{ LocalProps.DisplayDeviceNumber }" />
      </text> -->
      <text
        id="nodeIpText"
			  hmi-bind:x="{ LocalProps.PosX }"
			  hmi-bind:y="{{LocalProps.HeightReservedForName + 45}}"
			  hmi-bind:font-size="{ ParamProps.Font.Size }"
			  hmi-bind:fill="{{ Converter.RGBA( HmiProps.ForeColor) }}"
        hmi-bind:font-family="{ ParamProps.Font.Name }">
        <hmi:text hmi-bind:value="{  HmiProps.NodeIP }" />
      </text>
      <text
        id="displayTypeText"
			  hmi-bind:x="{ LocalProps.PosX }"
			  hmi-bind:y="{{LocalProps.HeightReservedForName + 65}}"
			  hmi-bind:font-size="{ ParamProps.Font.Size }"
			  hmi-bind:fill="{{ Converter.RGBA(  HmiProps.ForeColor) }}"
        hmi-bind:font-family="{ ParamProps.Font.Name }">
        <hmi:text hmi-bind:value="{ LocalProps.DisplayType }" />
      </text>
      <g id="grpNavigationIndicator" hmi:if="{{ ne(HmiProps.NavigationIndicator,'')}}" >
        <svg width="24" 
             height="24" 
             viewBox="0 0 24 24" 
             hmi-bind:x="{{ Layout.ActualWidth -28}}" 	
             hmi-bind:y="{{ LocalProps.HeightReservedForName + 50 }}">
          <image hmi-bind--xlink:href="{ HmiProps.NavigationIndicator }"  />
        </svg>
      </g>
      <g id="OperatingStateMatrixView" hmi:if="{HmiProps.OperatingState !=''}" >
        <svg x="8"
            	hmi-bind:y="{{LocalProps.HeightReservedForName + 50}}"
            width="20"
            height="20">
          <image hmi-bind--xlink:href="{ HmiProps.OperatingState }"
                  x="0"
                  y="0"
                  width="20"
                  height="20" />
        </svg>
      </g>
    </g>
  </g>
  <g hmi:if="{{eq(HmiProps.SpacePaddingItem ,true)}}" >
    <rect hmi-bind:height="{ Layout.ActualHeight }"
        hmi-bind:width="{ Layout.ActualWidth }"
        hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor) }}"
        hmi-bind:stroke="{{ Converter.RGBA( HmiProps.BorderColor) }}"
        hmi-bind:stroke-width="{ ParamProps.TileBorderWidth }"/>
  </g>
</svg><!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2022. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
               xmlns:hmi="http://svg.siemens.com/hmi/"
               xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
               xmlns:hmi-data-bind="http://svg.siemens.com/hmi/data/bind/"
               xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
               xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
               height="10" width="10" >
  <hmi:self type="system:HmiDataCellSystemPart" displayName="DataCell" name="datacell" version="1.0.0" performanceClass="s">
    <hmi:data type="cell-view"></hmi:data>
    <hmi:paramDef name="Padding"      type="HmiPaddingPart" />
  </hmi:self>

  <defs>
    <hmi:localDef name="Text"                    type="string"                   hmi-data-bind:value="{ Content.Data }" />
    <hmi:localDef name="TextColor"               type="string"                   hmi-data-bind:value="{ Colors.Fore }" />
    <hmi:localDef name="IsMultiLine"             type="boolean"                  hmi-data-bind:value="{ Content.IsMultiLine }" />
    <hmi:localDef name="HorizontalTextAlignment" type="HmiHorizontalAlignment"   hmi-bind:value="{ HmiProps.Content.HorizontalTextAlignment }" />
    <hmi:localDef name="VerticalTextAlignment"   type="HmiVerticalAlignment"     hmi-bind:value="{ HmiProps.Content.VerticalTextAlignment }" />
    <hmi:localDef name="TextTrimming"            type="HmiTextTrimming"          hmi-bind:value="{ HmiProps.Content.TextTrimming }" />
    <hmi:localDef name="InteriorWidth"           type="number"                   hmi-bind:value="{{ HmiProps.Width - ParamProps.Padding.Right - ParamProps.Padding.Left }}" />
    <hmi:localDef name="InteriorHeight"          type="number"                   hmi-bind:value="{{ HmiProps.Height - ParamProps.Padding.Bottom }}" />

    
    <hmi:localDef name="TextHeightFontSize"      type="number"                   hmi-bind:value="{ HmiProps.Font.Size }" />

    <!-- x, y and baseline position of the text-->
    <hmi:localDef name="TextAnchorX"             type="string"                   hmi-bind:value="{{ LocalProps.HorizontalTextAlignment == HmiHorizontalAlignment.Center ? 'middle' : LocalProps.HorizontalTextAlignment == HmiHorizontalAlignment.Left ? 'start' : 'end' }}" />
    <hmi:localDef name="TextAnchorY"             type="string"                   hmi-bind:value="{{ LocalProps.VerticalTextAlignment == HmiVerticalAlignment.Center ? 'middle' : LocalProps.VerticalTextAlignment == HmiVerticalAlignment.Top ? 'start' : 'end' }}" />

  </defs>
  <g  opacity="1">
    <rect id="TIFID_ItemBGRect2"
                    x="0"
                    y="0"
                   hmi-bind:width="{ HmiProps.Width }"
                   hmi-bind:height="{ HmiProps.Height }"
                   hmi-data-bind:fill="{{ Converter.RGBA( Colors.Back ) }}"
                   stroke-width="1"/>

    <g id="TextGroup" hmi:if="{{ not(LocalProps.IsMultiLine) }}">
      <text id="TextText"
             hmi-bind:x="{{ floor( (LocalProps.TextAnchorX == 'start' ? ParamProps.Padding.Left : LocalProps.TextAnchorX == 'middle' ? (LocalProps.InteriorWidth / 2) :  HmiProps.Width - ParamProps.Padding.Right ) ) }}"
             hmi-bind:y="{{ floor( (LocalProps.TextAnchorY == 'start' ? ( LocalProps.TextHeightFontSize + ParamProps.Padding.Top )
                                                                : LocalProps.TextAnchorY == 'middle' ? ( ( LocalProps.InteriorHeight + LocalProps.TextHeightFontSize * 0.65 ) / 2 )
                                                                                                     : ( LocalProps.InteriorHeight - LocalProps.TextHeightFontSize * 0.20 - 2     )  ) ) }}"
             hmi-bind:fill="{{ Converter.RGBA( LocalProps.TextColor ) }}"
             hmi-bind:font-size="{ HmiProps.Font.Size }"
             hmi-bind:font-style="{{ HmiProps.Font.Italic ? 'italic' : 'normal' }}"
             hmi-bind:font-weight="{ HmiProps.Font.Weight }"
             hmi-bind:font-family="{ HmiProps.Font.Name }"
             hmi-bind:text-decoration="{{ Converter.TextDecoration( HmiProps.Font ) }}"
             hmi-bind:text-anchor="{ LocalProps.TextAnchorX }" >

        <hmi:text hmi-bind:value="{{ LocalProps.TextTrimming == HmiTextTrimming.None ? LocalProps.Text : Converter.TextEllipsis( LocalProps.Text, LocalProps.InteriorWidth, HmiProps.Font ) }}" />
      </text>
    </g>
    <g  hmi:if="{ LocalProps.IsMultiLine }">
      <hmi-element:textField
          hmi-bind:padding="{{ Converter.FormatPattern( ParamProps.Padding.Left, '{I}') + ' ' + Converter.FormatPattern( ParamProps.Padding.Top, '{I}') + ' ' + Converter.FormatPattern( ParamProps.Padding.Right, '{I}') +' ' + Converter.FormatPattern( ParamProps.Padding.Bottom, '{I}') }}"
          hmi-bind:width="{ HmiProps.Width }"
          hmi-bind:height="{ HmiProps.Height }"
          hmi-bind:value="{{ LocalProps.TextTrimming == HmiTextTrimming.None ? LocalProps.Text : Converter.TextEllipsis( LocalProps.Text, HmiProps.Width, HmiProps.Font ) }}"
          hmi-bind:fore-color="{{ Converter.RGBA( LocalProps.TextColor ) }}"
          hmi-bind:horizontal-text-alignment="{ LocalProps.HorizontalTextAlignment }"
          hmi-bind:vertical-text-alignment="{ LocalProps.VerticalTextAlignment }"
          read-only="true"
          multi-line="true"
          hmi-bind:text-trimming="{ LocalProps.TextTrimming }"
          horizontal-scrollbar-visibility="collapsed"
          vertical-scrollbar-visibility="collapsed">
        <hmi-feature:font hmi-bind:scope="{ HmiProps.Font }" />
      </hmi-element:textField>
    </g>

  </g>
</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     overflow="visible">

    <hmi:self type="custom" displayName="Custom Flat Peak Indicator Part" name="custom.flat.peakindicator.part" version="1.0.1" performanceClass="L">

        <hmi:paramDef name="IndicatorOffset"	type="number" />
        <hmi:paramDef name="ScaleOrientation"   type="HmiOrientation" />
        <hmi:paramDef name="IndicatorForeColor" type="HmiColor" />

    </hmi:self>

    <defs>
    </defs>

    <g id="PeakValueIndicator"
       hmi-bind:transform="translate({{ ParamProps.ScaleOrientation == HmiOrientation.Horizontal ? 9 : ParamProps.IndicatorOffset }},{{ ParamProps.ScaleOrientation == HmiOrientation.Horizontal ? ParamProps.IndicatorOffset : 0 }}) rotate({{ ParamProps.ScaleOrientation == HmiOrientation.Horizontal ? 90 : 0 }})">
        <path d="M 0,0 l 11,4.5 l -11,4.5 z"
              hmi-bind:fill="{{ Converter.RGBA( ParamProps.IndicatorForeColor ) }}" />
    </g>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2022. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg" xmlns:hmi="http://svg.siemens.com/hmi/"
    xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
    xmlns:hmi-types="http://svg.siemens.com/hmi/types/"
    xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/"
    xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
    xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
    xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/">

  <hmi:self type="part:HmiDynamicPropertyPart" name="include.style.flat.plccodeviewersymbolline" displayName="Symbol line" >
    <hmi:paramDef name="FocusColor"                 type="HmiColor"/>
    <hmi:paramDef name="ForeColor"                  type="HmiColor"/>
    <hmi:paramDef name="BackColor"                  type="HmiColor"/>
    <hmi:paramDef name="Font"                       type="HmiFontPart"/>
    <hmi:paramDef name="Width"                      type="number"/>
    <hmi:paramDef name="Height"                     type="number"/>
  </hmi:self>
  <defs>
    <hmi:localDef name="PropNameText"                   type="string"         value="Text"/>
    <hmi:localDef name="PropNameBorderColor"            type="string"         value="BorderColor" />
    <hmi:localDef name="PropNameBorderWidth"            type="string"         value="BorderWidth" />
    <hmi:localDef name="PropNameBackColor"              type="string"         value="BackColor" />
    <hmi:localDef name="PropNameForeColor"              type="string"         value="ForeColor" />
    <hmi:localDef name="PropNameWidth"                  type="string"         value="Width" />
  </defs>
  <g id="ElementsGroup" >
    <rect
        y="0"
        hmi-bind:height="{{ Layout.ActualHeight }}"
        hmi-bind:width="{{ Layout.ActualWidth }}"
        hmi-bind:fill="{{ Converter.RGBA(ParamProps.BackColor) }}"
        hmi-bind:stroke="{{ Converter.RGBA(Converter.Lighter(ParamProps.BackColor, 0.1)) }}"
        stroke-width="2"
    >
    </rect>
    <hmi-element:listContainer source="1" hmi-bind:width="{ Layout.ActualWidth }" hmi-bind:height="{ Layout.ActualHeight }">
      <hmi-feature:properties>
        <hmi-feature:select hmi-bind:name="{ LocalProps.PropNameText }"             as="Text" />
        <hmi-feature:select hmi-bind:name="{ LocalProps.PropNameBorderColor }"      as="BorderColor" />
        <hmi-feature:select hmi-bind:name="{ LocalProps.PropNameWidth }"            as="Width" />
      </hmi-feature:properties>
      <hmi:master-inline>
        <hmi:param name="Font"              type="HmiFontPart"     hmi-bind:value="{ ParamProps.Font }" />
        <hmi:param name="ForeColor"         type="HmiColor"        hmi-bind:value="{ ParamProps.ForeColor }" />
        <hmi:param name="BackColor"         type="HmiColor"        hmi-bind:value="{ ParamProps.BackColor }"/>
        <hmi:param name="FocusColor"        type="HmiColor"        hmi-bind:value="{ ParamProps.FocusColor }"/>
        <hmi:param name="Height"            type="number"          hmi-bind:value="{ ParamProps.Height }"/>
        <hmi:template>
          <svg id="TIFID_List_Symbol_Line" data-tif-type="WSI:SymbolLine"
              xmlns="http://www.w3.org/2000/svg" xmlns:hmi="http://svg.siemens.com/hmi/"
              xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
              xmlns:hmi-types="http://svg.siemens.com/hmi/types/"
              xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/" overflow="visible">
            <hmi:self type="system:HmiListContainerSystemPart" name="lc-master" displayName="Content of the ListContainer master" >
              <hmi:paramDef name="Font"             type="HmiFontPart"  />
              <hmi:paramDef name="ForeColor"        type="HmiColor"     />
              <hmi:paramDef name="BackColor"        type="HmiColor"     />
              <hmi:paramDef name="FocusColor"       type="HmiColor"     />
              <hmi:paramDef name="Height"           type="number"       />
            </hmi:self>
            <hmi:inline hmi-bind:forEach="{ HmiProps.List }" x="0" y="0" hmi-flex:width="{ Layout.ActualWidth }" hmi-flex:direction="row" hmi-flex:wrap="false">
              <hmi:param name="Font"                type="HmiFontPart"      hmi-bind:value="{ ParamProps.Font }" />
              <hmi:param name="FocusColor"          type="HmiColor"         hmi-bind:value="{ ParamProps.FocusColor }"/>
              <hmi:param name="ForeColor"           type="HmiColor"         hmi-bind:value="{ ParamProps.ForeColor }" />
              <hmi:param name="BackColor"           type="HmiColor"         hmi-bind:value="{ ParamProps.BackColor }"/>
              <hmi:param name="SelectedIndex"       type="number"           hmi-bind:value="{ HmiProps.SelectedIndex }" />
              <hmi:param name="Height"              type="number"           hmi-bind:value="{ ParamProps.Height }"/>
              <hmi:template>
                <svg id="TIFID_List_Symbol_Line_Content" data-tif-type="WSI:SymbolLineContent"
                      xmlns="http://www.w3.org/2000/svg" xmlns:hmi="http://svg.siemens.com/hmi/"
                      xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                      xmlns:hmi-types="http://svg.siemens.com/hmi/types/"
                      xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/"
                      xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
                      hmi-flex:minHeight="{ParamProps.Height}"
                      hmi-flex:grow="{HmiProps.Width}"
                      hmi-flex:shrink="{{ 3 - HmiProps.Width}}"
                >
                  <hmi:self type="part:HmiDynamicPropertyPart" name="lc-master" displayName="Content of the ListContainer master" >
                    <hmi:paramDef name="Font"             type="HmiFontPart" />
                    <hmi:paramDef name="FocusColor"       type="HmiColor" />
                    <hmi:paramDef name="ForeColor"        type="HmiColor" />
                    <hmi:paramDef name="BackColor"        type="HmiColor"  />
                    <hmi:paramDef name="GridLineColor"    type="HmiColor"  />
                    <hmi:paramDef name="SelectedIndex"    type="number"  two-way="true" />
                    <hmi:paramDef name="Height"           type="number"  />
                  </hmi:self>
                  <defs>
                    <hmi:localDef name="TextStartX"         type="number"      hmi-bind:value="{{10}}"  />
                    <hmi:localDef name="TextStartY"         type="number"      hmi-bind:value="{{ (Layout.ActualHeight - ParamProps.Font.Size) / 2 + ParamProps.Font.Size / 2 }}"  />
                    <hmi:localDef name="BackColor"          type="HmiColor"    hmi-bind:value="{ ParamProps.BackColor }" />
                    <hmi:localDef name="ForeColor"          type="HmiColor"    hmi-bind:value="{ ParamProps.ForeColor }" />
                    <hmi:localDef name="TextWidth" type="number" hmi-bind:value="{{ Layout.ActualWidth - 20 }}" />
                    <hmi:localDef name="CurrentText" type="string" hmi-bind:value="{{ Converter.TextEllipsis(HmiProps.Text, LocalProps.TextWidth, ParamProps.Font ) }}" />
                    <hmi:action id="onMouseEnter">
                        <hmi:sendCommand name="SHOW_TOOLTIP" type="string" hmi-bind:value="{{ HmiProps.Text }}" hmi-bind:condition="{{ gt(Converter.TextWidth(HmiProps.Text, ParamProps.Font), (LocalProps.TextWidth)) }}" />
                    </hmi:action>
                    <hmi:action id="onMouseLeave">
                        <hmi:sendCommand name="HIDE_TOOLTIP" />
                    </hmi:action>
                  </defs>
                  <text
                    hmi-event:mouseEnter="url(#onMouseEnter)"
                    hmi-event:mouseLeave="url(#onMouseLeave)"
                    hmi-bind:fill="{{ Converter.RGBA(LocalProps.ForeColor) }}"
                    hmi-bind:font-size="{ ParamProps.Font.Size }"
                    hmi-bind:font-weight="{ ParamProps.Font.Weight }"
                    hmi-bind:font-family="{ ParamProps.Font.Name }"
                    hmi-bind:x="{ LocalProps.TextStartX }"
                    hmi-bind:y="{ LocalProps.TextStartY }"
                    dominant-baseline="middle"
                  >
                    <hmi:text hmi-bind:value="{ LocalProps.CurrentText }" />
                  </text>
                </svg>
              </hmi:template>
            </hmi:inline>
          </svg>
        </hmi:template>
      </hmi:master-inline>
    </hmi-element:listContainer>
  </g>
</svg><!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2022. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
  xmlns:hmi-types="http://svg.siemens.com/hmi/types/"
  xmlns:hmi="http://svg.siemens.com/hmi/"
  xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
  xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
  xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
  xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
  xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/">
  
  <hmi:self type="part:HmiDynamicPropertyPart" name="style.flat.processdiagnosisoverviewcontroltiles" displayName="Include ProcessDiagnosisOverviewControlTiles" >
  <hmi:paramDef name="Font"                       type="HmiFontPart"/>
  <hmi:paramDef name="ListContainerSource"        type="number"/>
  <hmi:paramDef name="Width"                      type="number"/>
  <hmi:paramDef name="TileWidth"                  type="number"/>
  </hmi:self>
  <defs>
    <hmi:localDef name="PropNameText"                   type="string"         value="Text"/>
    <hmi:localDef name="PropNameBackColor"              type="string"         value="BackColor" />
    <hmi:localDef name="PropNameForeColor"              type="string"         value="ForeColor" />
  </defs>
  <g id="ElementsGroup" >
    <hmi-element:listContainer hmi-bind:source="{ParamProps.ListContainerSource}" hmi-bind:width="{ ParamProps.Width }"  hmi-bind:height="{ Layout.ActualHeight }">
      <hmi-feature:properties>
        <hmi-feature:select hmi-bind:name="{ LocalProps.PropNameText }"                     as="Text" />
        <hmi-feature:select hmi-bind:name="{ LocalProps.PropNameBackColor }"                as="BackColor" />
        <hmi-feature:select hmi-bind:name="{ LocalProps.PropNameForeColor }"                as="ForeColor" />
      </hmi-feature:properties>
      <hmi:master-inline>
        <hmi:param name="Font"              type="HmiFontPart"     hmi-bind:value="{ ParamProps.Font }" />
        <hmi:param name="Width"             type="number"          hmi-bind:value="{ ParamProps.Width }" />
        <hmi:param name="TileWidth"         type="number"          hmi-bind:value="{ ParamProps.TileWidth }"/>
        <hmi:template>
          <svg id="TIFID_List_Tiles_Data" data-tif-type="WSI:TileData" xmlns="http://www.w3.org/2000/svg" xmlns:hmi="http://svg.siemens.com/hmi/"
            xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/" xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/"
            xmlns:hmi-types="http://svg.siemens.com/hmi/types/"						overflow="visible"> 
              <hmi:self type="part:HmiListContainerSystemPart" name="lc-master" displayName="Content of the ListContainer master" >
                <hmi:paramDef name="Font"               type="HmiFontPart"  />
                <hmi:paramDef name="Width"              type="number" />
                <hmi:paramDef name="TileWidth"          type="number"/>
              </hmi:self>
              <defs>
                <hmi:localDef name="TileMinHeight"             type="number"     value="30"   />
                <hmi:localDef name="TileMaxWidth"              type="number"     value="100"  />
                <hmi:localDef name="TileMaxHeight"             type="number"     value="100"   />
              </defs>

              <hmi:include template="include.style.flat.controltiles.svghmi"
                        x="0" y="0"
                        hmi-flex:justifyContent="start"
                        hmi-flex:width="{ ParamProps.Width }"
                        hmi-flex:height="{ Layout.ActualHeight }"
                        hmi-bind:forEach="{ HmiProps.List }" hmi-flex:direction="row"  hmi-flex:wrap="false">

                  <hmi:param name="TileMinHeight"    type="number"          hmi-bind:value="{ LocalProps.TileMinHeight }"    />
                  <hmi:param name="TileMaxWidth"     type="number"          hmi-bind:value="{ LocalProps.TileMaxWidth }"    />
                  <hmi:param name="TileMaxHeight"    type="number"          hmi-bind:value="{ LocalProps.TileMaxHeight }"    />
                  <hmi:param name="Font"             type="HmiFontPart"     hmi-bind:value="{ ParamProps.Font }" />
                  <hmi:param name="Width"            type="number"          hmi-bind:value="{ ParamProps.Width }" />
                  <hmi:param name="TileWidth"        type="number"          hmi-bind:value="{ ParamProps.TileWidth }" />
              </hmi:include>
          </svg>
        </hmi:template>
      </hmi:master-inline>
    </hmi-element:listContainer>
  </g>
</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     preserveAspectRatio="none">

    <hmi:self type="part:HmiSelectionItemPart" displayName="Custom Flat RadioButton Part" name="flat.custom.radiobutton.part" version="1.0.1" performanceClass="L">

        <hmi:paramDef name="ItemOperable"               type="boolean"          />
        <hmi:paramDef name="ForeColor"                  type="HmiColor"         />
        <hmi:paramDef name="BackColor"                  type="HmiColor"         />
        <hmi:paramDef name="BorderColor"                type="HmiColor"         />
        <hmi:paramDef name="FocusColor"                 type="HmiColor"         />
        <hmi:paramDef name="BorderWidth"                type="number"           />
        <hmi:paramDef name="Content"                    type="HmiContentPart"   />
        <hmi:paramDef name="Font"                       type="HmiFontPart"      />
        <hmi:paramDef name="SelectorPosition"           type="number"           />
        <hmi:paramDef name="SelectionItemHeight"        type="number"           />
        <hmi:paramDef name="ShowFocusVisual"            type="boolean"          />
        <hmi:paramDef name="SelectionItemDefaultHeight" type="number"           />
    </hmi:self>

    <defs>
        <!-- Local definitions of this template -->

        <hmi:localDef name="ColorAlphaMask"         type="number" value="0x01000000" />
        <hmi:localDef name="HoverAlpha"             type="number" value="0xC0000000" />
        <hmi:localDef name="DisabledAlpha"          type="number" value="0x40000000" />
        <hmi:localDef name="DisabledContentAlpha"   type="number" value="0x80000000" />

        <hmi:localDef name="MouseHover"             type="number" value="0" />
        <hmi:localDef name="InnerPadding"           type="number" hmi-bind:value="{{ floor( ParamProps.SelectionItemHeight * 0.2 ) }}" />

        <!-- Take the SelctionItemHeight also for the SelctionItemWidth -->
    	<hmi:localDef name="IsItemTextMultiline"    type="boolean" hmi-bind:value="{{Converter.IsMultiline(HmiProps.Text)}}"/>
    	<hmi:localDef name="CheckBoxAreaWidth"      type="number" hmi-bind:value="{{ ParamProps.SelectionItemHeight - 2 * LocalProps.InnerPadding }}" />
        <hmi:localDef name="CheckBoxAreaHeight"     type="number" hmi-bind:value="{{ ParamProps.SelectionItemHeight - 2 * LocalProps.InnerPadding }}" />
        <hmi:localDef name="CheckBoxPosX"           type="number" hmi-bind:value="{{ ParamProps.SelectorPosition == HmiHorizontalAlignment.Left ? 0 : Layout.ActualWidth - LocalProps.CheckBoxAreaWidth - 2 * LocalProps.InnerPadding }}" />

        <hmi:localDef name="ContentAreaWidth"       type="number" hmi-bind:value="{{ Layout.ActualWidth - LocalProps.CheckBoxAreaWidth - 3 * LocalProps.InnerPadding }}" />
        <hmi:localDef name="ContentPosX"            type="number" hmi-bind:value="{{ ParamProps.SelectorPosition != HmiHorizontalAlignment.Left ? LocalProps.InnerPadding : Layout.ActualWidth - LocalProps.ContentAreaWidth - LocalProps.InnerPadding }}" />

        <hmi:localDef name="ContentTextColor" type="HmiColor" hmi-bind:value="{{ ParamProps.ItemOperable ? ParamProps.ForeColor : ParamProps.ForeColor % LocalProps.ColorAlphaMask + LocalProps.DisabledContentAlpha }}" />
        <hmi:localDef name="BorderColor"      type="HmiColor" hmi-bind:value="{{ ParamProps.ItemOperable ? ( LocalProps.MouseHover ? ParamProps.BorderColor % LocalProps.ColorAlphaMask + LocalProps.HoverAlpha  : ParamProps.BorderColor ) : ParamProps.BorderColor % LocalProps.ColorAlphaMask + LocalProps.DisabledAlpha }}" />
        <hmi:localDef name="BackColor"        type="HmiColor" hmi-bind:value="{{ ParamProps.ItemOperable ? (LocalProps.MouseHover ? ParamProps.BackColor % LocalProps.ColorAlphaMask + LocalProps.HoverAlpha : ParamProps.BackColor) : ParamProps.BackColor % LocalProps.ColorAlphaMask + LocalProps.DisabledAlpha }}" />
        <hmi:localDef name="CheckColor"       type="HmiColor" hmi-bind:value="{{ ParamProps.ItemOperable ? ParamProps.FocusColor : ParamProps.FocusColor % LocalProps.ColorAlphaMask + LocalProps.DisabledAlpha }}" />

        <!-- Action definitions of this template -->
        <hmi:action id="onMouseHover" hmi-bind:condition="{ ParamProps.ItemOperable }" >
            <hmi:setProperty name="LocalProps.MouseHover" type="number" value="1" />
        </hmi:action>
        <hmi:action id="onMouseDown" hmi-bind:condition="{ ParamProps.ItemOperable }" >
            <hmi:setProperty name="LocalProps.MouseHover" type="number" value="0" />
        </hmi:action>
        <hmi:action id="onMouseUp" hmi-bind:condition="{ ParamProps.ItemOperable }" >
            <hmi:setProperty name="LocalProps.MouseHover" type="number" value="1" />
        </hmi:action>
        <hmi:action id="onMouseTapped" hmi-bind:condition="{ ParamProps.ItemOperable }" >
            <hmi:setProperty name="HmiProps.IsSelected" type="boolean" value="true" hmi-bind:condition="{{ or( EventArgs.Trigger==HmiEventTrigger.Left, EventArgs.Trigger==HmiEventTrigger.Touch ) }}" />
        </hmi:action>
        <hmi:action id="onMouseLeave" hmi-bind:condition="{ ParamProps.ItemOperable }" >
            <hmi:setProperty name="LocalProps.MouseHover" type="number" value="0" />
        </hmi:action>

    </defs>

    <g hmi-bind:transform="translate(0, {{ HmiProps.$index * ParamProps.SelectionItemHeight }} )">

        <g id="CheckBox" hmi-bind:transform="translate( { LocalProps.CheckBoxPosX } ,0)" hmi-bind:opacity="{{ ParamProps.ItemOperable ? 1.0 : 0.5 }}">

            <circle id="RadioBox"
                    hmi-bind:cx="{{ LocalProps.InnerPadding + LocalProps.CheckBoxAreaWidth * 0.5 }}"
                    hmi-bind:cy="{{ LocalProps.InnerPadding + LocalProps.CheckBoxAreaHeight * 0.5 }}"
                    hmi-bind:r="{{ LocalProps.CheckBoxAreaWidth * 0.5 }}"
                    hmi-bind:fill="{{ Converter.RGBA( LocalProps.BackColor ) }}"
                    hmi-bind:stroke="{{ Converter.RGBA( LocalProps.BorderColor ) }}"
                    hmi-bind:stroke-width="{ ParamProps.BorderWidth }" />

            <g id="CheckMark" hmi:if="{{ HmiProps.IsSelected }}">
                <circle hmi-bind:cx="{{ LocalProps.InnerPadding + LocalProps.CheckBoxAreaWidth * 0.5 }}"
                        hmi-bind:cy="{{ LocalProps.InnerPadding + LocalProps.CheckBoxAreaHeight * 0.5 }}"
                        hmi-bind:r="{{ LocalProps.CheckBoxAreaWidth * 0.25 }}"
                        hmi-bind:fill="{{ Converter.RGBA( LocalProps.CheckColor ) }}"
                        stroke-width="0" />
            </g>
        </g>

        <hmi:include template="include.style.flat.content.svghmi" hmi-bind:for="{ ParamProps.Content }"
                     hmi-bind:x="{ LocalProps.ContentPosX }"
                     hmi-bind:y="{{ and(LocalProps.IsItemTextMultiline, ParamProps.SelectionItemDefaultHeight == 0) ?  LocalProps.InnerPadding / 2 : LocalProps.InnerPadding }}"
                     hmi-bind:width="{ LocalProps.ContentAreaWidth }"
                     hmi-bind:height="{{ and(LocalProps.IsItemTextMultiline, ParamProps.SelectionItemDefaultHeight == 0)  ? LocalProps.CheckBoxAreaHeight + LocalProps.InnerPadding : LocalProps.CheckBoxAreaHeight }}">

            <hmi:param name="Graphic"       type="HmiGraphic"  hmi-bind:value="{ HmiProps.Graphic }" />
            <hmi:param name="GraphicWidth"  type="number"      hmi-bind:value="{ HmiProps.GraphicWidth }" />
            <hmi:param name="GraphicHeight" type="number"      hmi-bind:value="{ HmiProps.GraphicHeight }" />
            <hmi:param name="Text"          type="string"      hmi-bind:value="{ HmiProps.Text }" />
            <hmi:param name="Font"          type="HmiFontPart" hmi-bind:value="{ ParamProps.Font }" />
            <hmi:param name="TextColor"     type="HmiColor"    hmi-bind:value="{ LocalProps.ContentTextColor }" />

        </hmi:include>

        <rect id="ItemFocusRect" hmi-bind:visibility="{{ and( ParamProps.ShowFocusVisual, SysProps.HasFocus ) ? 'visible' : 'hidden' }}"
            hmi-bind:x="{{ LocalProps.InnerPadding - 2 }}"
            hmi-bind:y="{{ LocalProps.InnerPadding - 2 }}"
            hmi-bind:width="{{ LocalProps.ContentAreaWidth + LocalProps.ContentPosX }}"
            hmi-bind:height="{{ LocalProps.CheckBoxAreaHeight + 4 }}"
            hmi-bind:stroke="{{ Converter.RGBA( ParamProps.FocusColor ) }}"
            stroke-width="2"
            fill="none"
            />

        <rect id="TIFID_SelectionItemRect" hmi-event:mouseHover="url(#onMouseHover)" hmi-event:down="url(#onMouseDown)" hmi-event:up="url(#onMouseUp)" hmi-event:tapped="url(#onMouseTapped)" hmi-event:mouseLeave="url(#onMouseLeave)"
              hmi-bind:width="{ Layout.ActualWidth }"
              hmi-bind:height="{ ParamProps.SelectionItemHeight }"
              stroke="none"
              fill="rgba(123,123,123,0)" />

    </g>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
               xmlns:hmi="http://svg.siemens.com/hmi/"
               xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
               xmlns:hmi-data-bind="http://svg.siemens.com/hmi/data/bind/"
               height="10" width="10" >
  <hmi:self type="system:HmiBackgroundSystemPart" displayName="RowBackGround" name="rowbackground" version="1.0.0" performanceClass="s">

  </hmi:self>
  <g  opacity="1">
    <rect id="ItemBGRect2"
                    x="0"
                    y="0"
                   hmi-bind:width="{ HmiProps.Width}"
                   hmi-bind:height="{ HmiProps.Height }"
                   hmi-bind:fill="{{ Converter.RGBA( HmiProps.Color ) }}"/>
  </g>
</svg><!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"

     preserveAspectRatio="none">

    <hmi:self type="system:HmiScrollBarSystemPart" displayName="ScrollBar Flat System Part" name="custom.flat.system.part" version="1.0.1" performanceClass="L" />

    <defs>
        <!-- Scrollbar related -->
        <hmi:localDef name="PaddingElements"            type="number"  value="0" />
        <hmi:localDef name="ThicknessMin"               type="number"  value="0" />
        <hmi:localDef name="ThicknessIndicatorDefault"  type="number"  value="4" />
        <hmi:localDef name="IndicatorYOffsetDefault"    type="number"  value="4" />

        <!-- Button related -->
        <hmi:localDef name="ButtonSizeDefault"          type="number"  value="25" />
        <hmi:localDef name="ButtonPressedColor"         type="string"  value="DeepSkyBlue" />

        <!-- Thumb related -->
        <hmi:localDef name="ThumbSizeMin"               type="number"  value="8" />
        <!-- END: Hard-coded some values for extended style -->

        <!-- section: Ui-Property definitions -->
        <hmi:localDef name="ButtonLowerPressed"         type="boolean" value="false" />
        <hmi:localDef name="ButtonUpperPressed"         type="boolean" value="false" />
        <hmi:localDef name="TrackLowerPressed"          type="boolean" value="false" />
        <hmi:localDef name="TrackUpperPressed"          type="boolean" value="false" />
		<hmi:localDef name="Pressed"                    type="boolean" value="false" />
		<hmi:localDef name="MouseLeftBar"               type="boolean" value="true" />
        <hmi:localDef name="ThumbHover"                 type="boolean" value="false" />
        <hmi:localDef name="ThumbMove"                  type="boolean" value="false" />
		<hmi:localDef name="TempX"                      type="number"  value="0" />
		<hmi:localDef name="TempY"                      type="number"  value="0" />
        <hmi:localDef name="IsIndicator"                type="boolean" value="false" />

        <hmi:localDef name="BackColor"                  type="string" hmi-bind:value="{{ Converter.RGBA( HmiProps.BackColor ) }}" />
        <hmi:localDef name="ThumbBackColor"             type="string" hmi-bind:value="{{ Converter.RGBA( HmiProps.ThumbBackColor ) }}" />
        <hmi:localDef name="Width"                      type="number" hmi-bind:value="{{ eq( HmiProps.Orientation, HmiOrientation.Vertical ) ? Converter.Bounds( HmiProps.Height, 0, HmiProps.Height ) : Converter.Bounds( HmiProps.Width, 0, HmiProps.Width ) }}" />
        <hmi:localDef name="Height"                     type="number" hmi-bind:value="{{ eq( HmiProps.Orientation, HmiOrientation.Vertical ) ? Converter.Bounds( HmiProps.Width, 0, HmiProps.Width ) : Converter.Bounds( HmiProps.Height, 0, HmiProps.Height ) }}" />

        <hmi:localDef name="ButtonLowerCurrentColor"    type="string" hmi-bind:value="{{ LocalProps.ButtonLowerPressed ? LocalProps.ButtonPressedColor : LocalProps.ThumbBackColor }}" />
        <hmi:localDef name="ButtonUpperCurrentColor"    type="string" hmi-bind:value="{{ LocalProps.ButtonUpperPressed ? LocalProps.ButtonPressedColor : LocalProps.ThumbBackColor }}" />

        <hmi:localDef name="Direction"                  type="number" hmi-bind:value="{{ ge( HmiProps.EndValue, HmiProps.BeginValue ) ? 1 : -1 }}" />
        <hmi:localDef name="EndValueNormed"             type="number" hmi-bind:value="{{ eq( LocalProps.Direction, 1 ) ?
                                                                                           ( gt( HmiProps.EndValue - HmiProps.VisibleValueRange, HmiProps.BeginValue ) ? HmiProps.EndValue - HmiProps.VisibleValueRange : HmiProps.BeginValue ) :
                                                                                           ( lt( HmiProps.EndValue + HmiProps.VisibleValueRange, HmiProps.BeginValue ) ? HmiProps.EndValue + HmiProps.VisibleValueRange : HmiProps.BeginValue ) }}" />
        <hmi:localDef name="MaxValue"                   type="number" hmi-bind:value="{{ ge( LocalProps.EndValueNormed, HmiProps.BeginValue ) ? LocalProps.EndValueNormed : HmiProps.BeginValue }}" />
        <hmi:localDef name="MinValue"                   type="number" hmi-bind:value="{{ ge( LocalProps.EndValueNormed, HmiProps.BeginValue ) ? HmiProps.BeginValue : LocalProps.EndValueNormed }}" />
        <hmi:localDef name="ContentWidth"               type="number" hmi-bind:value="{{ ge( HmiProps.EndValue, HmiProps.BeginValue ) ? HmiProps.EndValue - HmiProps.BeginValue : HmiProps.BeginValue - HmiProps.EndValue }}" />
        <hmi:localDef name="ContentWidthNormed"         type="number" hmi-bind:value="{{ le( LocalProps.ContentWidth, 0 ) ? 1 : LocalProps.ContentWidth }}" />
        <hmi:localDef name="VisibleToContentRelation"   type="number" hmi-bind:value="{{ gt( LocalProps.ContentWidthNormed, HmiProps.VisibleValueRange ) ? ( HmiProps.VisibleValueRange / LocalProps.ContentWidthNormed ) : 1 }}" />
        <hmi:localDef name="CurrentValueNormed"         type="number" hmi-bind:value="{{ Converter.Bounds( HmiProps.CurrentValue, LocalProps.MinValue, LocalProps.MaxValue ) }}" />
        <hmi:localDef name="CurrentValueRelative"       type="number" hmi-bind:value="{{ ge( HmiProps.EndValue, HmiProps.BeginValue ) ? ( LocalProps.CurrentValueNormed - HmiProps.BeginValue ) / LocalProps.EndValueNormed : ( HmiProps.BeginValue - LocalProps.CurrentValueNormed ) / LocalProps.ContentWidthNormed }}" />

        <hmi:localDef name="InteriorX"                  type="number" hmi-bind:value="{ LocalProps.PaddingElements }" />
        <hmi:localDef name="InteriorWidth"              type="number" hmi-bind:value="{{  Converter.Max( 0, LocalProps.Width - 2 * ( LocalProps.PaddingElements ) ) }}" />
        <hmi:localDef name="InteriorHeight"             type="number" hmi-bind:value="{{ Converter.Bounds( HmiProps.Thickness, LocalProps.Height, LocalProps.ThicknessMin ) }}" />
        <hmi:localDef name="InteriorY"                  type="number" hmi-bind:value="{{ ( LocalProps.Height - LocalProps.InteriorHeight ) / 2 }}" />
        <hmi:localDef name="IndicatorHeight"            type="number" hmi-bind:value="{{ Converter.Bounds( LocalProps.ThicknessIndicatorDefault, LocalProps.Height, LocalProps.ThicknessMin ) }}" />
        <hmi:localDef name="IndicatorYHori"             type="number" hmi-bind:value="{{ gt( ( LocalProps.Height - LocalProps.IndicatorHeight ) / 2, LocalProps.IndicatorYOffsetDefault ) ? ( LocalProps.Height - LocalProps.IndicatorHeight - LocalProps.IndicatorYOffsetDefault ) : ( ( LocalProps.Height - LocalProps.IndicatorHeight ) / 2 ) }}" />
        <hmi:localDef name="IndicatorYVert"             type="number" hmi-bind:value="{{ gt( ( LocalProps.Height - LocalProps.IndicatorHeight ) / 2, LocalProps.IndicatorYOffsetDefault ) ? LocalProps.IndicatorYOffsetDefault : ( LocalProps.Height - LocalProps.IndicatorHeight ) / 2  }}" />
        <hmi:localDef name="ButtonSize"                 type="number" hmi-bind:value="{{ gt( LocalProps.InteriorWidth, 2 * LocalProps.ButtonSizeDefault + LocalProps.ThumbSizeMin ) ? LocalProps.ButtonSizeDefault : ( LocalProps.InteriorWidth ) / 2  }}" />
        <hmi:localDef name="TrackLengthTotal"           type="number" hmi-bind:value="{{ Converter.Max( 0, LocalProps.InteriorWidth - 2 * LocalProps.ButtonSize ) }}" />
        <hmi:localDef name="TrackLengthTotalDenom"      type="number" hmi-bind:value="{{ gt( LocalProps.TrackLengthTotal, 0 ) ? LocalProps.TrackLengthTotal : 1 }}" />
        <hmi:localDef name="ThumbSize"                  type="number" hmi-bind:value="{{ Converter.Bounds( LocalProps.VisibleToContentRelation * LocalProps.TrackLengthTotal, LocalProps.ThumbSizeMin, LocalProps.TrackLengthTotal ) }}" />
        <hmi:localDef name="TrackLengthThumbDiff"       type="number" hmi-bind:value="{{ gt( ( LocalProps.TrackLengthTotal - LocalProps.ThumbSize ), 0 ) ? ( LocalProps.TrackLengthTotal - LocalProps.ThumbSize ) : 1 }}" />
        <hmi:localDef name="TrackLengthLower"           type="number" hmi-bind:value="{{ Converter.Bounds( LocalProps.CurrentValueRelative * LocalProps.TrackLengthThumbDiff, 0, LocalProps.TrackLengthThumbDiff ) }}" />
        <hmi:localDef name="SmallStepRange"             type="number" hmi-bind:value="{{ HmiProps.SmallStepValueRange ? eq(HmiProps.SmallStepValueRange, 0) ? 10 : HmiProps.SmallStepValueRange : 10  }}" />
        <hmi:localDef name="SmallStep"                  type="number" hmi-bind:value="{{ Converter.Max(LocalProps.TrackLengthThumbDiff / LocalProps.SmallStepRange, 0.05) }}" />
        <hmi:localDef name="BigStep"                    type="number" hmi-bind:value="{{ HmiProps.VisibleValueRange * ( LocalProps.TrackLengthTotalDenom / LocalProps.ContentWidthNormed ) }}" />
        <hmi:localDef name="DragConst"                  type="number" value="1" />

        <!--    section: action definitions     -->

        <!-- actions for lower button -->
        <hmi:action id="buttonLowerDown">
            <hmi:sendCommand name="MOVE_TRIGGERED"                  type="boolean" value="true" />
			      <hmi:setProperty name="LocalProps.TempX"                type="number"  hmi-bind:value="{ EventArgs.X }" />
			      <hmi:setProperty name="LocalProps.TempY"                type="number"  hmi-bind:value="{ EventArgs.Y }" />
            <hmi:setProperty name="LocalProps.ButtonLowerPressed"   type="boolean" value="true" />
			      <hmi:setProperty name="LocalProps.Pressed"              type="boolean" value="true" />
        </hmi:action>

        <hmi:action id="buttonLowerUp">
            <hmi:setProperty name="HmiProps.CurrentValue" type="number"
                             hmi-bind:value="{{ Converter.Bounds( HmiProps.CurrentValue - ( LocalProps.SmallStep * LocalProps.Direction *  ( LocalProps.ContentWidthNormed / LocalProps.TrackLengthThumbDiff ) ), LocalProps.MinValue, LocalProps.MaxValue ) }}"
                             hmi-bind:condition="{ LocalProps.ButtonLowerPressed }" />
            <hmi:setProperty name="LocalProps.ButtonLowerPressed"   type="boolean" value="false" />
			      <hmi:setProperty name="LocalProps.Pressed"              type="boolean" value="false" />
            <hmi:sendCommand name="MOVE_TRIGGERED"                  type="boolean" value="false" />
        </hmi:action>
        <!-- end actions for lower button -->

        <!-- actions for upper button -->
        <hmi:action id="buttonUpperDown">
            <hmi:sendCommand name="MOVE_TRIGGERED"                  type="boolean" value="true" />
			      <hmi:setProperty name="LocalProps.TempX"                type="number"  hmi-bind:value="{ EventArgs.X }" />
			      <hmi:setProperty name="LocalProps.TempY"                type="number"  hmi-bind:value="{ EventArgs.Y }" />
            <hmi:setProperty name="LocalProps.ButtonUpperPressed"   type="boolean" value="true" />
			      <hmi:setProperty name="LocalProps.Pressed"              type="boolean" value="true" />
        </hmi:action>

        <hmi:action id="buttonUpperUp">
            <hmi:setProperty name="HmiProps.CurrentValue" type="number"
                             hmi-bind:value="{{ Converter.Bounds( HmiProps.CurrentValue + ( LocalProps.SmallStep * LocalProps.Direction *  ( LocalProps.ContentWidthNormed / LocalProps.TrackLengthThumbDiff ) ), LocalProps.MinValue, LocalProps.MaxValue ) }}"
                             hmi-bind:condition="{ LocalProps.ButtonUpperPressed }" />
            <hmi:setProperty name="LocalProps.ButtonUpperPressed"   type="boolean" value="false" />
			      <hmi:setProperty name="LocalProps.Pressed"              type="boolean" value="false" />
            <hmi:sendCommand name="MOVE_TRIGGERED"                  type="boolean" value="false" />
        </hmi:action>
        <!-- end actions for upper button -->

        <!-- actions for the thumb -->
        <hmi:action id="thumbEnter">
            <hmi:setProperty name="LocalProps.ThumbHover"   type="boolean" value="false" />
        </hmi:action>

        <hmi:action id="thumbDown">
            <hmi:sendCommand name="MOVE_TRIGGERED"                 type="boolean" value="true" />
			      <hmi:setProperty name="LocalProps.TempX"               type="number"  hmi-bind:value="{ EventArgs.X }" />
			      <hmi:setProperty name="LocalProps.TempY"               type="number"  hmi-bind:value="{ EventArgs.Y }" />
            <hmi:setProperty name="LocalProps.ThumbMove"           type="boolean" value="true" />
			      <hmi:setProperty name="LocalProps.Pressed"             type="boolean" value="true" />
        </hmi:action>

        <hmi:action id="thumbDragged">
            <hmi:setProperty name="HmiProps.CurrentValue" type="number"
                             hmi-bind:value="{{ Converter.Bounds( HmiProps.CurrentValue + ( LocalProps.DragConst * LocalProps.Direction * ( eq( HmiProps.Orientation, HmiOrientation.Horizontal ) ? EventArgs.PanDeltaX : EventArgs.PanDeltaY ) * ( LocalProps.ContentWidthNormed / LocalProps.TrackLengthThumbDiff ) ), LocalProps.MinValue, LocalProps.MaxValue ) }}"
                             hmi-bind:condition="{ LocalProps.ThumbMove }"/>
        </hmi:action>

        <hmi:action id="thumbUp">
            <hmi:setProperty name="LocalProps.ThumbMove"    type="boolean" value="false" />
            <hmi:sendCommand name="MOVE_TRIGGERED"          type="boolean" value="false" />
			      <hmi:setProperty name="LocalProps.Pressed"      type="boolean" value="false" />
        </hmi:action>
        <!-- end actions for the thumb -->

        <!-- actions for lower track piece -->
        <hmi:action id="trackLowerDown">
            <hmi:sendCommand name="MOVE_TRIGGERED"                  type="boolean" value="true" />
			      <hmi:setProperty name="LocalProps.TempX"        		type="number"  hmi-bind:value="{ EventArgs.X }" />
			      <hmi:setProperty name="LocalProps.TempY"        		type="number"  hmi-bind:value="{ EventArgs.Y }" />
            <hmi:setProperty name="LocalProps.TrackLowerPressed"    type="boolean" value="true" />
			      <hmi:setProperty name="LocalProps.Pressed"              type="boolean" value="true" />
        </hmi:action>

        <hmi:action id="trackLowerUp">
            <hmi:setProperty name="HmiProps.CurrentValue" type="number"
                             hmi-bind:value="{{ Converter.Bounds( HmiProps.CurrentValue - ( LocalProps.BigStep * LocalProps.Direction *  ( LocalProps.ContentWidthNormed / LocalProps.TrackLengthThumbDiff ) ), LocalProps.MinValue, LocalProps.MaxValue ) }}"
                             hmi-bind:condition="{ LocalProps.TrackLowerPressed }" />
            <hmi:setProperty name="LocalProps.TrackLowerPressed"    type="boolean" value="false" />
			      <hmi:setProperty name="LocalProps.Pressed"              type="boolean" value="false" />
            <hmi:sendCommand name="MOVE_TRIGGERED"                  type="boolean" value="false" />
        </hmi:action>
        <!-- end actions for lower track piece -->

        <!-- action for upper track piece -->
        <hmi:action id="trackUpperDown">
            <hmi:sendCommand name="MOVE_TRIGGERED"                  type="boolean" value="true" />
			      <hmi:setProperty name="LocalProps.TempX"        		type="number"  hmi-bind:value="{ EventArgs.X }" />
			      <hmi:setProperty name="LocalProps.TempY"        		type="number"  hmi-bind:value="{ EventArgs.Y }" />
            <hmi:setProperty name="LocalProps.TrackUpperPressed"    type="boolean" value="true" />
			      <hmi:setProperty name="LocalProps.Pressed"              type="boolean" value="true" />
        </hmi:action>

        <hmi:action id="trackUpperUp">
            <hmi:setProperty name="HmiProps.CurrentValue" type="number"
                             hmi-bind:value="{{ Converter.Bounds( HmiProps.CurrentValue + ( LocalProps.BigStep * LocalProps.Direction *  ( LocalProps.ContentWidthNormed / LocalProps.TrackLengthThumbDiff ) ), LocalProps.MinValue, LocalProps.MaxValue ) }}"
                             hmi-bind:condition="{ LocalProps.TrackUpperPressed }" />
            <hmi:setProperty name="LocalProps.TrackUpperPressed"    type="boolean" value="false" />
			      <hmi:setProperty name="LocalProps.Pressed"              type="boolean" value="false" />
            <hmi:sendCommand name="MOVE_TRIGGERED"                  type="boolean" value="false" />
        </hmi:action>
        <!-- end actions for upper track piece -->
        <hmi:action id="onWheelOperated" event-propagation="false" >
            <hmi:setProperty name="HmiProps.CurrentValue" type="number"
                             hmi-bind:value="{{ Converter.Bounds( HmiProps.CurrentValue + (( ge( EventArgs.WheelDelta, 0) ? 1 : -1 ) * ( LocalProps.SmallStep * LocalProps.Direction ) ), LocalProps.MinValue, LocalProps.MaxValue ) }}"
                             hmi-bind:condition="{{ not( LocalProps.ThumbMove) }}" />
        </hmi:action>

    </defs>
    <!--   end section: action definitions -->

    <!--   section: geometric elements     -->

    <g id="TIFID_scroll"  hmi-bind:transform="rotate( {{ HmiProps.Orientation == HmiOrientation.Vertical ? 90 : 0 }},{{ HmiProps.Orientation == HmiOrientation.Vertical ? LocalProps.Height / 2 : 0 }},{{ HmiProps.Orientation == HmiOrientation.Vertical ? LocalProps.Height / 2 : 0 }} )"
        hmi-event:wheel="url(#onWheelOperated)" >

        <rect
           hmi-bind:x="{ HmiProps.BorderWidth }"
           hmi-bind:y="{ HmiProps.BorderWidth }"
           hmi-bind:height="{{ Converter.Max( LocalProps.Height - 2 * HmiProps.BorderWidth, 0 ) }}"
           hmi-bind:width="{{ Converter.Max( LocalProps.Width - 2 * HmiProps.BorderWidth, 0 ) }}"
           hmi-bind:stroke="{ HmiProps.BorderColor }"
           hmi-bind:stroke-width="{ HmiProps.BorderWidth }"
           hmi-bind:fill="{ LocalProps.BackColor }" />

        <g hmi:if="{{ not( LocalProps.IsIndicator ) }}" id="g_01">

            <!-- lower button -->
            <g id="TIFID_buttonLower_g"
				        hmi-event:down="url(#buttonLowerDown)"
				        hmi-event:up= "url(#buttonLowerUp)">

                <rect id="buttonLower_rect"
                      hmi-bind:x="{ LocalProps.InteriorX }"
                      hmi-bind:y="{ LocalProps.InteriorY }"
                      hmi-bind:width="{ LocalProps.ButtonSize }"
                      hmi-bind:height="{ LocalProps.InteriorHeight }"
                      hmi-bind:fill="{ LocalProps.BackColor }"
                      stroke-width="0" />

                <polyline id="buttonLower_poly"
                      hmi-bind:points="{{ LocalProps.ButtonSize * 6 / 10 + LocalProps.InteriorX }}, {{ LocalProps.InteriorHeight / 4 + LocalProps.InteriorY }}
                                       {{ LocalProps.ButtonSize / 3 + LocalProps.InteriorX }}, {{ LocalProps.InteriorHeight / 2 + LocalProps.InteriorY }}
                                       {{ LocalProps.ButtonSize * 6 / 10 + LocalProps.InteriorX }}, {{ LocalProps.InteriorHeight * 9 / 12  + LocalProps.InteriorY }}"
                      hmi-bind:stroke="{ LocalProps.ButtonLowerCurrentColor }"
                      fill="none"
                      stroke-width="2" />
            </g>
            <!-- end lower button -->

            <!-- upper button -->
            <g id="TIFID_buttonUpper_g"
				        hmi-event:down="url(#buttonUpperDown)"
				        hmi-event:up="url(#buttonUpperUp)" >

                <rect id="buttonUpper_rect"
                      hmi-bind:x="{{ LocalProps.InteriorX + LocalProps.InteriorWidth - LocalProps.ButtonSize }}"
                      hmi-bind:y="{ LocalProps.InteriorY }"
                      hmi-bind:width="{ LocalProps.ButtonSize }"
                      hmi-bind:height="{ LocalProps.InteriorHeight }"
                      hmi-bind:fill="{ LocalProps.BackColor }"
                      stroke-width="0" />

                <polyline id="buttonUpper_poly"
                      hmi-bind:points="{{ Converter.Max ( -6 * LocalProps.ButtonSize / 10 + LocalProps.InteriorWidth + LocalProps.InteriorX, 0 ) }}, {{ LocalProps.InteriorHeight / 4  + LocalProps.InteriorY }}
                                       {{ Converter.Max ( - LocalProps.ButtonSize / 3 + LocalProps.InteriorWidth + LocalProps.InteriorX, 0 ) }}, {{ LocalProps.InteriorHeight / 2 + LocalProps.InteriorY }}
                                       {{ Converter.Max ( -6 * LocalProps.ButtonSize / 10 + LocalProps.InteriorWidth + LocalProps.InteriorX, 0 ) }}, {{ LocalProps.InteriorHeight * 9 / 12 + LocalProps.InteriorY }}"
                      hmi-bind:stroke="{ LocalProps.ButtonUpperCurrentColor }"
                      fill="none"
                      stroke-width="2" />
            </g>
            <!-- end upper button -->
        </g>

        <!-- track piece lower -->
        <g id="TIFID_trackLower_g" hmi:if="{{ gt( LocalProps.TrackLengthLower, 0.0 ) }}"
				        hmi-event:down="url(#trackLowerDown)"
				        hmi-event:up="url(#trackLowerUp)" >

                <rect id="trackLower_rect"
                      hmi-bind:x="{{ LocalProps.InteriorX + LocalProps.ButtonSize }}"
                      hmi-bind:y="{ LocalProps.InteriorY }"
                      hmi-bind:width="{{ gt( LocalProps.TrackLengthLower, 0.0 ) ? LocalProps.TrackLengthLower + LocalProps.ThumbSize / 2: 0.0 }}"
                      hmi-bind:height="{ LocalProps.InteriorHeight }"
					            hmi-bind:fill="{{ LocalProps.IsIndicator ? 'none' : LocalProps.BackColor }}" />
        </g>
        <!-- end track piece lower -->

        <!-- track piece upper -->
        <g id="TIFID_trackUpper_g" hmi:if="{{ lt( LocalProps.ThumbSize, LocalProps.TrackLengthTotal - LocalProps.TrackLengthLower ) }}"
				        hmi-event:down="url(#trackUpperDown)"
				        hmi-event:up="url(#trackUpperUp)" >

                <rect id="trackUpper_rect"
                      hmi-bind:x="{{ LocalProps.InteriorX + LocalProps.ButtonSize + LocalProps.TrackLengthLower + LocalProps.ThumbSize / 2 }}"
                      hmi-bind:y="{ LocalProps.InteriorY }"
                      hmi-bind:width="{{ lt( LocalProps.TrackLengthLower + LocalProps.ThumbSize, LocalProps.TrackLengthTotal ) ? LocalProps.TrackLengthTotal - LocalProps.ThumbSize / 2 - LocalProps.TrackLengthLower : 0.0 }}"
                      hmi-bind:height="{ LocalProps.InteriorHeight }"
					            hmi-bind:fill="{{ LocalProps.IsIndicator ? 'none' : LocalProps.BackColor }}" />
        </g>
        <!-- end track piece upper -->

        <!-- thumb-->
        <g id="TIFID_thumb_g" hmi:if="{{ gt( LocalProps.InteriorWidth, 2 * LocalProps.ButtonSize + LocalProps.ThumbSizeMin ) }}"
				        hmi-event:pan="url(#thumbDragged)"
				        hmi-event:down="url(#thumbDown)"
				        hmi-event:up="url(#thumbUp)">

                <rect id="thumb_Rect"
                      hmi-bind:x="{{ LocalProps.InteriorX + LocalProps.ButtonSize + LocalProps.TrackLengthLower }}"
                      hmi-bind:y="{{ LocalProps.IsIndicator ? ( eq( HmiProps.Orientation, HmiOrientation.Vertical ) ? LocalProps.IndicatorYVert : LocalProps.IndicatorYHori  ) : LocalProps.InteriorY }}"
                      hmi-bind:width="{{ Converter.Max( LocalProps.ThumbSize, 0 ) }}"
                      hmi-bind:height="{{ LocalProps.IsIndicator ? LocalProps.IndicatorHeight : LocalProps.InteriorHeight }}"
                      hmi-bind:fill="{ LocalProps.ThumbBackColor }"
                      hmi-bind:stroke-width="{{ HmiProps.BorderWidth / 4 }}" />

                <!-- Thumb end -->
        </g>
    </g>

    <!-- BE CAREFUL WHEN CHANGING ANYTHING BELOW THIS COMMENT !!! -->
</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     id="ScrollBarRoot"
     preserveAspectRatio="none">

    <hmi:self type="custom" displayName="Extended ScrollBar StandAlone" name="custom.extended.scrollbar.standalone" version="1.0.1" performanceClass="L" >

        <hmi:paramDef name="BackColor"                  type="HmiColor"                      />
        <hmi:paramDef name="ThumbBackColor"             type="HmiColor"                      />
        <hmi:paramDef name="Orientation"                type="HmiOrientation"                />
        <hmi:paramDef name="Width"                      type="number"                        />
        <hmi:paramDef name="Height"                     type="number"                        />
        <hmi:paramDef name="BeginValue"                 type="number"                        />
        <hmi:paramDef name="EndValue"                   type="number"                        />
        <hmi:paramDef name="CurrentValue"               type="number"         two-way="true" />
        <hmi:paramDef name="VisibleValueRange"          type="number"                        />
        <hmi:paramDef name="Thickness"                  type="number"                        />
        <hmi:paramDef name="SmallStepValueRange"        type="number"                        />
        <hmi:paramDef name="BorderWidth"                type="number"                        />
        <hmi:paramDef name="OffsetX"                    type="number"                        />
        <hmi:paramDef name="OffsetY"                    type="number"                        />

    </hmi:self>

    <defs>
        <!-- Scrollbar related -->
        <hmi:localDef name="PaddingElements"            type="number"  value="0" />
        <hmi:localDef name="ThicknessMin"               type="number"  value="0" />
        <hmi:localDef name="ThicknessIndicatorDefault"  type="number"  value="4" />
        <hmi:localDef name="IndicatorYOffsetDefault"    type="number"  value="4" />

        <!-- Button related -->
        <hmi:localDef name="ButtonSizeDefault"          type="number"  value="25" />
        <hmi:localDef name="ButtonPressedColor"         type="string"  value="DeepSkyBlue" />

        <!-- Thumb related -->
        <hmi:localDef name="ThumbSizeMin"               type="number"  value="8"   />
        <!-- END: Hard-coded some values for extended style -->

        <!-- section: Ui-Property definitions -->
        <hmi:localDef name="ButtonLowerPressed"         type="boolean" value="false" />
        <hmi:localDef name="ButtonUpperPressed"         type="boolean" value="false" />
        <hmi:localDef name="TrackLowerPressed"          type="boolean" value="false" />
        <hmi:localDef name="TrackUpperPressed"          type="boolean" value="false" />
        <hmi:localDef name="Pressed"                    type="boolean" value="false" />
        <hmi:localDef name="MouseLeftBar"               type="boolean" value="true"  />
        <hmi:localDef name="ThumbHover"                 type="boolean" value="false" />
        <hmi:localDef name="ThumbMove"                  type="boolean" value="false" />
        <hmi:localDef name="TempX"                      type="number"  value="0"     />
        <hmi:localDef name="TempY"                      type="number"  value="0"     />
        <hmi:localDef name="IsIndicator"                type="boolean" value="false"  />

        <hmi:localDef name="BackColor"                  type="string" hmi-bind:value="{{ Converter.RGBA( ParamProps.BackColor ) }}" />
        <hmi:localDef name="ThumbBackColor"             type="string" hmi-bind:value="{{ Converter.RGBA( ParamProps.ThumbBackColor ) }}" />
        <hmi:localDef name="Width"                      type="number" hmi-bind:value="{{ eq( ParamProps.Orientation, HmiOrientation.Vertical ) ? Converter.Bounds( ParamProps.Height, 0, ParamProps.Height ) : Converter.Bounds( ParamProps.Width, 0, ParamProps.Width ) }}" />
        <hmi:localDef name="Height"                     type="number" hmi-bind:value="{{ eq( ParamProps.Orientation, HmiOrientation.Vertical ) ? Converter.Bounds( ParamProps.Width, 0, ParamProps.Width ) : Converter.Bounds( ParamProps.Height, 0, ParamProps.Height ) }}" />

        <hmi:localDef name="ButtonLowerCurrentColor"    type="string" hmi-bind:value="{{ LocalProps.ButtonLowerPressed ? LocalProps.ButtonPressedColor : LocalProps.ThumbBackColor }}" />
        <hmi:localDef name="ButtonUpperCurrentColor"    type="string" hmi-bind:value="{{ LocalProps.ButtonUpperPressed ? LocalProps.ButtonPressedColor : LocalProps.ThumbBackColor }}" />

        <hmi:localDef name="Direction"                  type="number" hmi-bind:value="{{ ge( ParamProps.EndValue, ParamProps.BeginValue ) ? 1 : -1 }}" />
        <hmi:localDef name="EndValueNormed"             type="number" hmi-bind:value="{{ eq( LocalProps.Direction, 1 ) ?
                                                                                           ( gt( ParamProps.EndValue - ParamProps.VisibleValueRange, ParamProps.BeginValue ) ? ParamProps.EndValue - ParamProps.VisibleValueRange : ParamProps.BeginValue ) :
                                                                                           ( lt( ParamProps.EndValue + ParamProps.VisibleValueRange, ParamProps.BeginValue ) ? ParamProps.EndValue + ParamProps.VisibleValueRange : ParamProps.BeginValue ) }}" />
        <hmi:localDef name="MaxValue"                   type="number" hmi-bind:value="{{ ge( LocalProps.EndValueNormed, ParamProps.BeginValue ) ? LocalProps.EndValueNormed : ParamProps.BeginValue }}" />
        <hmi:localDef name="MinValue"                   type="number" hmi-bind:value="{{ ge( LocalProps.EndValueNormed, ParamProps.BeginValue ) ? ParamProps.BeginValue : LocalProps.EndValueNormed }}" />
        <hmi:localDef name="ContentWidth"               type="number" hmi-bind:value="{{ ge( ParamProps.EndValue, ParamProps.BeginValue ) ? ParamProps.EndValue - ParamProps.BeginValue : ParamProps.BeginValue - ParamProps.EndValue }}" />
        <hmi:localDef name="ContentWidthNormed"         type="number" hmi-bind:value="{{ le( LocalProps.ContentWidth, 0 ) ? 1 : LocalProps.ContentWidth }}" />
        <hmi:localDef name="VisibleToContentRelation"   type="number" hmi-bind:value="{{ gt( LocalProps.ContentWidthNormed, ParamProps.VisibleValueRange ) ? ( ParamProps.VisibleValueRange / LocalProps.ContentWidthNormed ) : 1 }}" />
        <hmi:localDef name="CurrentValueNormed"         type="number" hmi-bind:value="{{ Converter.Bounds( ParamProps.CurrentValue, LocalProps.MinValue, LocalProps.MaxValue ) }}" />
        <hmi:localDef name="CurrentValueRelative"       type="number" hmi-bind:value="{{ ge( ParamProps.EndValue, ParamProps.BeginValue ) ? ( LocalProps.CurrentValueNormed - ParamProps.BeginValue ) / LocalProps.ContentWidthNormed : ( ParamProps.BeginValue - LocalProps.CurrentValueNormed ) / LocalProps.ContentWidthNormed }}" />

        <hmi:localDef name="InteriorX"                  type="number" hmi-bind:value="{ LocalProps.PaddingElements }" />
        <hmi:localDef name="InteriorWidth"              type="number" hmi-bind:value="{{  Converter.Max( 0, LocalProps.Width - 2 * ( LocalProps.PaddingElements ) ) }}" />
        <hmi:localDef name="InteriorHeight"             type="number" hmi-bind:value="{{ Converter.Bounds( ParamProps.Thickness, LocalProps.Height, LocalProps.ThicknessMin ) }}" />
        <hmi:localDef name="InteriorY"                  type="number" hmi-bind:value="{{ ( LocalProps.Height - LocalProps.InteriorHeight ) / 2 }}" />
        <hmi:localDef name="IndicatorHeight"            type="number" hmi-bind:value="{{ Converter.Bounds( LocalProps.ThicknessIndicatorDefault, LocalProps.Height, LocalProps.ThicknessMin ) }}" />
        <hmi:localDef name="IndicatorYHori"             type="number" hmi-bind:value="{{ gt( ( LocalProps.Height - LocalProps.IndicatorHeight ) / 2, LocalProps.IndicatorYOffsetDefault ) ? ( LocalProps.Height - LocalProps.IndicatorHeight - LocalProps.IndicatorYOffsetDefault ) : ( ( LocalProps.Height - LocalProps.IndicatorHeight ) / 2 ) }}" />
        <hmi:localDef name="IndicatorYVert"             type="number" hmi-bind:value="{{ gt( ( LocalProps.Height - LocalProps.IndicatorHeight ) / 2, LocalProps.IndicatorYOffsetDefault ) ? LocalProps.IndicatorYOffsetDefault : ( LocalProps.Height - LocalProps.IndicatorHeight ) / 2  }}" />
        <hmi:localDef name="ButtonSize"                 type="number" hmi-bind:value="{{ gt( LocalProps.InteriorWidth, 2 * LocalProps.ButtonSizeDefault + LocalProps.ThumbSizeMin ) ? LocalProps.ButtonSizeDefault : ( LocalProps.InteriorWidth ) / 2  }}" />
        <hmi:localDef name="TrackLengthTotal"           type="number" hmi-bind:value="{{ Converter.Max( 0, LocalProps.InteriorWidth - 2 * LocalProps.ButtonSize ) }}" />
        <hmi:localDef name="TrackLengthTotalDenom"      type="number" hmi-bind:value="{{ gt( LocalProps.TrackLengthTotal, 0 ) ? LocalProps.TrackLengthTotal : 1 }}" />
        <hmi:localDef name="ThumbSize"                  type="number" hmi-bind:value="{{ Converter.Bounds( LocalProps.VisibleToContentRelation * LocalProps.TrackLengthTotal, LocalProps.ThumbSizeMin, LocalProps.TrackLengthTotal ) }}" />
        <hmi:localDef name="TrackLengthLower"           type="number" hmi-bind:value="{{ Converter.Bounds( LocalProps.CurrentValueRelative * LocalProps.TrackLengthTotal, 0, LocalProps.TrackLengthTotal ) }}" />
        <hmi:localDef name="SmallStepRange"             type="number" hmi-bind:value="{{ ParamProps.SmallStepValueRange ? eq(ParamProps.SmallStepValueRange, 0) ? 10 : ParamProps.SmallStepValueRange : 10  }}" />
        <hmi:localDef name="SmallStep"                  type="number" hmi-bind:value="{{ ParamProps.EndValue / LocalProps.SmallStepRange }}" />
        <hmi:localDef name="BigStep"                    type="number" hmi-bind:value="{{ ParamProps.VisibleValueRange * ( LocalProps.TrackLengthTotalDenom / LocalProps.ContentWidthNormed ) }}" />
        <hmi:localDef name="DragConst"                  type="number" value="1" />

        <!--    section: action definitions     -->

        <!-- actions for lower button -->
        <hmi:action id="buttonLowerDown">
            <hmi:setProperty name="LocalProps.TempX"                type="number"  hmi-bind:value="{ EventArgs.X }" />
            <hmi:setProperty name="LocalProps.TempY"                type="number"  hmi-bind:value="{ EventArgs.Y }" />
            <hmi:setProperty name="LocalProps.ButtonLowerPressed"   type="boolean" value="true" />
            <hmi:setProperty name="LocalProps.Pressed"              type="boolean" value="true" />
        </hmi:action>

        <hmi:action id="buttonLowerUp">
            <hmi:setProperty name="ParamProps.CurrentValue"         type="number"
                             hmi-bind:value="{{ Converter.Bounds( ParamProps.CurrentValue - ( LocalProps.SmallStep * LocalProps.Direction ), LocalProps.MinValue, LocalProps.MaxValue ) }}"
                             hmi-bind:condition="{ LocalProps.ButtonLowerPressed }" />
            <hmi:setProperty name="LocalProps.ButtonLowerPressed"   type="boolean" value="false" />
            <hmi:setProperty name="LocalProps.Pressed"              type="boolean" value="false" />
        </hmi:action>
        <!-- end actions for lower button -->

        <!-- actions for upper button -->
        <hmi:action id="buttonUpperDown">
            <hmi:setProperty name="LocalProps.TempX"                type="number"  hmi-bind:value="{ EventArgs.X }" />
            <hmi:setProperty name="LocalProps.TempY"                type="number"  hmi-bind:value="{ EventArgs.Y }" />
            <hmi:setProperty name="LocalProps.ButtonUpperPressed"   type="boolean" value="true" />
            <hmi:setProperty name="LocalProps.Pressed"              type="boolean" value="true" />
        </hmi:action>

        <hmi:action id="buttonUpperUp">
            <hmi:setProperty name="ParamProps.CurrentValue"         type="number"
                             hmi-bind:value="{{ Converter.Bounds( ParamProps.CurrentValue + ( LocalProps.SmallStep * LocalProps.Direction ), LocalProps.MinValue, LocalProps.MaxValue ) }}"
                             hmi-bind:condition="{ LocalProps.ButtonUpperPressed }" />
            <hmi:setProperty name="LocalProps.ButtonUpperPressed"   type="boolean" value="false" />
            <hmi:setProperty name="LocalProps.Pressed"              type="boolean" value="false" />
        </hmi:action>
        <!-- end actions for upper button -->

        <!-- actions for the thumb -->
        <hmi:action id="thumbEnter">
            <hmi:setProperty name="LocalProps.ThumbHover"           type="boolean" value="false" />
        </hmi:action>

        <hmi:action id="thumbDown">
            <hmi:setProperty name="LocalProps.TempX"                type="number"  hmi-bind:value="{ EventArgs.X }" />
            <hmi:setProperty name="LocalProps.TempY"                type="number"  hmi-bind:value="{ EventArgs.Y }" />
            <hmi:setProperty name="LocalProps.ThumbMove"            type="boolean" value="true" />
            <hmi:setProperty name="LocalProps.Pressed"              type="boolean" value="true" />
        </hmi:action>

        <hmi:action id="thumbDragged">
            <hmi:setProperty name="ParamProps.CurrentValue" type="number"
                             hmi-bind:value="{{ Converter.Bounds( ParamProps.CurrentValue + ( LocalProps.DragConst * LocalProps.Direction * ( eq( ParamProps.Orientation, HmiOrientation.Horizontal ) ? EventArgs.PanDeltaX : EventArgs.PanDeltaY ) * ( LocalProps.ContentWidthNormed / LocalProps.TrackLengthTotalDenom ) ), LocalProps.MinValue, LocalProps.MaxValue ) }}"
                             hmi-bind:condition="{ LocalProps.ThumbMove }"/>
        </hmi:action>

        <hmi:action id="thumbUp">
            <hmi:setProperty name="LocalProps.ThumbMove"            type="boolean" value="false" />
            <hmi:setProperty name="LocalProps.Pressed"              type="boolean" value="false" />
        </hmi:action>
        <!-- end actions for the thumb -->

        <!-- actions for lower track piece -->
        <hmi:action id="trackLowerDown">
            <hmi:setProperty name="LocalProps.TempX"        		type="number"  hmi-bind:value="{ EventArgs.X }" />
            <hmi:setProperty name="LocalProps.TempY"        		type="number"  hmi-bind:value="{ EventArgs.Y }" />
            <hmi:setProperty name="LocalProps.TrackLowerPressed"    type="boolean" value="true" />
            <hmi:setProperty name="LocalProps.Pressed"              type="boolean" value="true" />
        </hmi:action>

        <hmi:action id="trackLowerUp">
            <hmi:setProperty name="ParamProps.CurrentValue"         type="number"
                             hmi-bind:value="{{ Converter.Bounds( ParamProps.CurrentValue - ( LocalProps.BigStep * LocalProps.Direction *  ( LocalProps.ContentWidthNormed / LocalProps.TrackLengthTotalDenom ) ), LocalProps.MinValue, LocalProps.MaxValue ) }}"
                             hmi-bind:condition="{ LocalProps.TrackLowerPressed }" />
            <hmi:setProperty name="LocalProps.TrackLowerPressed"    type="boolean" value="false" />
            <hmi:setProperty name="LocalProps.Pressed"              type="boolean" value="false" />
        </hmi:action>
        <!-- end actions for lower track piece -->

        <!-- action for upper track piece -->
        <hmi:action id="trackUpperDown">
            <hmi:setProperty name="LocalProps.TempX"        		type="number"  hmi-bind:value="{ EventArgs.X }" />
            <hmi:setProperty name="LocalProps.TempY"        		type="number"  hmi-bind:value="{ EventArgs.Y }" />
            <hmi:setProperty name="LocalProps.TrackUpperPressed"    type="boolean" value="true" />
            <hmi:setProperty name="LocalProps.Pressed"              type="boolean" value="true" />
        </hmi:action>

        <hmi:action id="trackUpperUp">
            <hmi:setProperty name="ParamProps.CurrentValue"         type="number"
                             hmi-bind:value="{{ Converter.Bounds( ParamProps.CurrentValue + ( LocalProps.BigStep * LocalProps.Direction *  ( LocalProps.ContentWidthNormed / LocalProps.TrackLengthTotalDenom ) ), LocalProps.MinValue, LocalProps.MaxValue ) }}"
                             hmi-bind:condition="{ LocalProps.TrackUpperPressed }" />
            <hmi:setProperty name="LocalProps.TrackUpperPressed"    type="boolean" value="false" />
            <hmi:setProperty name="LocalProps.Pressed"              type="boolean" value="false" />
        </hmi:action>
        <!-- end actions for upper track piece -->

      <hmi:action id="onWheelOperated" event-propagation="false" >
        <hmi:setProperty name="ParamProps.CurrentValue" type="number"
                         hmi-bind:value="{{ Converter.Bounds( ParamProps.CurrentValue + (( ge( EventArgs.WheelDelta, 0) ? 1 : -1 ) * ( LocalProps.SmallStep * LocalProps.Direction ) ), LocalProps.MinValue, LocalProps.MaxValue ) }}"
                         hmi-bind:condition="{{ not( LocalProps.ThumbMove) }}" />
      </hmi:action>

    </defs>
    <!--   end section: action definitions -->

    <!--   section: geometric elements     -->

    <g id="TIFID_scroll"  hmi-bind:transform="translate( { ParamProps.OffsetX }, { ParamProps.OffsetY } )
                                              rotate( {{ ParamProps.Orientation == HmiOrientation.Vertical ? 90 : 0 }},{{ ParamProps.Orientation == HmiOrientation.Vertical ? LocalProps.Height / 2 : 0 }},{{ ParamProps.Orientation == HmiOrientation.Vertical ? LocalProps.Height / 2 : 0 }} )"
      hmi-event:wheel="url(#onWheelOperated)" >

        <rect
           hmi-bind:x="{ ParamProps.BorderWidth }"
           hmi-bind:y="{ ParamProps.BorderWidth }"
           hmi-bind:height="{{ Converter.Max( LocalProps.Height - 2 * ParamProps.BorderWidth, 0 ) }}"
           hmi-bind:width="{{ Converter.Max( LocalProps.Width - 2 * ParamProps.BorderWidth, 0 ) }}"
           stroke="none"
           hmi-bind:stroke-width="{ ParamProps.BorderWidth }"
           hmi-bind:fill="{ LocalProps.BackColor }" />

        <g hmi:if="{{ not( LocalProps.IsIndicator ) }}" id="g_01">

          <!-- Response area for the mouse wheel-->

            <!-- lower button -->
            <g id="TIFID_buttonLower_g"
                hmi-event:down="url(#buttonLowerDown)"
                hmi-event:up= "url(#buttonLowerUp)" >

                <rect id="buttonLower_rect"
                    hmi-bind:x="{ LocalProps.InteriorX }"
                    hmi-bind:y="{ LocalProps.InteriorY }"
                    hmi-bind:width="{ LocalProps.ButtonSize }"
                    hmi-bind:height="{ LocalProps.InteriorHeight }"
                    hmi-bind:fill="{ LocalProps.BackColor }"
                    stroke-width="0" />

              <polyline id="buttonLower_poly"
                    hmi-bind:points="{{ LocalProps.ButtonSize * 6 / 10 + LocalProps.InteriorX }}, {{ LocalProps.InteriorHeight / 4 + LocalProps.InteriorY }}
                                     {{ LocalProps.ButtonSize / 3 + LocalProps.InteriorX }}, {{ LocalProps.InteriorHeight / 2 + LocalProps.InteriorY }}                                          
                                     {{ LocalProps.ButtonSize * 6 / 10 + LocalProps.InteriorX }}, {{ LocalProps.InteriorHeight * 9 / 12  + LocalProps.InteriorY }}"
                    hmi-bind:stroke="{ LocalProps.ButtonLowerCurrentColor }"
                    fill="none"
                    stroke-width="2" />
            </g>
            <!-- end lower button -->

            <!-- upper button -->
            <g id="TIFID_buttonUpper_g"
                hmi-event:down="url(#buttonUpperDown)"
                hmi-event:up="url(#buttonUpperUp)" >

            <rect id="buttonUpper_rect"
                hmi-bind:x="{{ LocalProps.InteriorX + LocalProps.InteriorWidth - LocalProps.ButtonSize }}"
                hmi-bind:y="{ LocalProps.InteriorY }"
                hmi-bind:width="{ LocalProps.ButtonSize }"
                hmi-bind:height="{ LocalProps.InteriorHeight }"
                hmi-bind:fill="{ LocalProps.BackColor }"
                stroke-width="0" />

            <polyline id="buttonUpper_poly"
                 hmi-bind:points="{{ Converter.Max ( -6 * LocalProps.ButtonSize / 10 + LocalProps.InteriorWidth + LocalProps.InteriorX, 0 ) }}, {{ LocalProps.InteriorHeight / 4  + LocalProps.InteriorY }}
                                  {{ Converter.Max ( - LocalProps.ButtonSize / 3 + LocalProps.InteriorWidth + LocalProps.InteriorX, 0 ) }}, {{ LocalProps.InteriorHeight / 2 + LocalProps.InteriorY }}
                                  {{ Converter.Max ( -6 * LocalProps.ButtonSize / 10 + LocalProps.InteriorWidth + LocalProps.InteriorX, 0 ) }}, {{ LocalProps.InteriorHeight * 9 / 12 + LocalProps.InteriorY }}"
                 hmi-bind:stroke="{ LocalProps.ButtonUpperCurrentColor }"
                 fill="none"
                 stroke-width="2" />
          </g>
            <!-- end upper button -->
        </g>

        <!-- track piece lower -->
        <g id="TIFID_trackLower_g" hmi:if="{{ gt( LocalProps.TrackLengthLower, 0.0 ) }}"
            hmi-event:down="url(#trackLowerDown)"
            hmi-event:up="url(#trackLowerUp)" >

          <rect id="trackLower_rect"
              hmi-bind:x="{{ LocalProps.InteriorX + LocalProps.ButtonSize }}"
              hmi-bind:y="{ LocalProps.InteriorY }"
              hmi-bind:width="{{ gt( LocalProps.TrackLengthLower, 0.0 ) ? LocalProps.TrackLengthLower + LocalProps.ThumbSize / 2: 0.0 }}"
              hmi-bind:height="{ LocalProps.InteriorHeight }"
              hmi-bind:fill="{{ LocalProps.IsIndicator ? 'none' : LocalProps.BackColor }}" />
        </g>
        <!-- end track piece lower -->

        <!-- track piece upper -->
        <g id="TIFID_trackUpper_g" hmi:if="{{ lt( LocalProps.ThumbSize, LocalProps.TrackLengthTotal - LocalProps.TrackLengthLower ) }}"
            hmi-event:down="url(#trackUpperDown)"
            hmi-event:up="url(#trackUpperUp)" >

        <rect id="trackUpper_rect"
             hmi-bind:x="{{ LocalProps.InteriorX + LocalProps.ButtonSize + LocalProps.TrackLengthLower + LocalProps.ThumbSize / 2 }}"
             hmi-bind:y="{ LocalProps.InteriorY }"
             hmi-bind:width="{{ lt( LocalProps.TrackLengthLower + LocalProps.ThumbSize, LocalProps.TrackLengthTotal ) ? LocalProps.TrackLengthTotal - LocalProps.ThumbSize / 2 - LocalProps.TrackLengthLower : 0.0 }}"
             hmi-bind:height="{ LocalProps.InteriorHeight }"
             hmi-bind:fill="{{ LocalProps.IsIndicator ? 'none' : LocalProps.BackColor }}" />
        </g>
        <!-- end track piece upper -->

        <!-- thumb-->
        <g id="TIFID_thumb_g" hmi:if="{{ gt( LocalProps.InteriorWidth, 2 * LocalProps.ButtonSize + LocalProps.ThumbSizeMin ) }}"
            hmi-event:pan="url(#thumbDragged)"
            hmi-event:down="url(#thumbDown)"
            hmi-event:up="url(#thumbUp)" >

        <rect id="thumb_Rect"
             hmi-bind:x="{{ LocalProps.InteriorX + LocalProps.ButtonSize + LocalProps.TrackLengthLower }}"
             hmi-bind:y="{{ LocalProps.IsIndicator ? ( eq( ParamProps.Orientation, HmiOrientation.Vertical ) ? LocalProps.IndicatorYVert : LocalProps.IndicatorYHori  ) : LocalProps.InteriorY }}"
             hmi-bind:width="{{ Converter.Max( LocalProps.ThumbSize, 0 ) }}"
             hmi-bind:height="{{ LocalProps.IsIndicator ? LocalProps.IndicatorHeight : LocalProps.InteriorHeight }}"
             hmi-bind:fill="{ LocalProps.ThumbBackColor }"
             hmi-bind:stroke-width="{{ ParamProps.BorderWidth / 4 }}" />

        <!-- Thumb end -->
      </g>
    </g>

    <!-- BE CAREFUL WHEN CHANGING ANYTHING BELOW THIS COMMENT !!! -->
</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"

     preserveAspectRatio="none">

    <hmi:self type="system:HmiSelectionSystemPart" displayName="Flat Selection" name="style.flat.selection" version="2.9" performanceClass="s">
        <hmi:data type="mydata"></hmi:data>
    </hmi:self>

    <g id="SelectionRect" opacity="1">
        <rect id="ItemBGRect3"
              hmi-bind:x="{ HmiProps.Left }"
              hmi-bind:y="{ HmiProps.Top }"
              hmi-bind:width="{ HmiProps.Width}"
              hmi-bind:height="{ HmiProps.Height }"
              fill="none"
              hmi-bind:stroke-width="{ HmiProps.SelectionBorderWidth }"
              hmi-bind:stroke="{{ Converter.RGBA( HmiProps.SelectionBorderColor ) }}" />
    </g>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2016. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/"
     preserveAspectRatio="none">

    <!-- Parameters passed from the root template -->
    <hmi:self type="part:HmiStatusBarPart" displayName="Extended StatusBar Part" name="extended.statusbar.part" version="1.0.1" performanceClass="L" >

        <hmi:paramDef name="Width"           type="number"  />
        <hmi:paramDef name="Height"          type="number"  />
        <hmi:paramDef name="ItemOperable"    type="boolean" />
        <hmi:paramDef name="FocusColor"      type="string" />
        <hmi:paramDef name="ShowFocusVisual" type="boolean" />
    </hmi:self>

    <defs>
        <!-- Local definitions of this template -->
        <!-- The height of the status bar currently is calculated by javascript code and passed to the template in its FontHeight property -->
        <hmi:localDef name="ControlBarOperable" type="boolean"      hmi-bind:value="{{ and( HmiProps.Enabled, ParamProps.ItemOperable ) }}" />
    </defs>

    <g id="TIFID_StatusBarElements" hmi:if="{ HmiProps.Visible }" >
        <rect id="StatusBarBackground"
            hmi-bind:width="{ ParamProps.Width }"
            hmi-bind:height="{ ParamProps.Height }"
            hmi-bind:fill="{{ Converter.RGBA(HmiProps.BackColor) }}"
            stroke="none" />

      
        <hmi:include template="include.style.flat.controlbarelement.default.svghmi" hmi-bind:forEach="{ HmiProps.Elements }"
            hmi-flex:width="{ ParamProps.Width }"
            hmi-flex:height="{ ParamProps.Height }"
            hmi-flex:justifyItems="stretch"
            hmi-flex:direction="row"
            hmi-flex:wrap="false">

            <hmi:param name="Font"                  type="HmiFontPart"  hmi-bind:value="{ HmiProps.Font }"           />
            <hmi:param name="ControlBarOperable"    type="boolean"      hmi-bind:value="{ LocalProps.ControlBarOperable }" />
            <hmi:param name="FocusColor"            type="string"       hmi-bind:value="{ ParamProps.FocusColor }" />
            <hmi:param name="ShowFocusVisual"       type="boolean"      hmi-bind:value="{ ParamProps.ShowFocusVisual }" />
        </hmi:include>
    </g>
</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2021. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     preserveAspectRatio="none">

    <hmi:self type="custom" displayName="StepViewer" name="include.style.flat.stepview">
        <hmi:paramDef name="FocusColor"            type="HmiColor"                 />
        <hmi:paramDef name="LineColor"             type="string"                 />
        <hmi:paramDef name="ActiveLineColor"       type="string"                 />
        <hmi:paramDef name="BackColor"             type="HmiColor"                 />
    </hmi:self>

    <hmi-element:flowDiagram hmi-bind:height="{ Layout.ActualHeight }" hmi-bind:width="{ Layout.ActualWidth }" start-x="30" start-y="30">     
        <hmi-feature:flowLines>
            <hmi-feature:flowLine line-state="normal" line-style="solid" hmi-bind:stroke="{ ParamProps.LineColor }" stroke-width="4">
                <hmi-feature:flowLineDecorator decorator-type="transition" symbol-type="line" show-text="true">
                </hmi-feature:flowLineDecorator>
                <hmi-feature:flowLineDecorator decorator-type="terminal" symbol-type="circle">
                </hmi-feature:flowLineDecorator>
                <hmi-feature:flowLineDecorator decorator-type="links" symbol-type="arrow" show-text="true">
                </hmi-feature:flowLineDecorator>
            </hmi-feature:flowLine>

            <hmi-feature:flowLine line-state="normal" line-style="parallel" hmi-bind:stroke="{ ParamProps.LineColor }" stroke-width="2">
            </hmi-feature:flowLine>

            <hmi-feature:flowLine line-state="active" line-style="solid" hmi-bind:stroke="{ ParamProps.ActiveLineColor }" stroke-width="4">
                <hmi-feature:flowLineDecorator decorator-type="transition" symbol-type="line" show-text="true">
                </hmi-feature:flowLineDecorator>
                <hmi-feature:flowLineDecorator decorator-type="terminal" symbol-type="circle">
                </hmi-feature:flowLineDecorator>
                <hmi-feature:flowLineDecorator decorator-type="links" symbol-type="arrow" show-text="true">
                </hmi-feature:flowLineDecorator>
           </hmi-feature:flowLine>

            <hmi-feature:flowLine line-state="active" line-style="parallel" hmi-bind:stroke="{ ParamProps.ActiveLineColor }" stroke-width="2">
          </hmi-feature:flowLine> 
        
        </hmi-feature:flowLines>

        <hmi-feature:block content-height="300" content-width="300"> <!--modify the value as required-->
            <hmi:master-include template="include.style.flat.blockview.svghmi" >
                <hmi:param name="FocusColor"      type="string"   hmi-bind:value="{{ Converter.RGBA( ParamProps.FocusColor ) }}" />
                <hmi:param name="BackColor"       type="string"   hmi-bind:value="{{ Converter.RGBA( ParamProps.BackColor ) }}"/>
            </hmi:master-include>
        </hmi-feature:block>

      <hmi:master-inline>
        <hmi:template>
          <svg xmlns="http://www.w3.org/2000/svg"
           xmlns:hmi="http://svg.siemens.com/hmi/"
           xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
           xmlns:hmi-data-bind="http://svg.siemens.com/hmi/data/bind/"
           overflow="visible">
            <hmi:self type="custom" name="title" displayName="title" >
              <hmi:data type="text-details"></hmi:data>
            </hmi:self>
            <defs>
              <hmi:localDef name="Text"            type="string"                      hmi-data-bind:value="{ Content.Text }" />
              <hmi:localDef name="TextFontName"    type="string"                      hmi-data-bind:value="{ Content.TextFontName }" />
              <hmi:localDef name="TextFontWeight"  type="string"                      hmi-data-bind:value="{ Content.TextFontWeight }" />
              <hmi:localDef name="TextFontSize"    type="number"                      hmi-data-bind:value="{ Content.TextFontSize }" />
              <hmi:localDef name="BlockSystemPart" type="HmiBlockSymbolSystemPart"    hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiBlockSymbolSystemPart' ) }}" />
            </defs>
            <text  hmi-bind:font-size="{ LocalProps.TextFontSize }"
                   hmi-bind:font-weight="{ LocalProps.TextFontWeight }"
                   hmi-bind:fill="{{ Converter.RGBA(LocalProps.BlockSystemPart.HeaderForeColor) }}"
                   hmi-bind:font-family="{ LocalProps.TextFontName }">
              <hmi:text hmi-bind:value="{ LocalProps.Text }"/>
            </text>
          </svg>
        </hmi:template>
      </hmi:master-inline>

    </hmi-element:flowDiagram>
</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.2/dtd/svg12-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     preserveAspectRatio="none"
     >

  <hmi:self type="system:HmiListContainerSystemPart" displayName="Flat Systemdiagnosisdetailedview" name="style.flat.systemdiagnosisdetailedview" version="2.9" performanceClass="L" >
    <hmi:focus focusVisual="local" />

    <hmi:paramDef name="Font"                           type="HmiFontPart"              />
    <hmi:paramDef name="Width"                          type="number"                   />
    <hmi:paramDef name="ShowFocus"                      type="boolean"                  />
    <hmi:paramDef name="BorderColor"                    type="HmiColor"                 />
    <hmi:paramDef name="BackColor"                      type="HmiColor"                 />
    <hmi:paramDef name="ForeColor"                      type="HmiColor"                 />
    <hmi:paramDef name="GridLineColor"                  type="HmiColor"                 />
    <hmi:paramDef name="ResourceList"                   type="string"                   />
    <hmi:paramDef name="PropNameText"                   type="string"                   />
    <hmi:paramDef name="BorderWidth"                    type="number"                   />
    <hmi:paramDef name="SelectedIndex"                  type="number"                   two-way="true"/>

  </hmi:self>

  <hmi-element:listContainer hmi-bind:width="{ ParamProps.Width }" hmi-bind:height="{ Layout.ActualHeight }"
            hmi-bind:source="{ ParamProps.ResourceList }">
    <hmi-feature:properties>
      <hmi-feature:select hmi-bind:name="{ ParamProps.PropNameText }"          as="Text"          />
    </hmi-feature:properties>
    <hmi:master-inline>

      <hmi:param name="ForeColor"                 type="HmiColor"         hmi-bind:value="{ ParamProps.ForeColor }"               />
      <hmi:param name="BorderColor"               type="HmiColor"         hmi-bind:value="{ ParamProps.BorderColor }"             />
      <hmi:param name="BackColor"                 type="HmiColor"         hmi-bind:value="{ ParamProps.BackColor }"               />
      <hmi:param name="GridLineColor"             type="HmiColor"         hmi-bind:value="{ ParamProps.GridLineColor }"           />
      <hmi:param name="ShowFocus"                 type="boolean"          hmi-bind:value="{ ParamProps.ShowFocus }"               />
      <hmi:param name="Font"                      type="HmiFontPart"      hmi-bind:value="{ ParamProps.Font }"                    />
      <hmi:param name="SelIndex"                  type="number"           hmi-bind:value="{ ParamProps.SelectedIndex }"           />
      <hmi:param name="BorderWidth"               type="number"           hmi-bind:value="{ ParamProps.BorderWidth }"             />
      <hmi:param name="ButtonContentWidth"        type="number"           hmi-bind:value="{ ParamProps.Width }"      />

      <hmi:template>
        <svg id="TIFID_List_SVG" xmlns="http://www.w3.org/2000/svg" xmlns:hmi="http://svg.siemens.com/hmi/"
            xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/" xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/"
            xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
            overflow="visible">

          <hmi:self type="system:HmiListContainerSystemPart" name="lc-master" displayName="Content of the ListContainer master" >

            <hmi:paramDef name="ForeColor"                 type="HmiColor"        />
            <hmi:paramDef name="BorderColor"               type="HmiColor"        />
            <hmi:paramDef name="BackColor"                 type="HmiColor"        />
            <hmi:paramDef name="GridLineColor"             type="HmiColor"        />
            <hmi:paramDef name="ShowFocus"                 type="boolean"         />
            <hmi:paramDef name="Font"                      type="HmiFontPart"     />
            <hmi:paramDef name="SelIndex"                  type="number"          two-way="true"/>
            <hmi:paramDef name="BorderWidth"               type="number"          />
            <hmi:paramDef name="ButtonContentWidth"        type="number"          />

          </hmi:self>

          <defs>
            <hmi:localDef name="TextAlignment"                type="number"                   value="0" />
            <hmi:localDef name="DefaultSelectedIndex"         type="number"                   value="-1" />
            <hmi:localDef name="CaptionSplitter"              type="number"                   value="1" />
            <hmi:localDef name="CloseIconPadding"             type="number"                   value="5" />
            <hmi:localDef name="CloseIconSize"                type="number"                   value="16" />
            <hmi:localDef name="CloseIconWidth"               type="number"                   value="20" />
            <hmi:localDef name="CaptionHeaderHeight"          type="number"                   value="30" />
            <hmi:localDef name="TextPadding"                  type="number"                   value="10" />
            <hmi:localDef name="CloseIconXPosition"           type="number"                   hmi-bind:value="{{ Layout.ActualWidth - LocalProps.CloseIconPadding - ( LocalProps.CloseIconWidth / 2 + 5 ) }}" />
            <hmi:localDef name="ContentPositionY"             type="number"                   hmi-bind:value="{{ LocalProps.CaptionHeaderHeight + LocalProps.CaptionSplitter }}" />
            <hmi:localDef name="DetailedViewHeight"           type="number"                   hmi-bind:value="{{ Layout.ActualHeight - LocalProps.ContentPositionY }}" />
            <hmi:localDef name="ViewWidth"                    type="number"                   hmi-bind:value="{{ Layout.ActualWidth - 2 * ParamProps.BorderWidth }}" />
            <hmi:localDef name="ViewHeight"                   type="number"                   hmi-bind:value="{{ gt( LocalProps.DetailedViewHeight, 0 ) ? LocalProps.DetailedViewHeight : 0 }}" />
            <hmi:localDef name="ScrollBarPart"                type="HmiScrollBarSystemPart"   hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiScrollBarSystemPart' ) }}" />

            <hmi:action id="onMouseDown" hmi-bind:condition="{{ gt( ParamProps.SelIndex, LocalProps.DefaultSelectedIndex ) }}">
              <hmi:setProperty name="ParamProps.SelIndex"     type="number"    hmi-bind:value="{ LocalProps.DefaultSelectedIndex }" />
              <hmi:setCursor name="pointer" value="element"></hmi:setCursor>
            </hmi:action>
            <hmi:action id="pointer">
              <hmi:setCursor name="pointer" value="element"></hmi:setCursor>
            </hmi:action>
            <hmi:action id="default">
              <hmi:setCursor name="auto" value="element"></hmi:setCursor>
            </hmi:action>

          </defs>

          <g>
            <rect
                hmi-bind:height="{ LocalProps.CaptionHeaderHeight }"
                hmi-bind:width="{ LocalProps.ViewWidth }"
                hmi-bind:fill="{{ Converter.RGBA( ParamProps.BackColor ) }}"/>
            <text
                font-weight="bold"
                hmi-bind:x="{ LocalProps.TextPadding }"
                hmi-bind:y="{{ 2 * LocalProps.TextPadding }}"
                hmi-bind:fill="{{ Converter.RGBA( ParamProps.ForeColor ) }}"
                hmi-bind:font-size="{ ParamProps.Font.Size }"
                hmi-bind:font-style="{{ ParamProps.Font.Italic ? 'italic' : 'normal' }}"
                hmi-bind:font-family="{ ParamProps.Font.Name }"
                hmi-bind:text-decoration="{{ Converter.TextDecoration( ParamProps.Font ) }}">
              <hmi:text hmi-bind:value="{{ Converter.GetTextByID( 'TBID_SysDiag_DetailedView_Text' ) }}" />
            </text>
            <g id="TIFID_CloseBtn_DetailedView"
               hmi-bind:transform="translate( { LocalProps.CloseIconXPosition }, { LocalProps.CloseIconPadding } )"
                hmi-event:down="url(#onMouseDown)"
                hmi-event:up="url(#pointer)"
                hmi-event:mouseEnter="url(#pointer)"
                hmi-event:mouseHover="url(#pointer)"
                hmi-event:mouseLeave="url(#default)">
              <rect
                  hmi-bind:width="{ LocalProps.CloseIconWidth }"
                  hmi-bind:height="{ LocalProps.CloseIconWidth }"
                  opacity="0"
                  stroke="none" />
              <path hmi-bind:d="M {{ LocalProps.CloseIconSize / 2 }} {{ LocalProps.CloseIconWidth / 2 }}
                                L {{ LocalProps.CloseIconSize / 2 - 8 }} {{ LocalProps.CloseIconWidth / 2 - 8 }}
                                L {{ LocalProps.CloseIconSize / 2 + 8 }} {{ LocalProps.CloseIconWidth / 2 + 8 }}
                                M {{ LocalProps.CloseIconSize / 2 }} {{ LocalProps.CloseIconWidth / 2 }}
                                L {{ LocalProps.CloseIconSize / 2 - 8 }} {{ LocalProps.CloseIconWidth / 2 + 8 }}
                                L {{ LocalProps.CloseIconSize / 2 + 8 }} {{ LocalProps.CloseIconWidth / 2 - 8 }}"
                    hmi-bind:stroke="{{ Converter.RGBA ( LocalProps.ScrollBarPart.ThumbBackColor ) }}"
                    stroke-width="2" />
            </g>
            <rect
                hmi-bind:y="{ LocalProps.CaptionHeaderHeight }"
                hmi-bind:height="{ LocalProps.CaptionSplitter }"
                hmi-bind:width="{ LocalProps.ViewWidth }"
                hmi-bind:fill="{{ Converter.RGBA( ParamProps.GridLineColor ) }}"
                stroke="none"/>
          </g>

          <g id="TIFID_ExpandedListBox">
            <!-- ComboBoxListElement background -->
            <rect
                hmi-bind:y="{ LocalProps.ContentPositionY }"
                hmi-bind:width="{ LocalProps.ViewWidth }"
                hmi-bind:height="{ LocalProps.ViewHeight }"
                hmi-bind:fill="{{ Converter.RGBA( ParamProps.BackColor ) }}"
                hmi-bind:stroke="{{ Converter.RGBA( ParamProps.BorderColor ) }}"
                hmi-bind:stroke-width="{ ParamProps.BorderWidth }" />

            <g>
              <hmi-element:textField
                      hmi-bind:start-x="{ LocalProps.TextPadding }"
                      hmi-bind:start-y="{ LocalProps.ContentPositionY }"
                      hmi-bind:width="{{ LocalProps.ViewWidth -  LocalProps.TextPadding }}"
                      hmi-bind:height="{{ eq( LocalProps.ViewHeight, 0 ) ? 0 : ( LocalProps.ViewHeight -  LocalProps.TextPadding ) }}"
                      hmi-bind:vertical-text-alignment="{ LocalProps.TextAlignment }"
                      hmi-bind:horizontal-text-alignment="{ LocalProps.TextAlignment }"
                      hmi-bind:value="{ HmiProps.List[0].Text }"
                      hmi-bind:fore-color="{{ Converter.RGBA( ParamProps.ForeColor ) }}"
                      hmi-bind:padding="{{ eq( LocalProps.ViewHeight, 0 ) ? '0 0 0 0' : '10 0 0 0' }}"
                      output-format=""
                      enabled="false"
                      read-only="true"
                      multi-line= "true" >
                <hmi-feature:font hmi-bind:scope="{ ParamProps.Font }" />
              </hmi-element:textField>
            </g>
          </g>
        </svg>
      </hmi:template>
    </hmi:master-inline>
  </hmi-element:listContainer>
</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2021. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/"
     preserveAspectRatio="none"
     id="custom_SystemDiagnosisHardwareView"
     data-tif-type="WSI:SvgGrid">

    <hmi:self type="part:HmiSystemDiagnosisDetailViewPart" displayName="Flat SystemDiagnosisHardwareViewContent" name="style.flat.systemdiagnosishardwaredetailview">
        <hmi:paramDef name="FocusColor"             type="string"                 />
        <hmi:paramDef name="SelectedIndex"          type="number"   two-way="true"/>
        <hmi:paramDef name="ShowFocusVisual"        type="boolean"                />
	      <hmi:paramDef name="DetailedViewHeight"     type="number"                 />
    </hmi:self>

    <defs>
        <hmi:localDef name="ShowFocus"              type="boolean"     hmi-bind:value="{{ and( ParamProps.ShowFocusVisual, SysProps.HasFocus ) }}"                                  />
        <hmi:localDef name="BorderWidth"            type="number"      value="1"                                                                                                    />
        <hmi:localDef name="ReducedBorderWidth"     type="number"      hmi-bind:value="{{ LocalProps.BorderWidth / 2 }}"                                                            />
        <hmi:localDef name="HeaderGridLineColor"    type="string"      hmi-bind:value="{{ Converter.RGBA(  HmiProps.HeaderSettings.HeaderGridLineColor ) }}"                        />
        <hmi:localDef name="SplitterHeight"         type="number"      value="10"                                                                                                   />
        <hmi:localDef name="GridHeight"             type="number"      hmi-bind:value="{{ Layout.ActualHeight - ParamProps.DetailedViewHeight - LocalProps.SplitterHeight }}"    />
        <hmi:localDef name="ContentPositionX"       type="number"      value="0" />
        <hmi:localDef name="ContentPositionY"       type="number"      value="1" />
        <hmi:localDef name="DefaultSelectedIndex"   type="number"      value="-1" />
        <hmi:localDef name="CaptionSplitter"        type="number"      value="1" />
        <hmi:localDef name="CloseIconPadding"       type="number"      value="5" />
        <hmi:localDef name="CloseIconHalfSize"      type="number"      value="8" />
        <hmi:localDef name="CloseIconWidth"         type="number"      value="20" />
        <hmi:localDef name="CaptionHeaderHeight"    type="number"      value="30" />
        <hmi:localDef name="TextPadding"            type="number"      value="10" />
        <hmi:localDef name="DetailedViewHeight"     type="number"      hmi-bind:value="{{ Layout.ActualHeight - LocalProps.ContentPositionY }}" />
        <hmi:localDef name="CloseIconXPosition"     type="number"      hmi-bind:value="{{ Layout.ActualWidth - LocalProps.CloseIconPadding - ( LocalProps.CloseIconWidth / 2 + 5 ) }}" />
        <hmi:localDef name="ViewWidth"              type="number"      hmi-bind:value="{ Layout.ActualWidth }" />
        <hmi:localDef name="ViewHeight"             type="number"      hmi-bind:value="{{ gt( LocalProps.DetailedViewHeight, 0 ) ? LocalProps.DetailedViewHeight : 0 }}" />

        <hmi:action id="onMove" hmi-bind:condition="{{ and( lt( LocalProps.GridHeight + EventArgs.PanDeltaY , Layout.ActualHeight - LocalProps.SplitterHeight ),  gt( LocalProps.GridHeight + EventArgs.PanDeltaY , LocalProps.SplitterHeight )) }}">
            <hmi:setProperty name="LocalProps.HeightRatio"  type="number"   hmi-bind:value="{{ ( ParamProps.DetailedViewHeight - EventArgs.PanDeltaY ) / Layout.ActualHeight }}" />
        </hmi:action>
        <hmi:action id="onSetCursorResizeNS">
            <hmi:setCursor   name="ns-resize" value="screen" />
        </hmi:action>
        <hmi:action id="onCursorResumeLeave">
            <hmi:setCursor   name="auto"      value="screen" />
        </hmi:action>
      
        <hmi:action id="onMouseDown" hmi-bind:condition="{{ gt( ParamProps.SelectedIndex, LocalProps.DefaultSelectedIndex ) }}">
          <hmi:setProperty name="ParamProps.SelectedIndex"     type="number"    hmi-bind:value="{ LocalProps.DefaultSelectedIndex }" />
          <hmi:setCursor name="pointer" value="element"></hmi:setCursor>
        </hmi:action>
        <hmi:action id="pointer">
          <hmi:setCursor name="pointer" value="element"></hmi:setCursor>
        </hmi:action>
        <hmi:action id="default">
          <hmi:setCursor name="auto" value="element"></hmi:setCursor>
        </hmi:action>
    </defs>  
  
    <g>
      <rect
          hmi-bind:height="{ LocalProps.CaptionHeaderHeight }"
          hmi-bind:width="{ LocalProps.ViewWidth }"
          hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}"/>
      <text
          hmi-bind:x="{ LocalProps.TextPadding }"
          hmi-bind:y="{{ 2 * LocalProps.TextPadding }}"
          font-weight="bold"
          hmi-bind:fill="{{ Converter.RGBA( HmiProps.ForeColor ) }}"
          hmi-bind:font-size="{ HmiProps.Font.Size }"
          hmi-bind:font-style="{{ HmiProps.Font.Italic ? 'italic' : 'normal' }}"
          hmi-bind:font-family="{ HmiProps.Font.Name }"
          hmi-bind:text-decoration="{{ Converter.TextDecoration( HmiProps.Font ) }}">
        <hmi:text hmi-bind:value="{{ Converter.GetTextByID( 'TBID_SysDiag_DetailedView_Text' ) }}" />
      </text>
      <g id="TIFID_CloseBtn_HardwareDetailView"
          hmi-bind:transform="translate( { LocalProps.CloseIconXPosition }, { LocalProps.CloseIconPadding } )"
          hmi-event:down="url(#onMouseDown)"
          hmi-event:up="url(#pointer)"
          hmi-event:mouseEnter="url(#pointer)"
          hmi-event:mouseHover="url(#pointer)"
          hmi-event:mouseLeave="url(#default)">
        <rect
            hmi-bind:width="{ LocalProps.CloseIconWidth }"
            hmi-bind:height="{ LocalProps.CloseIconWidth }"
            opacity="0"
            stroke="none" />
        <path hmi-bind:d="M {{ LocalProps.CloseIconHalfSize }} {{ LocalProps.CloseIconWidth / 2 }}
                            L {{ LocalProps.CloseIconHalfSize - 5 }} {{ LocalProps.CloseIconWidth / 2 - 5 }}
                            L {{ LocalProps.CloseIconHalfSize + 5 }} {{ LocalProps.CloseIconWidth / 2 + 5 }}
                            M {{ LocalProps.CloseIconHalfSize }} {{ LocalProps.CloseIconWidth / 2 }}
                            L {{ LocalProps.CloseIconHalfSize - 5 }} {{ LocalProps.CloseIconWidth / 2 + 5 }}
                            L {{ LocalProps.CloseIconHalfSize + 5 }} {{ LocalProps.CloseIconWidth / 2 - 5 }}"
              hmi-bind:stroke="{{ Converter.RGBA( HmiProps.ForeColor ) }}"
              stroke-width="1" />
      </g>
      <rect
          hmi-bind:y="{ LocalProps.CaptionHeaderHeight }"
          hmi-bind:height="{ LocalProps.CaptionSplitter }"
          hmi-bind:width="{ LocalProps.ViewWidth }"
          hmi-bind:stroke-width="{ HmiProps.GridLineWidth }"
          hmi-bind:stroke="{{ Converter.RGBA(  HmiProps.GridLineColor ) }}" />
    </g>
    <hmi-element:table auto-scroll="false" hmi-bind:config="{ HmiProps }" hmi-bind:height="{{ Layout.ActualHeight - LocalProps.CaptionHeaderHeight - LocalProps.ContentPositionY}}"
     hmi-bind:width="{Layout.ActualWidth}" hmi-bind:start-x="{ LocalProps.ContentPositionX }" hmi-bind:start-y="{{ LocalProps.CaptionHeaderHeight + (LocalProps.ContentPositionY/2) }}"
     hmi-bind:horizontal-scrollbar-visibility="{HmiProps.HorizontalScrollBarVisibility}"
     hmi-bind:vertical-scrollbar-visibility="{HmiProps.VerticalScrollBarVisibility}">

        <!--Row Headers-->
        <hmi-feature:recordHeader>
            <hmi:master-inline>
                <hmi:param name="Padding" type="HmiPaddingPart" hmi-bind:value="{ HmiProps.CellPadding }" />
                <hmi:template>
                    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                        xmlns:hmi="http://svg.siemens.com/hmi/" xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                        xmlns:hmi-data-bind="http://svg.siemens.com/hmi/data/bind/" height="10" width="10">
                        <hmi:self type="system:HmiHeaderCellSystemPart" displayName="RowHeader" name="rowheader" version="1.0.0"
                            performanceClass="s">
                            <hmi:data type="header-view"></hmi:data>
                            <hmi:paramDef name="Padding" type="HmiPaddingPart" />
                        </hmi:self>
        
                        <g id="TIFID_RowHeaderGroup">
                            <rect id="RowHeaderRect" hmi-bind:width="{ HmiProps.Width }" hmi-bind:height="{ HmiProps.Height }"
                                hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}" />
                            <hmi:include template="include.style.flat.text.svghmi" hmi-bind:x="{ ParamProps.Padding.Left }"
                                hmi-bind:y="{ ParamProps.Padding.Top }"
                                hmi-bind:width="{{ HmiProps.Width - ( ParamProps.Padding.Right + ParamProps.Padding.Left ) }}"
                                hmi-bind:height="{{ HmiProps.Height - ParamProps.Padding.Bottom }}">
                                <hmi:param name="Text" type="string" hmi-data-bind:value="{ Content.Index }" />
                                <hmi:param name="Font" type="HmiFontPart" hmi-bind:value="{ HmiProps.Font }" />
                                <hmi:param name="TextColor" type="HmiColor" hmi-bind:value="{ HmiProps.ForeColor }" />
                                <hmi:param name="HorizontalTextAlignment" type="HmiHorizontalAlignment"
                                    hmi-bind:value="{ HmiProps.Content.HorizontalTextAlignment }" />
                                <hmi:param name="VerticalTextAlignment" type="HmiVerticalAlignment" value="1" />
                            </hmi:include>
                        </g>
                    </svg>
                </hmi:template>
            </hmi:master-inline>
        </hmi-feature:recordHeader>
        
        <!--Cell Content-->
        <hmi-feature:dataTemplates>
            <hmi:master-inline>
                <hmi:param name="Padding" type="HmiPaddingPart" hmi-bind:value="{ HmiProps.CellPadding }" />
                <hmi:template>
                    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                        xmlns:hmi="http://svg.siemens.com/hmi/" xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                        xmlns:hmi-data-bind="http://svg.siemens.com/hmi/data/bind/" height="10" width="10">
        
                        <hmi:self type="system:HmiDataCellSystemPart" displayName="DataCell" name="datacell" version="1.0.0"
                            performanceClass="s">
                            <hmi:data type="cell-view"></hmi:data>
                            <hmi:paramDef name="Padding" type="HmiPaddingPart" />
                        </hmi:self>
                        <defs>
                          <hmi:localDef name="Graphic"         type="HmiGraphic"   hmi-data-bind:value="{ Content.Graphic.Url }"       />
                          <hmi:localDef name="Text"            type="string"       hmi-data-bind:value="{ Content.Data }"              />
                          <hmi:localDef name="TextColor"       type="HmiColor"     hmi-data-bind:value="{ Colors.Fore }"               />
                          <hmi:localDef name="GraphicWidth"    type="number"       hmi-data-bind:value="{ Content.Graphic.Width }"     />
                          <hmi:localDef name="GraphicHeight"   type="number"       hmi-data-bind:value="{ Content.Graphic.Height }"    />
                          
                          <hmi:localDef name="HasGraphic"             type="boolean"  hmi-bind:value="{{ LocalProps.Graphic != '' }}" />
                          <hmi:localDef name="ContentShowGraphic"     type="number"   hmi-bind:value="{{ and( HmiProps.Content.ContentMode != HmiContentMode.Text, LocalProps.HasGraphic ) ? 1 : 0 }}" />
                          <hmi:localDef name="ContentShowText"        type="number"   hmi-bind:value="{{ and( HmiProps.Content.ContentMode == HmiContentMode.GraphicOrText, LocalProps.Text != '') ? 1 : 0 }}" />
                          <hmi:localDef name="DisplayText"            type="string"   hmi-bind:value="{{ HmiProps.Content.TextTrimming == HmiTextTrimming.None ? LocalProps.Text : Converter.TextEllipsis( LocalProps.Text, Layout.ActualWidth, HmiProps.Font ) }}" />
                          
                          <hmi:localDef name="PositionX"          type="number"   hmi-bind:value="{{ HmiProps.Content.Spacing + ParamProps.Padding.Left }}" />
                          <hmi:localDef name="PositionY"          type="number"   value="3" />
                        </defs>
                        
                        <g>
                          <rect id="TIFID_ItemBGRect2" hmi-bind:width="{ HmiProps.Width }"
                                hmi-bind:height="{ HmiProps.Height }"
                                hmi-data-bind:fill="{{ Converter.RGBA( Colors.Back ) }}"
                                stroke-width="1" />
                          <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                                xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/" xmlns:hmi="http://svg.siemens.com/hmi/"
                                xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/" xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
                                xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/" xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
                                preserveAspectRatio="none">
                              <g id="Picture" hmi:if="{ LocalProps.ContentShowGraphic }">
                                <svg hmi-bind:x="{ LocalProps.PositionX }"
                                     hmi-bind:y="{ LocalProps.PositionY }"
                                     hmi-bind:width="{ Layout.ActualWidth }"
                                     hmi-bind:height="{ Layout.ActualHeight }">

                                  <image hmi-bind--xlink:href="{ LocalProps.Graphic }"
                                         hmi-bind:width="{ LocalProps.GraphicWidth }"
                                         hmi-bind:height="{ LocalProps.GraphicHeight }" />
                                </svg>
                              </g>

                              <g id="TextInFront" hmi:if="{ LocalProps.ContentShowText }">
                                  <svg hmi-bind:x="{ LocalProps.PositionX }"
                                      hmi-bind:y="{ LocalProps.PositionY }"
                                      hmi-bind:width="{ Layout.ActualWidth }"
                                      hmi-bind:height="{ Layout.ActualHeight }" >

                                    <g id="T2_TextGroup">
                                      <text id="TextText"
                                          hmi-bind:y="{{ ( Layout.ActualHeight - LocalProps.PositionY - 5 + HmiProps.Font.Size * 0.65 ) / 2 }}"
                                          hmi-bind:fill="{{ Converter.RGBA( LocalProps.TextColor ) }}" hmi-bind:font-size="{ HmiProps.Font.Size }"
                                          hmi-bind:font-style="{{ HmiProps.Font.Italic ? 'italic' : 'normal' }}"
                                          hmi-bind:font-weight="{ HmiProps.Font.Weight }" hmi-bind:font-family="{ HmiProps.Font.Name }"
                                          hmi-bind:text-decoration="{{ Converter.TextDecoration( HmiProps.Font ) }}"
                                          text-anchor="start">

                                        <hmi:text hmi-bind:value="{ LocalProps.DisplayText }" />
                                      </text>
                                    </g>
                                  </svg>
                              </g>
                          </svg>
                        </g>
                    </svg>
                </hmi:template>
            </hmi:master-inline>
        </hmi-feature:dataTemplates>
        
        <!--Row Background-->
        <hmi-feature:rowBackground>
            <hmi:master-include template="include.style.flat.rowbackground.svghmi">
            </hmi:master-include>
        </hmi-feature:rowBackground>
        
        <!--Column Background-->
        <hmi-feature:columnBackground>
            <hmi:master-include template="include.style.flat.columnbackground.svghmi">
            </hmi:master-include>
        </hmi-feature:columnBackground>
        
        <!--Grid lines-->
        <hmi-feature:gridlines>
            <hmi-feature:gridline position-filter="inner" expansion="inner" hmi-bind:stroke-width="{ HmiProps.GridLineWidth }"
            hmi-bind:stroke="{{ HmiProps.GridLineVisibility == 0 ? 'rgba(0,0,0,0)' : Converter.RGBA(  HmiProps.GridLineColor ) }}"
            orientation="column">
            </hmi-feature:gridline>
        </hmi-feature:gridlines>
        
        <!--Selection-->
        <hmi-feature:selection>
            <hmi:master-inline>
                <hmi:template>
                    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                        xmlns:hmi="http://svg.siemens.com/hmi/" xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/" height="10"
                        width="10">
                        <hmi:self type="system:HmiSelectionSystemPart" displayName="SelectionBorder" name="selectionborder"
                            version="1.0.0" performanceClass="s">
                        </hmi:self>
        
                        <defs>
                            <hmi:localDef name="ChangedBorderWidth" type="number"
                                hmi-bind:value="{{ HmiProps.BorderWidth / 2 }}" />
                        </defs>
        
                        <g id="TIFID_SelectionRect">
                            <rect id="ItemBGRect3" hmi-bind:x="{LocalProps.ChangedBorderWidth}"
                                hmi-bind:y="{LocalProps.ChangedBorderWidth}" hmi-bind:width="{ HmiProps.Width}"
                                hmi-bind:height="{ HmiProps.Height }" fill="none"
                                hmi-bind:stroke-width="{ HmiProps.BorderWidth }"
                                hmi-bind:stroke="{{Converter.RGBA(HmiProps.BorderColor)}}" />
                        </g>
                    </svg>
                </hmi:template>
            </hmi:master-inline>
        </hmi-feature:selection>
    </hmi-element:table>

    <rect id="ItemBGRect"
          hmi-bind:x="{ LocalProps.ReducedBorderWidth }"
          hmi-bind:y="{ LocalProps.ReducedBorderWidth }"
          hmi-bind:width="{{ Layout.ActualWidth - LocalProps.BorderWidth }}"
          hmi-bind:height="{{ Layout.ActualHeight - LocalProps.BorderWidth }}"
          fill="none"
          hmi-bind:stroke-width="{{ LocalProps.ShowFocus ? 4 : 0 }}"
          hmi-bind:stroke="{{ LocalProps.ShowFocus ? ParamProps.FocusColor : 'rgba(0,0,0,1)' }}"/>
</svg><!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     preserveAspectRatio="none">

    <hmi:self type="custom" displayName="Custom Extended Text Part" name="custom.extended.text.part" version="1.0.1" performanceClass="L">

        <hmi:paramDef name="Text"                       type="string"                   />
        <hmi:paramDef name="Font"                       type="HmiFontPart"              />
        <hmi:paramDef name="TextColor"                  type="HmiColor"                 />
        <hmi:paramDef name="HorizontalTextAlignment"    type="HmiHorizontalAlignment"   />
        <hmi:paramDef name="VerticalTextAlignment"      type="HmiVerticalAlignment"     />

    </hmi:self>

    <defs>
        <!-- Local definitions of this template -->
        <hmi:localDef name="TextHeightFontSize"         type="number" hmi-bind:value="{ ParamProps.Font.Size }" />
        <!-- x, y and baseline position of the text-->
        <hmi:localDef name="TextAnchorX"                type="string" hmi-bind:value="{{ ParamProps.HorizontalTextAlignment == HmiHorizontalAlignment.Center ? 'middle' : ParamProps.HorizontalTextAlignment == HmiHorizontalAlignment.Left ? 'start' : 'end' }}" />
        <hmi:localDef name="TextAnchorY"                type="string" hmi-bind:value="{{ ParamProps.VerticalTextAlignment == HmiVerticalAlignment.Center ? 'middle' : ParamProps.VerticalTextAlignment == HmiVerticalAlignment.Top ? 'start' : 'end' }}" />

    </defs>

    <g id="TextGroup">
        <text id="TextText"
              hmi-bind:x="{{ floor( (LocalProps.TextAnchorX == 'start' ? 0 : LocalProps.TextAnchorX == 'middle' ? (Layout.ActualWidth / 2) :  Layout.ActualWidth ) ) }}"
              hmi-bind:y="{{ floor( (LocalProps.TextAnchorY == 'start' ? ( LocalProps.TextHeightFontSize )
                                                                : LocalProps.TextAnchorY == 'middle' ? ( ( Layout.ActualHeight + LocalProps.TextHeightFontSize * 0.65 ) / 2 )
                                                                                                     : ( Layout.ActualHeight - LocalProps.TextHeightFontSize * 0.20 - 2     )  ) ) }}"
              hmi-bind:fill="{{ Converter.RGBA( ParamProps.TextColor ) }}"
              hmi-bind:font-size="{ ParamProps.Font.Size }"
              hmi-bind:font-style="{{ ParamProps.Font.Italic ? 'italic' : 'normal' }}"
              hmi-bind:font-weight="{ ParamProps.Font.Weight }"
              hmi-bind:font-family="{ ParamProps.Font.Name }"
              hmi-bind:text-decoration="{{ Converter.TextDecoration( ParamProps.Font ) }}"
              hmi-bind:text-anchor="{ LocalProps.TextAnchorX }" >
            
            <hmi:text hmi-bind:value="{ ParamProps.Text }" />
        </text>
    </g>
</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     preserveAspectRatio="none">

    <hmi:self type="custom" displayName="Custom Flat Text Field" name="custom.flat.text.field" version="1.0.1" performanceClass="L">

        <hmi:paramDef name="InputAllowed"               type="boolean"                                  />
        <hmi:paramDef name="Text"                       type="string"                   two-way="false" />
        <hmi:paramDef name="Font"                       type="HmiFontPart"                              />
        <hmi:paramDef name="TextColor"                  type="HmiColor"                                 />
        <hmi:paramDef name="HorizontalTextAlignment"    type="HmiHorizontalAlignment"                   />
        <hmi:paramDef name="VerticalTextAlignment"      type="HmiVerticalAlignment"                     />
        <hmi:paramDef name="TextTrimming"   		    type="HmiTextTrimming"   		                />
	    <hmi:paramDef name="TextWrapping"  				type="HmiTextWrapping"                          />
        <hmi:paramDef name="MultiLine"                  type="boolean"                                  />
        <hmi:paramDef name="Enabled"                    type="boolean"                                  />
        <hmi:paramDef name="ReadOnly"                   type="boolean"                                  />
        <hmi:paramDef name="TargetName"                 type="string"                                   />

    </hmi:self>

    <defs>

    </defs>

    <g id="TextBehind">
		<hmi-element:textField
			start-x="0"
			start-y="0"
			hmi-bind:width="{ Layout.ActualWidth }"
			hmi-bind:height="{ Layout.ActualHeight }"
			hmi-bind:horizontal-text-alignment="{ ParamProps.HorizontalTextAlignment }"
			hmi-bind:vertical-text-alignment="{ ParamProps.VerticalTextAlignment }"
			hmi-bind:value="{ ParamProps.Text }"
            hmi-bind:fore-color="{{ Converter.RGBA( ParamProps.TextColor ) }}"
            hmi-bind:target="{ ParamProps.TargetName }"
            output-format="{S}"
			hmi-bind:enabled="{ ParamProps.InputAllowed }"
            hmi-bind:multi-line="{ ParamProps.MultiLine }"
			hmi-bind:text-trimming="{ ParamProps.TextTrimming }"
			hmi-bind:text-wrapping="{ ParamProps.TextWrapping }"
			hmi-bind:read-only="{ ParamProps.ReadOnly }" >

            <hmi-feature:inputBehavior clear-on-activate="false" />
            <hmi-feature:font hmi-bind:scope="{ ParamProps.Font }" />

        </hmi-element:textField>
    </g>
</svg><!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:hmi="http://svg.siemens.com/hmi/"
    xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
    xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
    xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
    xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
    xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
    xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/"
    preserveAspectRatio="none">

    <!-- Parameters passed from the root template -->
    <hmi:self type="part:HmiToolBarPart" displayName="Extended ToolBar Part" name="extended.toolbar.part" version="1.0.1" performanceClass="L" >

        <hmi:paramDef name="Width"           type="number"   />
        <hmi:paramDef name="Height"          type="number"   />
        <hmi:paramDef name="ItemOperable"    type="boolean"  />
        <hmi:paramDef name="FocusColor"      type="string"   />
        <hmi:paramDef name="ShowFocusVisual" type="boolean" />
    </hmi:self>

    <defs>
        <!-- Local definitions of this template -->
        <!-- The height of the status bar currently is calculated by javascript code and passed to the template in its Height property -->

        <hmi:localDef name="BackColor"          type="string"                   hmi-bind:value="{{ Converter.RGBA( HmiProps.BackColor ) }}" />
        <hmi:localDef name="ControlBarOperable" type="boolean"                  hmi-bind:value="{{ and( HmiProps.Enabled, ParamProps.ItemOperable ) }}" />

        <hmi:localDef name="ScrollBarPart"      type="HmiScrollBarSystemPart"   hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiScrollBarSystemPart' ) }}" />
        <hmi:localDef name="ScrollBarPosition"  type="number"                   value="0" />
    </defs>

    <g hmi-flex:width="{ ParamProps.Width }" hmi-flex:height="{ ParamProps.Height }">
        <g id="TIFID_ToolBarCompositum" hmi-flex:direction="column" hmi-flex:grow="1" hmi-flex:shrink="0">
            <g id="TIFID_ToolBarElements" hmi:if="{ HmiProps.Visible }" hmi-flex:direction="row" hmi-flex:grow="1" hmi-flex:shrink="0">
                <rect id="ToolBarBackgroundRect"
                    hmi-bind:width="{ ParamProps.Width }"
                    hmi-bind:height="{ ParamProps.Height }"
                    hmi-bind:fill="{ LocalProps.BackColor }"
                />

                <hmi:include template="include.style.flat.controlbarelement.default.svghmi" hmi-bind:forEach="{ HmiProps.Elements }"
                    hmi-bind:x="{{ gt(Layout.ActualWidth, ParamProps.Width) ? (-1) * LocalProps.ScrollBarPosition : 0 }}"
                    y="0"
                    hmi-flex:padding="5"
                    hmi-flex:alignItems="{{ gt(Layout.ActualWidth, ParamProps.Width) ? 'start' : 'center' }}"
                    hmi-flex:direction="row"
                    hmi-flex:wrap="false"
                    hmi-flex:grow="1"
                    hmi-flex:shrink="0">

                    <hmi:param name="Font"                  type="HmiFontPart"  hmi-bind:value="{ HmiProps.Font }"           />
                    <hmi:param name="ControlBarOperable"    type="boolean"      hmi-bind:value="{ LocalProps.ControlBarOperable }" />
                    <hmi:param name="FocusColor"            type="string"       hmi-bind:value="{ ParamProps.FocusColor }" />
					<hmi:param name="ShowFocusVisual"       type="boolean"      hmi-bind:value="{ ParamProps.ShowFocusVisual }" />
                </hmi:include>
            </g>
            <g id="TFID_TollBarScrollbar" hmi:if="{{ and(HmiProps.Visible, gt(Layout.ActualWidth, ParamProps.Width)) }}" hmi-flex:grow="0" hmi-flex:shrink="0">
                <hmi:include template="include.style.flat.scrollbarstandalone.svghmi"
                    x="0"
                    hmi-bind:y="{{ LocalProps.ScrollBarPart.Thickness * (-1) }}"
                    hmi-bind:width="{{ gt(Layout.ActualWidth, ParamProps.Width) ? ParamProps.Width : 0 }}"
                    hmi-bind:height="{{ gt(Layout.ActualWidth, ParamProps.Width) ? LocalProps.ScrollBarPart.Thickness : 0 }}">

                    <hmi:param name="BackColor"           type="HmiColor"         hmi-bind:value="{ LocalProps.ScrollBarPart.BackColor }" />
                    <hmi:param name="ThumbBackColor"      type="HmiColor"         hmi-bind:value="{ LocalProps.ScrollBarPart.ThumbBackColor }" />
                    <hmi:param name="Orientation"         type="HmiOrientation"   hmi-bind:value="{{ HmiOrientation.Horizontal }}" />
                    <hmi:param name="Width"               type="number"           hmi-bind:value="{{ gt(Layout.ActualWidth, ParamProps.Width) ? ParamProps.Width : 0 }}" />
                    <hmi:param name="Height"              type="number"           hmi-bind:value="{{ gt(Layout.ActualWidth, ParamProps.Width) ? LocalProps.ScrollBarPart.Thickness : 0 }}" />
                    <hmi:param name="BeginValue"          type="number"           value="0" />
                    <hmi:param name="EndValue"            type="number"           hmi-bind:value="{ Layout.ActualWidth }" />
                    <hmi:param name="CurrentValue"        type="number"           hmi-bind:value="{ LocalProps.ScrollBarPosition }" />
                    <hmi:param name="VisibleValueRange"   type="number"           hmi-bind:value="{ ParamProps.Width}" />
                    <hmi:param name="Thickness"           type="number"           hmi-bind:value="{{ gt(Layout.ActualWidth, ParamProps.Width) ? LocalProps.ScrollBarPart.Thickness : 0 }}" />
                    <hmi:param name="SmallStepValueRange" type="number"           hmi-bind:value="{{ Layout.ActualWidth / ParamProps.Width }}" />
                    <hmi:param name="BorderWidth"         type="number"           value="0" />
                    <hmi:param name="OffsetX"             type="number"           value="0" />
                    <hmi:param name="OffsetY"             type="number"           value="0" />

                </hmi:include>
            </g>
        </g>
    </g>
</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/"
     pointer-events="none">
    <hmi:self type="system:HmiTooltipSystemPart" displayName="Flat Tooltip" name="style.flat.tooltip" version="2.9" performanceClass="s">
    </hmi:self>
    <defs>
        <hmi:localDef name="ToolTipStylePart"       type="HmiTooltipSystemPart"     hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiTooltipSystemPart' ) }}" />
        <hmi:localDef name="TextHeight"             type="number"                   hmi-bind:value="{{ Converter.TextHeight( HmiProps.Text, HmiProps.Font, true ) + 25 }}"/>
        <hmi:localDef name="TextWidth"              type="number"                   hmi-bind:value="{{ Converter.TextWidth( HmiProps.Text, HmiProps.Font, true ) + 30 }}"/>
        <hmi:localDef name="IsTextWidthExceeding"   type="boolean"                  hmi-bind:value="{{ gt( LocalProps.TextWidth, HmiProps.Width ) }}"/>
        <hmi:localDef name="IsTextHeightExceeding"  type="boolean"                  hmi-bind:value="{{ gt( LocalProps.TextHeight, HmiProps.Height ) }}"/>
        <hmi:localDef name="TooltipWidth"           type="number"                   hmi-bind:value="{{ LocalProps.IsTextWidthExceeding ? HmiProps.Width : LocalProps.TextWidth }}"/>
        <hmi:localDef name="TooltipHeight"          type="number"                   hmi-bind:value="{{ LocalProps.IsTextHeightExceeding ? HmiProps.Height : LocalProps.TextHeight }}"/>
        <hmi:localDef name="Left"                   type="number"                   hmi-bind:value="{{ eq( HmiProps.HorizontalAlignment, HmiHorizontalAlignment.Left ) ? 0 : ( HmiProps.Width - LocalProps.TooltipWidth ) }}"/>
        <hmi:localDef name="Top"                    type="number"                   hmi-bind:value="{{ eq( HmiProps.VerticalAlignment, HmiVerticalAlignment.Top ) ? 0 : ( HmiProps.Height - LocalProps.TooltipHeight ) }}"/>
    </defs>
    <g hmi-flex:width="{ HmiProps.Width }" hmi-flex:height="{ HmiProps.Height }" hmi-flex:justifyContent="start">
        <g opacity="1" hmi-flex:alignSelf="start">
            <!--Background rect-->
            <rect hmi-bind:x="{ LocalProps.Left }"
                  hmi-bind:y="{ LocalProps.Top }"
                  opacity="1"
                  stroke-width="1"
                  hmi-bind:stroke="{{ Converter.RGBA( LocalProps.ToolTipStylePart.BorderColor ) }}"
                  hmi-bind:width="{ LocalProps.TooltipWidth }"
                  hmi-bind:height="{ LocalProps.TooltipHeight }"
                  hmi-bind:fill="{{ Converter.RGBA( LocalProps.ToolTipStylePart.BackColor ) }}" />
            <!--Trend indicator image-->
            <image width="39"
                   height="20"
                   hmi-bind--xlink:href="{ HmiProps.Graphic }"/>
            <g>
                <hmi-element:textField hmi-bind:start-x="{{ 10 + LocalProps.Left }}"
                                       hmi-bind:start-y="{{ ( HmiProps.Graphic == '' ? 0 : 18 ) + LocalProps.Top }}"
                                       hmi-bind:width="{ LocalProps.TooltipWidth }"
                                       hmi-bind:height="{ LocalProps.TooltipHeight }"
                                       hmi-bind:vertical-text-alignment="{ HmiProps.Content.VerticalTextAlignment }"
                                       hmi-bind:horizontal-text-alignment="{ HmiProps.Content.HorizontalTextAlignment }"
                                       hmi-bind:value="{ HmiProps.Text }"
                                       hmi-bind:fore-color="{{ Converter.RGBA( LocalProps.ToolTipStylePart.ForeColor ) }}"
                                       output-format=""
                                       enabled="false"
                                       read-only="true"
                                       multi-line="true"
                                       hmi-bind:text-trimming="{{ LocalProps.IsTextWidthExceeding ? HmiTextTrimming.CharacterEllipsis : HmiTextTrimming.None }}">
                    <hmi-feature:font hmi-bind:scope="{ LocalProps.ToolTipStylePart.Font }" />
                </hmi-element:textField>
            </g>
        </g>
    </g>
</svg><!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2020. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg
     xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/"
     preserveAspectRatio="none"
     hmi:if="{ HmiProps.Visible }"
     hmi-flex:grow="{{ HmiProps.Visible ? HmiProps.SizeFactor : 0 }}" 
     hmi-flex:marginBottom = "{{ ParamProps.ShiftAxes ? 0 : (HmiProps.Visible == false ? 0 : ((HmiProps.$index == HmiProps.$count - 1) ? 0 :LocalProps.AreaDependentSpacing))}}"
     hmi-flex:marginRight = "{{ ParamProps.ShiftAxes ? (HmiProps.Visible == false ? 0 : ((HmiProps.$index == HmiProps.$count - 1) ? 0 :LocalProps.AreaDependentSpacing)): 0}}"
     >

    <hmi:self type="part:HmiTrendAreaPart" displayName="Flat Trend Area" name="style.flat.trend.area" version="2.9">
        <hmi:paramDef name="BackColor"              type="HmiColor" />
        <hmi:paramDef name="AreaSpacing"            type="number"   />
        <hmi:paramDef name="ShiftAxes"              type="boolean"  />
        <hmi:paramDef name="Online"                 type="boolean"  />
        <hmi:paramDef name="ShowRuler"              type="boolean"  />
        <hmi:paramDef name="ShowStatisticRulers"    type="boolean"  />
        <hmi:paramDef name="TimeZone"               type="number"   />
        <hmi:paramDef name="ExtendRulerToAxis"      type="boolean"  />
        <hmi:paramDef name="LegendFont"             type="HmiFontPart"  />
        <hmi:paramDef name="LegendForeColor"        type="HmiColor"  />
        <hmi:paramDef name="LegendVisibilty"        type="boolean"  />
    </hmi:self>

    <defs>
        <hmi:localDef name="LegendTextHeightWithFont"   type="number"                         hmi-bind:value="{{ Converter.TextHeight( 'XY', ParamProps.LegendFont ) }}"/>
        <hmi:localDef name="LegendTextHeight"           type="number"                         value="30"/>
        <hmi:localDef name="MarginFactor"               type="number"                         value="10"/>
        <hmi:localDef name="MarginBetweenAreas"         type="number"                         hmi-bind:value="{{ ParamProps.LegendVisibilty ? 10 : 20 }}"/>
        <hmi:localDef name="RulerExtension"             type="number"                         hmi-bind:value="{{( ParamProps.ExtendRulerToAxis ? -1 : 0 ) }}" />
        <hmi:localDef name="OffsetBetweenText"          type="number"                         value="5"/>
        <hmi:localDef name="LegendWidth"                type="number"                         value="180"/>
        <hmi:localDef name="VertScrollBarPosition"      type="number"                         value="0"     />
        <hmi:localDef name="LegendMaxHeight"            type="number"                         hmi-bind:value="{{ ParamProps.LegendVisibilty ? ( gt( HmiProps.VisibleTrendCount, 0 ) ? ( (4 * LocalProps.LegendTextHeight) + (4 * LocalProps.OffsetBetweenText) ) : 0 ) : 0 }}" />
        <hmi:localDef name="ScrollBarPart"              type="HmiScrollBarSystemPart"         hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiScrollBarSystemPart' ) }}" />
        <hmi:localDef name="LegendFactor"               type="number"                         value="1" />
        <hmi:localDef name="LegendRightMargin"          type="number"                         hmi-bind:value="{{ LocalProps.ScrollBarPart.Thickness + ( 2 * LocalProps.MarginFactor ) }}" />
        <hmi:localDef name="RulerIndicatorSystemPart"   type="HmiRulerIndicatorSystemPart"    hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiRulerIndicatorSystemPart' ) }}" />
        <hmi:localDef name="StartX"                     type="number"                         hmi-bind:value="{{ ParamProps.ShiftAxes ? 0 : LocalProps.MarginFactor }}" />
        <hmi:localDef name="AreaDependentSpacing"       type="number"                         hmi-bind:value="{{ gt( HmiProps.$count, 1 ) ? ParamProps.AreaSpacing : 0 }}" />
    </defs>

    <g id="Background">
        <g hmi-flex:width="{ Layout.ActualWidth }" hmi-flex:height="{ Layout.ActualHeight }" hmi-flex:direction="column-reverse" hmi-flex:justifyContent="end">
            <g hmi-flex:grow="1">
                <hmi-element:chart hmi-bind:area-spacing="{ ParamProps.AreaSpacing }"
                                   hmi-bind:shift-axes="{ ParamProps.ShiftAxes }"
                                   hmi-bind:config="{ HmiProps }"
                                   hmi-bind:online="{ ParamProps.Online }"
                                   hmi-bind:show-ruler="{ ParamProps.ShowRuler }"
                                   hmi-bind:show-selector-rulers="{ ParamProps.ShowStatisticRulers }"
                                   hmi-bind:timezone="{ ParamProps.TimeZone }"
                                   hmi-bind:height="{{ Layout.ActualHeight - ( ParamProps.ShiftAxes ? LocalProps.MarginBetweenAreas : 0 ) }}"
                                   hmi-bind:width="{{ Layout.ActualWidth - ( ParamProps.ShiftAxes ? 0 : ( 2 * LocalProps.MarginFactor ) ) }}"
                                   hmi-bind:start-x="{ LocalProps.StartX }" >

                    <hmi-feature:axes>
                          <hmi-feature:axis>
                              <!--Add structuring and visual children here.-->
                              <hmi-feature:areaGridlines />
                          </hmi-feature:axis>
                    </hmi-feature:axes>
                    <hmi-feature:rulers hmi-bind:low-extension="{ LocalProps.RulerExtension }"
                                        hmi-bind:high-extension="{ LocalProps.RulerExtension }" >
                        <hmi-feature:rulerIndicator content-height="300"
                                                    content-width="300">
                            <hmi:master-inline>
                                <hmi:param name="ShiftAxes"  type="boolean"    hmi-bind:value="{ ParamProps.ShiftAxes }"/>
                                <hmi:param name="TimeZone"   type="number"     hmi-bind:value="{ ParamProps.TimeZone }"/>
                                <hmi:param name="RulerColor" type="HmiColor"   hmi-bind:value="{ HmiProps.Ruler.Color }"/>
                                <hmi:template>
                                    <svg xmlns="http://www.w3.org/2000/svg"
                                         xmlns:xlink="http://www.w3.org/1999/xlink"
                                         xmlns:hmi="http://svg.siemens.com/hmi/"
                                         xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                                         xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/"
                                         xmlns:hmi-data-bind="http://svg.siemens.com/hmi/data/bind/">
                                        <hmi:self type="system:HmiRulerIndicatorSystemPart" displayName="Ruler" name="ruler" version="1.0.0" performanceClass="s">
                                            <hmi:paramDef name="ShiftAxes"      type="boolean"   />
                                            <hmi:paramDef name="TimeZone"       type="number"    />
                                            <hmi:paramDef name="RulerColor"     type="HmiColor"  />
                                            <hmi:data type="ruler-details"></hmi:data>
                                        </hmi:self>

                                        <defs>
                                            <!--Local definitions of this template-->
                                            <hmi:localDef name="RawRulerText"           type="string"   hmi-data-bind:value="{ Content.Text1 }" />
                                            <hmi:localDef name="RulerText"              type="string"   hmi-bind:value="{{ Converter.FormatPattern( LocalProps.RawRulerText, HmiProps.OutputFormat, ParamProps.TimeZone ) }}" />
                                            <hmi:localDef name="IsMultiline"            type="boolean"  hmi-bind:value="{{ Converter.IsMultiline( LocalProps.RulerText ) }}" />
                                            <hmi:localDef name="TextHeight"             type="number"   hmi-bind:value="{{ Converter.TextHeight( LocalProps.RulerText, HmiProps.Font, LocalProps.IsMultiline ) }}" />
                                            <hmi:localDef name="RectHeight"             type="number"   hmi-bind:value="{{ LocalProps.IsMultiline ? LocalProps.TextHeight + 5 : LocalProps.TextHeight + 12 }}" />
                                            <hmi:localDef name="TextWidth"              type="number"   hmi-bind:value="{{ Converter.TextWidth( LocalProps.RulerText, HmiProps.Font, LocalProps.IsMultiline ) }}" />
                                            <hmi:localDef name="RulerDimension"         type="number"   hmi-bind:value="{{ ParamProps.ShiftAxes ? HmiProps.Height : HmiProps.Width }}" />
                                            <hmi:localDef name="MidRulerDimension"      type="number"   hmi-bind:value="{{ LocalProps.RulerDimension / 2 }}" />
                                            <hmi:localDef name="Derivation"             type="number"   hmi-bind:value="{{ -LocalProps.RulerDimension * HmiProps.RulerPosition / 2 }}" />
                                            <hmi:localDef name="RectWidth"              type="number"   hmi-bind:value="{{ LocalProps.TextWidth + 18 }}" />
                                            <hmi:localDef name="RectWidthPadding"       type="number"   hmi-bind:value="{{ LocalProps.RectWidth + 10 }}" />
                                            <hmi:localDef name="OffsetX"                type="number"   hmi-bind:value="{{ LocalProps.Derivation + ( LocalProps.RectWidthPadding / 2 ) }}" />
                                            <hmi:localDef name="RightLimit"             type="number"   hmi-bind:value="{{ LocalProps.RectWidthPadding - LocalProps.MidRulerDimension }}" />
                                            <hmi:localDef name="LowerLimitReached"      type="boolean"  hmi-bind:value="{{ gt( LocalProps.OffsetX, LocalProps.MidRulerDimension) }}" />
                                            <hmi:localDef name="UpperLimitReached"      type="boolean"  hmi-bind:value="{{ lt( LocalProps.OffsetX, LocalProps.RightLimit ) }}" />
                                            <hmi:localDef name="RectXY"                 type="number"   hmi-bind:value="{{ LocalProps.LowerLimitReached ? -LocalProps.MidRulerDimension : ( LocalProps.UpperLimitReached ? -LocalProps.RightLimit : -LocalProps.OffsetX ) }}" />
                                            <hmi:localDef name="TextX"                  type="number"   hmi-bind:value="{{ LocalProps.Derivation - LocalProps.TextHeight - 5 }}" />
                                            <hmi:localDef name="ShiftX"                 type="number"   hmi-bind:value="{{ LocalProps.LowerLimitReached ? LocalProps.TextX - ( LocalProps.OffsetX - ( HmiProps.Height / 2 ) ) : ( LocalProps.UpperLimitReached ? LocalProps.TextX + LocalProps.RightLimit - LocalProps.OffsetX : LocalProps.TextX )}}" />
                                            <!--When axis shifts then Width and height are interchanged-->
                                        </defs>

                                        <g hmi-flex:width="{ HmiProps.Width }"
                                           hmi-flex:height="{ HmiProps.Height }"
                                           hmi-flex:justifyContent="center"
                                           hmi-flex:direction="{{ ParamProps.ShiftAxes ? 'column' : 'row' }}" >
                                            <g hmi-flex:alignSelf="{{ ParamProps.ShiftAxes ? 'end' : 'start' }}" >
                                                <rect 
                                                      hmi-bind:x="{{ ParamProps.ShiftAxes ? -LocalProps.RectHeight - 1 : LocalProps.RectXY }}"
                                                      hmi-bind:y="{{ ParamProps.ShiftAxes ? LocalProps.RectXY : 1 }}"
                                                      hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}"
                                                      hmi-bind:width="{{ ParamProps.ShiftAxes ? LocalProps.RectHeight : LocalProps.RectWidthPadding }}"
                                                      hmi-bind:height="{{ ParamProps.ShiftAxes ? LocalProps.RectWidthPadding : LocalProps.RectHeight}}"
                                                      hmi-bind:stroke = "{{ Converter.RGBA( ParamProps.RulerColor ) }}"/>
                                                <line id="ItemBorder"
                                                      hmi-bind:x1="{{ ParamProps.ShiftAxes ? -LocalProps.RectHeight : LocalProps.RectXY }}"
                                                      hmi-bind:y1="{{ ParamProps.ShiftAxes ? LocalProps.RectXY : LocalProps.RectHeight }}"
                                                      hmi-bind:x2="{{ ParamProps.ShiftAxes ? -LocalProps.RectHeight : LocalProps.RectXY + LocalProps.RectWidthPadding}}"
                                                      hmi-bind:y2="{{ ParamProps.ShiftAxes ? LocalProps.RectXY + LocalProps.RectWidthPadding : LocalProps.RectHeight }}"
                                                      hmi-bind:stroke="{{ Converter.RGBA( ParamProps.RulerColor) }}"
                                                      stroke-width="2"/>
                                                <g hmi:if="{ ParamProps.ShiftAxes }"
                                                   hmi-bind:transform="rotate(-90, {{ -LocalProps.TextHeight - 5 }} ,0)"
                                                   stroke="none">
                                                    <hmi-element:textField hmi-bind:start-x="{{ LocalProps.ShiftX - ( LocalProps.TextWidth / 2 ) }}"
                                                                           horizontal-text-alignment="center"
                                                                           hmi-bind:start-y="{{ LocalProps.IsMultiline ? 2 : 0 }}"
                                                                           hmi-bind:width="{ LocalProps.TextWidth }"
                                                                           hmi-bind:height="{ LocalProps.TextHeight }"
                                                                           hmi-bind:multi-line="{ LocalProps.IsMultiline }"
                                                                           enabled="false"
                                                                           read-only="true"
                                                                           hmi-bind:value="{ LocalProps.RulerText }"
                                                                           hmi-bind:fore-color="{{ Converter.RGBA( ParamProps.RulerColor ) }}"
                                                                           hmi-bind:horizontal-scrollbar-visibility="{{ HmiScrollBarVisibility.Collapsed }}"
                                                                           hmi-bind:vertical-scrollbar-visibility="{{ HmiScrollBarVisibility.Collapsed }}">
                                                        <hmi-feature:font hmi-bind:size="{ HmiProps.Font.Size }"
                                                                          hmi-bind:italic="{ HmiProps.Font.Italic }"
                                                                          hmi-bind:weight="{ HmiProps.Font.Weight }"
                                                                          hmi-bind:name="{ HmiProps.Font.Name }" />
                                                    </hmi-element:textField>
                                                </g>
                                                <g hmi:if="{{ not( ParamProps.ShiftAxes ) }}"
                                                    stroke="none">
                                                  <hmi-element:textField hmi-bind:start-x="{{ LocalProps.RectXY != null ? LocalProps.RectXY : 0 }}"
                                                                         horizontal-text-alignment="center"
                                                                         start-y="1"
                                                                         hmi-bind:width="{ LocalProps.RectWidthPadding  }"
                                                                         hmi-bind:height="{ LocalProps.RectHeight }"
                                                                         hmi-bind:multi-line="{ LocalProps.IsMultiline }"
                                                                         enabled="false"
                                                                         read-only="true"
                                                                         hmi-bind:value="{ LocalProps.RulerText }"
                                                                         hmi-bind:fore-color="{{ Converter.RGBA( ParamProps.RulerColor ) }}"
                                                                         hmi-bind:horizontal-scrollbar-visibility="{{ HmiScrollBarVisibility.Collapsed }}"
                                                                         hmi-bind:vertical-scrollbar-visibility="{{ HmiScrollBarVisibility.Collapsed }}">
                                                    <hmi-feature:font hmi-bind:italic="{ HmiProps.Font.Italic }"
                                                                      hmi-bind:size="{ HmiProps.Font.Size }"
                                                                      hmi-bind:weight="{ HmiProps.Font.Weight }"
                                                                      hmi-bind:name="{ HmiProps.Font.Name }" />
                                                  </hmi-element:textField>
                                                </g>
                                            </g>
                                        </g>
                                    </svg>
                                </hmi:template>
                            </hmi:master-inline>
                        </hmi-feature:rulerIndicator>
                        <hmi-feature:rulerIndicator ruler-filter="regular"
                                                    indicator-filter="secondary"
                                                    content-height="300"
                                                    content-width="300">
                            <hmi:master-inline>
                                <hmi:param name="ShiftAxes"        type="boolean"              hmi-bind:value="{ ParamProps.ShiftAxes }"/>
                                <hmi:template>
                                    <svg xmlns="http://www.w3.org/2000/svg"
                                         xmlns:xlink="http://www.w3.org/1999/xlink"
                                         xmlns:hmi="http://svg.siemens.com/hmi/"
                                         xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                                         xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/"
                                         xmlns:hmi-data-bind="http://svg.siemens.com/hmi/data/bind/"  >
                                        <hmi:self type="system:HmiRulerIndicatorSystemPart" displayName="Ruler" name="ruler" >
                                           <hmi:paramDef name="ShiftAxes"        type="boolean"  />
                                           <hmi:data type="ruler-details"></hmi:data>
                                        </hmi:self>

                                        <defs>
                                            <hmi:localDef name="RulerText"              type="string"               hmi-data-bind:value="{ Content.Text1 }" />
                                            <hmi:localDef name="TextPadding"            type="number"               value="5"/>
                                            <hmi:localDef name="TextMinWidth"           type="number"               hmi-bind:value="{{ Converter.TextWidth( '123456', HmiProps.Font ) }}" />
                                            <hmi:localDef name="TextHeight"             type="number"               hmi-bind:value="{{ Converter.TextHeight( LocalProps.RulerText, HmiProps.Font ) }}" />
                                            <hmi:localDef name="TextWidth"              type="number"               hmi-bind:value="{{ Converter.TextWidth( LocalProps.RulerText, HmiProps.Font ) + LocalProps.TextPadding }}" />
                                            <hmi:localDef name="RulerTextWidth"         type="number"               hmi-bind:value="{{ Converter.Max( LocalProps.TextMinWidth, LocalProps.TextWidth ) + 10 }}" />
                                            <hmi:localDef name="TextX"                  type="number"               hmi-bind:value="{{ LocalProps.RulerTextWidth * ( ParamProps.ShiftAxes ? 0.8 : 0.55 ) }}"/>
                                            <hmi:localDef name="RulerDimension"         type="number"               hmi-bind:value="{{ ParamProps.ShiftAxes ? HmiProps.Height : HmiProps.Width }}" />
                                            <hmi:localDef name="Derivation"             type="number"               hmi-bind:value="{{ -LocalProps.RulerDimension * HmiProps.RulerPosition / 2 }}" />
                                            <hmi:localDef name="PolylinePoint"          type="number"               hmi-bind:value="{{ LocalProps.RulerTextWidth - LocalProps.Derivation }}"/>
                                            <hmi:localDef name="PolylinePoint1"         type="number"               value="0"/>
                                            <hmi:localDef name="PolylinePoint2"         type="number"               hmi-bind:value="{{ LocalProps.TextHeight * ( ParamProps.ShiftAxes ? 0.8 : 0.55 ) }}"/>
                                            <hmi:localDef name="PolylinePoint3"         type="number"               hmi-bind:value="{{ LocalProps.PolylinePoint2 - LocalProps.Derivation }}"/>
                                            <hmi:localDef name="Rotate"                 type="boolean"              hmi-bind:value="{{ gt(( LocalProps.PolylinePoint ), ( LocalProps.RulerDimension / 2 )) ? true : false }}"/>
                                            <hmi:localDef name="FontStyle"              type="string"               hmi-bind:value="{{ HmiProps.Font.Italic ? 'italic' : 'normal' }}"/>
                                            <hmi:localDef name="TextDecoration"         type="string"               hmi-bind:value="{{ Converter.TextDecoration( HmiProps.Font ) }}"/>
                                            <hmi:localDef name="ToolTipStylePart"       type="HmiTooltipSystemPart" hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiTooltipSystemPart' ) }}" />
                                            <hmi:localDef name="PolylinePadding"        type="number"               hmi-bind:value="{{ LocalProps.PolylinePoint + LocalProps.TextPadding }}" />
                                            <hmi:localDef name="PolylineReducedPadding" type="number"               hmi-bind:value="{{ LocalProps.PolylinePoint - LocalProps.TextPadding }}" />
                                            <hmi:localDef name="MidRulerTextWidth"      type="number"               hmi-bind:value="{{ LocalProps.RulerTextWidth / 2 }}" />
                                            <hmi:localDef name="PaddedRulerTextWidth"   type="number"               hmi-bind:value="{{ LocalProps.MidRulerTextWidth - LocalProps.Derivation }}" />
                                        </defs>

                                        <g hmi-flex:width="{ HmiProps.Width }"
                                           hmi-flex:height="{ HmiProps.Height }"
                                           hmi-flex:justifyContent="center"
                                           hmi-flex:direction="{{ ParamProps.ShiftAxes ? 'column' : 'row' }}">
                                            <g hmi-flex:alignSelf="center">
                                                <polyline hmi:if="{ ParamProps.ShiftAxes }"
                                                          hmi-bind:points="{ LocalProps.PolylinePoint1 } , {{ -LocalProps.Derivation }} ,
                                                                           { LocalProps.PolylinePoint2 } , { LocalProps.PolylinePoint3 } ,
                                                                           { LocalProps.PolylinePoint2 } , { LocalProps.PolylinePadding } ,
                                                                           {{ -LocalProps.PolylinePoint2 }} , { LocalProps.PolylinePadding } ,
                                                                           {{ -LocalProps.PolylinePoint2 }} , { LocalProps.PolylinePoint3 } ,
                                                                           { LocalProps.PolylinePoint1 } , {{ -LocalProps.Derivation }}"
                                                          hmi-bind:fill="{{ Converter.RGBA( LocalProps.ToolTipStylePart.BackColor ) }}"
                                                          hmi-bind:stroke="{{ Converter.RGBA( LocalProps.ToolTipStylePart.BorderColor ) }}"
                                                          hmi-bind:transform="rotate( {{ LocalProps.Rotate ? 180 : 0 }}, {{ LocalProps.Rotate ? LocalProps.PolylinePoint1 - 5 : 0 }}, {{ -LocalProps.Derivation }} )">
                                                </polyline>
                                                <polyline hmi:if="{{ not( ParamProps.ShiftAxes ) }}"
                                                          hmi-bind:points="{{ -LocalProps.Derivation }} , { LocalProps.PolylinePoint1 } ,
                                                                           { LocalProps.PolylinePoint3 } , {{ -LocalProps.PolylinePoint2 }} ,
                                                                           { LocalProps.PolylineReducedPadding } , {{ -LocalProps.PolylinePoint2 }} ,
                                                                           { LocalProps.PolylineReducedPadding } , { LocalProps.PolylinePoint2 } ,
                                                                           { LocalProps.PolylinePoint3 } , { LocalProps.PolylinePoint2 } ,
                                                                           {{ -LocalProps.Derivation }} , { LocalProps.PolylinePoint1 }"
                                                          hmi-bind:fill="{{ Converter.RGBA( LocalProps.ToolTipStylePart.BackColor ) }}"
                                                          hmi-bind:stroke="{{ Converter.RGBA( LocalProps.ToolTipStylePart.BorderColor ) }}"
                                                          hmi-bind:transform="rotate( {{ LocalProps.Rotate ? 180 : 0 }}, {{ LocalProps.Rotate ? -LocalProps.Derivation - 1 : 0 }}, { LocalProps.PolylinePoint1 } )">
                                                </polyline>
                                                <text hmi:if="{ ParamProps.ShiftAxes }"
                                                      hmi-bind:width="{ LocalProps.RulerTextWidth }"
                                                      hmi-bind:height="{ LocalProps.TextHeight }"
                                                      hmi-bind:x="{{ LocalProps.Rotate ? LocalProps.TextPadding : -LocalProps.TextPadding }}"
                                                      hmi-bind:y="{{ LocalProps.Rotate ? -LocalProps.MidRulerTextWidth - LocalProps.Derivation - 10 : LocalProps.PaddedRulerTextWidth }}"
                                                      hmi-bind:font-size="{ LocalProps.ToolTipStylePart.Font.Size }"
                                                      hmi-bind:font-style="{ LocalProps.FontStyle }"
                                                      hmi-bind:font-family="{ LocalProps.ToolTipStylePart.Font.Name }"
                                                      hmi-bind:fill="{{ Converter.RGBA( LocalProps.ToolTipStylePart.ForeColor ) }}"
                                                      hmi-bind:text-decoration="{ LocalProps.TextDecoration }"
                                                      text-anchor="middle"
                                                      stroke="none"
                                                      dominant-baseline="central"
                                                      hmi-bind:transform="rotate(-90, 0, {{ LocalProps.Rotate ? ( -LocalProps.MidRulerTextWidth ) - LocalProps.Derivation : LocalProps.PaddedRulerTextWidth }} )">
                                                    <hmi:text hmi-bind:value="{ LocalProps.RulerText }" />
                                                </text>
                                                <text hmi:if="{{ not( ParamProps.ShiftAxes ) }}"
                                                      hmi-bind:width="{ LocalProps.RulerTextWidth }"
                                                      hmi-bind:height="{ LocalProps.TextHeight }"
                                                      hmi-bind:x="{{ LocalProps.Rotate ? -LocalProps.Derivation - LocalProps.TextX : LocalProps.TextX - LocalProps.Derivation }}"
                                                      hmi-bind:y="{{ LocalProps.TextHeight / 3 + 1 }}"
                                                      hmi-bind:font-size="{ LocalProps.ToolTipStylePart.Font.Size }"
                                                      hmi-bind:font-style="{ LocalProps.FontStyle }"
                                                      hmi-bind:name="{ LocalProps.ToolTipStylePart.Font.Name }"
                                                      hmi-bind:fill="{{ Converter.RGBA( LocalProps.ToolTipStylePart.ForeColor ) }}"
                                                      hmi-bind:text-decoration="{ LocalProps.TextDecoration }"
                                                      text-anchor="middle"
                                                      stroke="none">
                                                    <hmi:text hmi-bind:value="{ LocalProps.RulerText }" />
                                                </text>
                                            </g>
                                        </g>
                                    </svg>
                                </hmi:template>
                            </hmi:master-inline>
                        </hmi-feature:rulerIndicator>
                    </hmi-feature:rulers>

                    <hmi-feature:graphs>
                        <hmi-feature:graph>
                            <hmi-feature:graphMarker/>
                            <hmi-feature:tooltip>
                                <hmi:master-include template="include.style.flat.tooltip.svghmi">
                                </hmi:master-include>
                            </hmi-feature:tooltip>
                        </hmi-feature:graph>
                    </hmi-feature:graphs>

                </hmi-element:chart>
            </g>

            <g hmi-flex:maxHeight="{{ LocalProps.LegendMaxHeight + LocalProps.LegendFactor }}" hmi-flex:marginTop="{{ ParamProps.ShiftAxes ? LocalProps.MarginFactor : 0  }}" hmi-flex:marginLeft="{ LocalProps.StartX }" hmi:if="{ ParamProps.LegendVisibilty }">
                <defs>
                    <clipPath id="legendClipPath">
                        <rect id="legendClipRect"
                              hmi-bind:width="{ Layout.ActualWidth }"
                              hmi-bind:height="{{ gt( Layout.ActualHeight, LocalProps.LegendMaxHeight ) ? LocalProps.LegendMaxHeight : Layout.ActualHeight }}"/>
                    </clipPath>
                </defs>

                <g id="TIFID_TrendLegendsLabel" clip-path="url(#legendClipPath)" hmi-flex:maxWidth="{{ Layout.ActualWidth - LocalProps.LegendRightMargin - ( ParamProps.ShiftAxes ? LocalProps.AreaDependentSpacing : 0 ) }}" hmi-flex:minHeight="{{ ParamProps.ShiftAxes ? ( gt( LocalProps.LegendMaxHeight, 0 ) : round( LocalProps.LegendMaxHeight ) : 0 ) : 0 }}">
                    <hmi:inline hmi-bind:forEach="{ HmiProps.Trends }"
                               hmi-bind:y="{{ gt( Layout.ActualHeight , round( LocalProps.LegendMaxHeight )) ? -( LocalProps.VertScrollBarPosition ) : 0 }}"
                               hmi-flex:direction="row"
                               hmi-flex:wrap="true" hmi-flex:alignContent="start"  >
                    <hmi:param name="Font"                     type="HmiFontPart"    hmi-bind:value="{ ParamProps.LegendFont }" />
                    <hmi:param name="SelectedLegendBackColor"  type="HmiColor"       hmi-bind:value="{ HmiProps.Ruler.Color }" />
                    <hmi:param name="SelectedLegendForeColor"  type="HmiColor"       hmi-bind:value="{ LocalProps.RulerIndicatorSystemPart.BackColor }" />
                    <hmi:param name="LegendWidth"              type="number"         hmi-bind:value="{ LocalProps.LegendWidth }"/>
                    <hmi:param name="OffsetBetweenText"        type="number"         hmi-bind:value="{ LocalProps.OffsetBetweenText }"/>
                    <hmi:param name="LegendTextHeight"         type="number"         hmi-bind:value="{ LocalProps.LegendTextHeight }"/>
                    <hmi:param name="SelectedTrendId"          type="number"         hmi-bind:value="{ HmiProps.SelectedTrend }"/>
                    <hmi:param name="BackColor"                type="HmiColor"       hmi-bind:value="{ ParamProps.BackColor }"/>
                    <hmi:param name="LegendTextHeightWithFont" type="number"         hmi-bind:value="{ LocalProps.LegendTextHeightWithFont }"/>
                    <hmi:param name="LegendForeColor"          type="HmiColor"       hmi-bind:value="{ ParamProps.LegendForeColor }" />
                    <hmi:param name="VisibleTrendCount"        type="number"         hmi-bind:value="{ HmiProps.VisibleTrendCount }" />

                    <hmi:template>
                      <svg xmlns="http://www.w3.org/2000/svg"
                           xmlns:xlink="http://www.w3.org/1999/xlink"
                           xmlns:hmi="http://svg.siemens.com/hmi/"
                           xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                           xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/"
                           xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
                           xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
                           hmi:if="{ HmiProps.Visible }"
                           hmi-flex:minHeight="{{ HmiProps.Visible ? ParamProps.LegendTextHeight + ParamProps.OffsetBetweenText : 0 }}"
                           hmi-flex:width="{{ HmiProps.Visible ? ParamProps.LegendWidth : 0 }}">

                        <hmi:self type="part:HmiTrendPart">
                          <hmi:paramDef name="Font"                     type="HmiFontPart"  />
                          <hmi:paramDef name="SelectedLegendBackColor"  type="HmiColor"     />
                          <hmi:paramDef name="SelectedLegendForeColor"  type="HmiColor"     />
                          <hmi:paramDef name="LegendWidth"              type="number"  />
                          <hmi:paramDef name="OffsetBetweenText"        type="number"  />
                          <hmi:paramDef name="LegendTextHeight"         type="number"  />
                          <hmi:paramDef name="SelectedTrendId"          type="number" two-way="true" />
                          <hmi:paramDef name="BackColor"                type="HmiColor" />
                          <hmi:paramDef name="LegendTextHeightWithFont" type="number" />
                          <hmi:paramDef name="LegendForeColor"          type="HmiColor" />
                          <hmi:paramDef name="VisibleTrendCount"        type="number" />
                        </hmi:self>

                        <defs>
                          <hmi:localDef name="InnerPadding"        type="number" value="10"/>
                          <hmi:localDef name="LegendTextStartPos"  type="number" value="25"/>
                          <hmi:localDef name="TrendDisplayText"    type="string" hmi-bind:value="{{ Converter.TextEllipsis( HmiProps.TrendDescription, ( ( ParamProps.LegendWidth - LocalProps.LegendTextStartPos ) - LocalProps.InnerPadding ) , ParamProps.Font )}}" />
                          <hmi:localDef name="LegendTextMidPos"    type="number" hmi-bind:value="{{ ParamProps.LegendTextHeight / 2 }}"/>
                          <hmi:localDef name="DashTypeSolid"       type="string" value="null" />
                          <hmi:localDef name="DashTypeDash"        type="string" value="2,1" />
                          <hmi:localDef name="DashTypeDot"         type="string" value="1,1" />
                          <hmi:localDef name="DashTypeDashDot"     type="string" value="2,1,1,1" />
                          <hmi:localDef name="DashTypeDashDotDot"  type="string" value="2,1,1,1,1,1" />
                          <hmi:localDef name="DashArray"           type="string" hmi-bind:value="{{ HmiProps.DashType == 0 ? LocalProps.DashTypeSolid : HmiProps.DashType == 1 ? LocalProps.DashTypeDash : HmiProps.DashType == 2 ? LocalProps.DashTypeDot : HmiProps.DashType == 3 ? LocalProps.DashTypeDashDot : LocalProps.DashTypeDashDotDot }}" />

                          <clipPath id="legendTextClipPath">
                            <rect id="legendTextClip"
                                  hmi-bind:width="{ Layout.ActualWidth }"
                                  hmi-bind:height="{ ParamProps.LegendTextHeight }"/>
                          </clipPath>

                          <hmi:action id="onMouseEnter">
                            <hmi:sendCommand name="SHOW_TOOLTIP"    type="string" hmi-bind:value="{ HmiProps.TrendDescription }" hmi-bind:condition="{{ gt( Converter.TextWidth( HmiProps.TrendDescription, ParamProps.Font ), ( Layout.ActualWidth - 50 ) ) }}"/>
                          </hmi:action>

                          <hmi:action id="onMouseLeave">
                            <hmi:sendCommand name="HIDE_TOOLTIP" />
                          </hmi:action>

                          <hmi:action id="onSelectingTrend">
                            <hmi:setProperty name="ParamProps.SelectedTrendId"   type="number"  hmi-bind:value="{ HmiProps.ElementID }"  />
                          </hmi:action>

                        </defs>
                        <g hmi-event:down="url(#onSelectingTrend)" clip-path="url(#legendTextClipPath)">
                          <rect hmi-bind:width="{ Layout.ActualWidth }"
                                hmi-bind:height="{ ParamProps.LegendTextHeight }"
                                hmi-bind:fill="{{ and( gt( ParamProps.VisibleTrendCount, 1 ), eq( HmiProps.ElementID, ParamProps.SelectedTrendId )) ? Converter.RGBA( ParamProps.SelectedLegendBackColor ) : Converter.RGBA( ParamProps.BackColor ) }}">
                          </rect>
                          <line hmi-bind:stroke="{{ Converter.RGBA( HmiProps.LineColor ) }}"
                                hmi-bind:stroke-dasharray="{ LocalProps.DashArray }"
                                stroke-width="2"
                                hmi-bind:x1="{ LocalProps.InnerPadding }"
                                hmi-bind:y1="{ LocalProps.LegendTextMidPos }"
                                hmi-bind:x2="{{ LocalProps.InnerPadding + 20 }}"
                                hmi-bind:y2="{ LocalProps.LegendTextMidPos }"/>

                          <rect hmi:if="{{ HmiProps.MarkerType == HmiMarkerType.Square }}" hmi-bind:fill="{{ HmiProps.MarkerType == HmiMarkerType.None ? Converter.RGBA( HmiProps.LineColor ) : Converter.RGBA( HmiProps.MarkerColor ) }}" stroke-width="0" hmi-bind:x="{{ 5 + LocalProps.InnerPadding }}" hmi-bind:y="{{ LocalProps.LegendTextMidPos - 5 }}" width="10" height="10"/>

                          <image hmi:if="{{ HmiProps.MarkerType == HmiMarkerType.Graphic }}" height="10" width="10" hmi-bind:x="{{ LocalProps.InnerPadding + 5 }}" hmi-bind:y="{{ LocalProps.LegendTextMidPos - 5 }}" hmi-bind--xlink:href="{ HmiProps.MarkerGraphic }"/>

                          <circle hmi:if="{{ or( HmiProps.MarkerType == HmiMarkerType.None , or( HmiProps.MarkerType == HmiMarkerType.Point , HmiProps.MarkerType == HmiMarkerType.Circle ) ) }}" hmi-bind:stroke="{{ Converter.RGBA ( HmiProps.LineColor ) }}" hmi-bind:fill="{{ HmiProps.MarkerType == HmiMarkerType.None ? Converter.RGBA( HmiProps.LineColor ) : Converter.RGBA( HmiProps.MarkerColor ) }}" stroke-width="0" r="5" hmi-bind:cx="{{ LocalProps.InnerPadding + 10 }}" hmi-bind:cy="{ LocalProps.LegendTextMidPos }"/>

                          <text hmi-event:mouseEnter="url(#onMouseEnter)"
                                hmi-event:mouseLeave="url(#onMouseLeave)"
                                hmi-bind:fill="{{ and( gt( ParamProps.VisibleTrendCount, 1 ), eq( HmiProps.ElementID, ParamProps.SelectedTrendId )) ? Converter.RGBA( ParamProps.SelectedLegendForeColor ) : Converter.RGBA( ParamProps.LegendForeColor ) }}"
                                hmi-bind:font-style="{{ ParamProps.Font.Italic ? 'italic' : 'normal' }}"
                                hmi-bind:font-weight="{ ParamProps.Font.Weight }"
                                hmi-bind:font-family="{ ParamProps.Font.Name }"
                                hmi-bind:text-decoration="{{ Converter.TextDecoration( ParamProps.Font ) }}"
                                hmi-bind:font-size="{ ParamProps.Font.Size }"
                                hmi-bind:y="{{ LocalProps.LegendTextMidPos +  ( ( ParamProps.LegendTextHeightWithFont - LocalProps.InnerPadding  ) / 2 ) }}"
                                stroke-width="0"
                                hmi-bind:x="{{ LocalProps.LegendTextStartPos + LocalProps.InnerPadding }}">
                            <hmi:text hmi-bind:value="{ LocalProps.TrendDisplayText }" />
                          </text>
                        </g>
                      </svg>
                    </hmi:template>
                  </hmi:inline>
                </g>
                <g hmi:if="{{ gt( Layout.ActualHeight , round( LocalProps.LegendMaxHeight) ) }}">
                    <hmi:include template="include.style.flat.scrollbarstandalone.svghmi"
                                 hmi-bind:width="{ Layout.ActualWidth }"
                                 hmi-bind:height="{ Layout.ActualHeight }">

                        <hmi:param name="BackColor"           type="HmiColor"         hmi-bind:value="{ LocalProps.ScrollBarPart.BackColor }" />
                        <hmi:param name="ThumbBackColor"      type="HmiColor"         hmi-bind:value="{ LocalProps.ScrollBarPart.ThumbBackColor }" />
                        <hmi:param name="Orientation"         type="HmiOrientation"   hmi-bind:value="{{ HmiOrientation.Vertical }}" />
                        <hmi:param name="Width"               type="number"           hmi-bind:value="{ LocalProps.ScrollBarPart.Thickness }" />
                        <hmi:param name="Height"              type="number"           hmi-bind:value="{ LocalProps.LegendMaxHeight }" />
                        <hmi:param name="BeginValue"          type="number"           hmi-bind:value="{ LocalProps.ScrollBarPart.BeginValue }" />
                        <!--Formula to calculate number of rows legends could have been extended considering the visible trend count and Actual Width-->
                        <hmi:param name="EndValue"            type="number"           hmi-bind:value="{{ gt( Layout.ActualWidth, LocalProps.LegendWidth ) ? (ceil( HmiProps.VisibleTrendCount / floor( (Layout.ActualWidth - LocalProps.LegendRightMargin ) / LocalProps.LegendWidth ))) * ( LocalProps.LegendTextHeight + LocalProps.OffsetBetweenText ) :  HmiProps.VisibleTrendCount * ( LocalProps.LegendTextHeight + LocalProps.OffsetBetweenText ) }}" />
                        <hmi:param name="CurrentValue"        type="number"           hmi-bind:value="{ LocalProps.VertScrollBarPosition }" />
                        <hmi:param name="VisibleValueRange"   type="number"           hmi-bind:value="{ LocalProps.LegendMaxHeight }" />
                        <hmi:param name="Thickness"           type="number"           hmi-bind:value="{ LocalProps.ScrollBarPart.Thickness }" />
                        <hmi:param name="SmallStepValueRange" type="number"           hmi-bind:value="{{ gt( Layout.ActualWidth, LocalProps.LegendWidth ) ? ceil( HmiProps.VisibleTrendCount / floor( (Layout.ActualWidth - LocalProps.LegendRightMargin ) / LocalProps.LegendWidth )) :  HmiProps.VisibleTrendCount }}" />
                        <hmi:param name="BorderWidth"         type="number"           hmi-bind:value= "{ LocalProps.ScrollBarPart.BorderWidth }" />
                        <hmi:param name="OffsetX"             type="number"           hmi-bind:value="{{ Layout.ActualWidth - LocalProps.ScrollBarPart.Thickness - ( ParamProps.ShiftAxes ? LocalProps.AreaDependentSpacing : LocalProps.MarginFactor ) }}" />
                        <hmi:param name="OffsetY"             type="number"           value="0" />
                    </hmi:include>
                </g>
            </g>
        </g>
    </g>
</svg><!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2016. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:hmi="http://svg.siemens.com/hmi/"
    xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
    xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
    xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
    xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
    xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"

    preserveAspectRatio="none"
    overflow="visible" >

    <hmi:self type="item:HmiAlarmControl" displayName="Flat AlarmControl" name="style.flat.alarmcontrol" version="2.8" performanceClass="L"  >
        <hmi:focus focusVisual="local" />
    </hmi:self>

    <defs>
        <!-- System definitions of this template -->
        <hmi:localDef name="ScrollBarPart"                type="HmiScrollBarSystemPart"   hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiScrollBarSystemPart' ) }}" />

        <hmi:localDef name="WindowFramePart"              type="HmiWindowFrameSystemPart"   hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiWindowFrameSystemPart' ) }}" />

        <hmi:localDef name="MinimumWidth"                 type="number"     value="100" />
        <hmi:localDef name="MinimumHeight"                type="number"     value="50"  />
        <hmi:localDef name="SeparatorHeight"              type="number"     value="2"   />

        <hmi:localDef name="ShowFocus"                    type="boolean"    hmi-bind:value="{{ and( HmiProps.ShowFocusVisual, SysProps.HasFocus ) }}" />
        <hmi:localDef name="ShowCaption"                  type="boolean"    hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowCaption ) }}" />        
        <hmi:localDef name="CaptionHeight"                type="number"     hmi-bind:value="{{ LocalProps.ShowCaption ? LocalProps.WindowFramePart.CaptionHeight : 0 }}" />
        <hmi:localDef name="CaptionColor"                 type="number"     hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : HmiProps.CaptionColor }}" />
        <hmi:localDef name="WindowBorderColor"            type="number"     hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : LocalProps.WindowFramePart.BorderColor }}" />
        <hmi:localDef name="WindowBorderWidth"            type="number"     hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowBorder ) ? LocalProps.WindowFramePart.BorderWidth : 0 }}" />
        <hmi:localDef name="WindowInnerWidth"             type="number"     hmi-bind:value="{{ HmiProps.Width - 2 * LocalProps.WindowBorderWidth }}" />

        <!-- Properties of the Hmi Window -->
        <hmi:localDef name="TestToolBar"                  type="number"     hmi-bind:value="{ HmiProps.ToolBar.Height }" />
        <hmi:localDef name="TestToolBarHeight"            type="number"     hmi-bind:value="{{ ( LocalProps.TestToolBar == null ) ? 0 : HmiProps.ToolBar.Height + LocalProps.ScrollBarPart.Thickness }}" />
        <hmi:localDef name="TestToolBarVisibility"        type="boolean"    hmi-bind:value="{{ ( LocalProps.TestToolBar == null ) ? false : HmiProps.ToolBar.Visible }}" />
        <hmi:localDef name="TestToolBarElements"          type="boolean"    hmi-bind:value="{{ ( Converter.CountItems( HmiProps.ToolBar.Elements ) ) ? true : false }}" />

        <!-- Definition of StatusBar properties -->
        <hmi:localDef name="TestStatusBar"                type="number"     hmi-bind:value="{ HmiProps.StatusBar.Height }" />
        <hmi:localDef name="TestStatusBarElements"        type="boolean"    hmi-bind:value="{{ ( Converter.CountItems( HmiProps.StatusBar.Elements ) ) ? true : false }}" />
        <hmi:localDef name="TestStatusBarHeight"          type="number"     hmi-bind:value="{{ ( LocalProps.TestStatusBar == null ) ? 0 : HmiProps.StatusBar.Height }}" />
        <hmi:localDef name="HasStatusBar"                 type="boolean"    hmi-bind:value="{{ ( LocalProps.TestStatusBar == null ) ? false : true }}" />
        <hmi:localDef name="StatusBarHeight"              type="number"     hmi-bind:value="{{ ( LocalProps.HasStatusBar ) ? LocalProps.TestStatusBarHeight : 0 }}" />
        <hmi:localDef name="StatusBarVisibility"          type="boolean"    hmi-bind:value="{{ ( LocalProps.TestStatusBar == null ) ? false : HmiProps.StatusBar.Visible }}" />
        <hmi:localDef name="HasStatusBarElements"         type="boolean"    hmi-bind:value="{{ ( LocalProps.HasStatusBar ) ? LocalProps.TestStatusBarElements : false }}" />
        <hmi:localDef name="StatusBarWidth"               type="number"     hmi-bind:value="{ LocalProps.WindowInnerWidth }" />
        <hmi:localDef name="StatusBarVisible"             type="boolean"    hmi-bind:value="{{ ( not( and( LocalProps.StatusBarVisibility, LocalProps.HasStatusBarElements ) ) ) ? false : ( or( ( LocalProps.StatusBarWidth == 0 ), ( LocalProps.StatusBarHeight == 0 ) ) ? false : true ) }}" />
        <hmi:localDef name="StatusBarTop"                 type="number"     hmi-bind:value="{{ HmiProps.Height - LocalProps.WindowBorderWidth - LocalProps.StatusBarHeight }}" />

        <!-- Definition of ToolBar properties -->
        <hmi:localDef name="HasToolBar"                   type="boolean"    hmi-bind:value="{{ ( LocalProps.TestToolBar == null ) ? false : true }}" />
        <hmi:localDef name="ToolBarHeight"                type="number"     hmi-bind:value="{{ ( LocalProps.HasToolBar ) ? LocalProps.TestToolBarHeight : 0 }}" />
        <hmi:localDef name="ToolBarPosition"              type="number"     value="1" />
        <hmi:localDef name="ToolBarVisibility"            type="boolean"    hmi-bind:value="{{ ( LocalProps.HasToolBar ) ? LocalProps.TestToolBarVisibility: false }}" />
        <hmi:localDef name="HasToolBarElements"           type="boolean"    hmi-bind:value="{{ ( LocalProps.HasToolBar ) ? LocalProps.TestToolBarElements : false }}" />
        <hmi:localDef name="ToolBarWidth"                 type="number"     hmi-bind:value="{{ ( or( ( LocalProps.ToolBarPosition == 1 ), ( LocalProps.ToolBarPosition == 0 ) ) ? LocalProps.WindowInnerWidth : LocalProps.ToolBarHeight ) }}"  />
        <hmi:localDef name="ToolBarVisible"               type="boolean"    hmi-bind:value="{{ ( not( and( LocalProps.ToolBarVisibility, LocalProps.HasToolBarElements ) ) ) ? false : ( or ( ( LocalProps.ToolBarWidth == 0 ), ( LocalProps.ToolBarHeight == 0 ) ) ? false : true ) }}" />

        <!-- Position and Extent related properties of the content -->
        <hmi:localDef name="ContentOffsetLeft"            type="number"     hmi-bind:value="{{ and( LocalProps.HasToolBar, ( LocalProps.ToolBarPosition == 2 ) ) ? LocalProps.ToolBarHeight : 0 }}" />
        <hmi:localDef name="ContentOffsetTop"             type="number"     hmi-bind:value="{{ and( LocalProps.HasToolBar, ( LocalProps.ToolBarPosition == 0 ) ) ? LocalProps.ToolBarHeight :  0 }}" />
        <hmi:localDef name="ContentOffsetWidth"           type="number"     hmi-bind:value="{{ ( and( LocalProps.ToolBarVisible, or( ( LocalProps.ToolBarPosition == 2 ), ( LocalProps.ToolBarPosition == 3 ) ) ) ?  LocalProps.ToolBarHeight : 0 ) }}" />
        <hmi:localDef name="ContentOffsetHeight"          type="number"     hmi-bind:value="{{ ( and( LocalProps.ToolBarVisible, or( ( LocalProps.ToolBarPosition == 0 ), ( LocalProps.ToolBarPosition == 1 ) ) ) ? LocalProps.ToolBarHeight : 0 ) + ( LocalProps.StatusBarVisible ? LocalProps.StatusBarHeight : 0 ) }}" />

        <hmi:localDef name="FocusColor"                   type="string"     hmi-bind:value="{{ Converter.RGBA( HmiProps.FocusColor ) }}" />

        <clipPath id="WindowClipRect">
            <rect id="ItemRect"
                  hmi-bind:width="{ HmiProps.Width   }"
                  hmi-bind:height="{ HmiProps.Height }"
                  stroke="none" />
        </clipPath>
    </defs>

    <g id="ElementsGroup" clip-path="url(#WindowClipRect)">

        <!-- Background -->
        <rect id="BackGroundRect"
              hmi-bind:width="{ HmiProps.Width }"
              hmi-bind:height="{ HmiProps.Height }"
              hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}"
              stroke="none"/>

        <!-- ToolBar -->
        <g hmi:if="{ LocalProps.HasToolBar }" id="ToolBar">
            <hmi:include template="include.style.flat.toolbar.default.svghmi" hmi-bind:for="{ HmiProps.ToolBar }"
                         hmi-bind:x="{{ ( LocalProps.ToolBarPosition == 3 ) ? ( HmiProps.Width - LocalProps.WindowBorderWidth - LocalProps.ToolBarHeight ) : LocalProps.WindowBorderWidth }}"
                         hmi-bind:y="{{ ( LocalProps.ToolBarPosition == 1 ) ? ( HmiProps.Height - LocalProps.WindowBorderWidth - LocalProps.ToolBarHeight - ( LocalProps.StatusBarVisibility ? LocalProps.StatusBarHeight : 0 ) ) : LocalProps.CaptionHeight + LocalProps.WindowBorderWidth }}"
                         hmi-bind:width="{{ or( ( LocalProps.ToolBarPosition == 1 ), ( LocalProps.ToolBarPosition == 0 ) ) ? LocalProps.WindowInnerWidth : LocalProps.ToolBarHeight }}"
                         hmi-bind:height="{{ or( ( LocalProps.ToolBarPosition == 3 ), ( LocalProps.ToolBarPosition == 2 ) ) ? HmiProps.Height - 2 * LocalProps.WindowBorderWidth - LocalProps.CaptionHeight - ( LocalProps.StatusBarVisibility ? LocalProps.StatusBarHeight : 0 ) : LocalProps.ToolBarHeight }}">

                <hmi:param name="Width"           type="number"  hmi-bind:value="{{ or( ( LocalProps.ToolBarPosition == 0 ), ( LocalProps.ToolBarPosition == 1 ) ) ? LocalProps.WindowInnerWidth : LocalProps.ToolBarHeight }}" />
                <hmi:param name="Height"          type="number"  hmi-bind:value="{{ or( ( LocalProps.ToolBarPosition == 3 ), ( LocalProps.ToolBarPosition == 2 ) ) ? HmiProps.Height - 2 * LocalProps.WindowBorderWidth - LocalProps.CaptionHeight - ( LocalProps.StatusBarVisibility ? LocalProps.StatusBarHeight : 0 ) : LocalProps.ToolBarHeight }}" />
                <hmi:param name="ItemOperable"    type="boolean" hmi-bind:value="{ HmiProps.Enabled }" />
                <hmi:param name="FocusColor"      type="string"  hmi-bind:value="{ LocalProps.FocusColor }" />
                <hmi:param name="ShowFocusVisual" type="boolean"  hmi-bind:value="{ HmiProps.ShowFocusVisual }"   />

            </hmi:include>
        </g>

        <!-- StatusBar -->
        <g hmi:if="{ LocalProps.HasStatusBar }" id="StatusBar">
            <hmi:include template="include.style.flat.statusbar.default.svghmi" hmi-bind:for="{ HmiProps.StatusBar }"
                         hmi-bind:x="{ LocalProps.WindowBorderWidth }"
                         hmi-bind:y="{ LocalProps.StatusBarTop }"
                         hmi-bind:width="{ LocalProps.StatusBarWidth }"
                         hmi-bind:height="{ LocalProps.StatusBarHeight }">

                <hmi:param name="Width"           type="number"   hmi-bind:value="{ LocalProps.StatusBarWidth }"  />
                <hmi:param name="Height"          type="number"   hmi-bind:value="{ LocalProps.StatusBarHeight }" />
                <hmi:param name="ItemOperable"    type="boolean"  hmi-bind:value="{ HmiProps.Enabled }"           />
                <hmi:param name="FocusColor"      type="string"   hmi-bind:value="{ LocalProps.FocusColor }"      />
                <hmi:param name="ShowFocusVisual" type="boolean"  hmi-bind:value="{ HmiProps.ShowFocusVisual }"   />

            </hmi:include>
        </g>
        
        <g>
          <!-- Separator between grid and toolbar -->
          <rect
                hmi-bind:y="{{ HmiProps.Height - LocalProps.WindowBorderWidth - LocalProps.ContentOffsetHeight - LocalProps.SeparatorHeight }}"
                hmi-bind:width="{ HmiProps.Width }"
                hmi-bind:height="{ LocalProps.SeparatorHeight }"
                hmi-bind:fill="{{ Converter.RGBA( HmiProps.StatusBar.BackColor ) }}"
                stroke="none"/>
        </g>
        
        <!-- Content as include subtemplate -->
        <g >
          <hmi:include template="style.flat.alarmcontrolcontent.default.svghmi"  hmi-bind:for="{{ eq( HmiProps.AlarmSourceType, HmiAlarmSourceType.AlarmStatistics ) ? HmiProps.AlarmStatisticsView : HmiProps.AlarmView }}"
                       hmi-bind:x="{{ LocalProps.WindowBorderWidth + LocalProps.ContentOffsetLeft }}"
                       hmi-bind:y="{{ LocalProps.WindowBorderWidth + LocalProps.CaptionHeight + LocalProps.ContentOffsetTop }}"
                       hmi-bind:width="{{ HmiProps.Width - 2 * LocalProps.WindowBorderWidth - LocalProps.ContentOffsetWidth }}"
                       hmi-bind:height="{{ HmiProps.Height - 2 * LocalProps.WindowBorderWidth - LocalProps.CaptionHeight - LocalProps.ContentOffsetHeight - LocalProps.SeparatorHeight }}" >

            <hmi:param name="AlwaysShowRecent"  type="boolean"      hmi-bind:value="{ HmiProps.AlwaysShowRecent }" />
            <hmi:param name="FocusColor"        type="string"       hmi-bind:value="{ LocalProps.FocusColor }" />
            <hmi:param name="ShowFocusVisual"   type="boolean"      hmi-bind:value="{ HmiProps.ShowFocusVisual }" />

          </hmi:include>
        </g>
    </g>

    <!-- Frame -->
    <hmi:include template="include.style.flat.hmiwindowframe.default.svghmi"
                 x="0"
                 y="0"
                 hmi-bind:width="{ HmiProps.Width }"
                 hmi-bind:height="{ HmiProps.Height }" >

        <hmi:param name="Top"               type="number"           hmi-bind:value="{ HmiProps.Top }"                 />
        <hmi:param name="Left"              type="number"           hmi-bind:value="{ HmiProps.Left }"                />
        <hmi:param name="Width"             type="number"           hmi-bind:value="{ HmiProps.Width }"               />
        <hmi:param name="Height"            type="number"           hmi-bind:value="{ HmiProps.Height }"              />
        <hmi:param name="WindowFlags"       type="HmiWindowFlag"    hmi-bind:value="{ HmiProps.WindowFlags }"         />
        <hmi:param name="MinimumWidth"      type="number"           hmi-bind:value="{ LocalProps.MinimumWidth }"      />
        <hmi:param name="MinimumHeight"     type="number"           hmi-bind:value="{ LocalProps.MinimumHeight }"     />
        <hmi:param name="Icon"              type="HmiGraphic"       hmi-bind:value="{ HmiProps.Icon }"                />
        <hmi:param name="Caption"           type="HmiTextPart"      hmi-bind:value="{ HmiProps.Caption }"             />
        <hmi:param name="CaptionColor"      type="HmiColor"         hmi-bind:value="{ LocalProps.CaptionColor }"      />
        <hmi:param name="ShowCaption"       type="boolean"          hmi-bind:value="{ LocalProps.ShowCaption }"       />
        <hmi:param name="CaptionHeight"     type="number"           hmi-bind:value="{ LocalProps.CaptionHeight }"     />
        <hmi:param name="WindowBorderWidth" type="number"           hmi-bind:value="{ LocalProps.WindowBorderWidth }" />
        <hmi:param name="WindowBorderColor" type="HmiColor"         hmi-bind:value="{ LocalProps.WindowBorderColor }" />
        <hmi:param name="ItemOperable"      type="boolean"          hmi-bind:value="{ HmiProps.Enabled }"             />
        <hmi:param name="WindowState"       type="number"           hmi-bind:value="{ HmiProps.WindowState }" />

    </hmi:include>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     preserveAspectRatio="none"
     id="custom_AlarmControlContent"
     data-tif-type="WSI:SvgGrid">

  <hmi:self type="part:HmiDataGridViewPart" displayName="Flat AlarmControlContent" name="style.flat.alarmcontrolcontent">
    <hmi:paramDef name="AlwaysShowRecent"       type="boolean"  />
    <hmi:paramDef name="FocusColor"             type="string"   />
    <hmi:paramDef name="ShowFocusVisual"        type="boolean"  />
  </hmi:self>
  <defs>
    <hmi:localDef name="ShowFocus"              type="boolean"  hmi-bind:value="{{ and( ParamProps.ShowFocusVisual, SysProps.HasFocus ) }}" />
    <hmi:localDef name="BorderWidth"            type="number"   value="1"                                                                             />
    <hmi:localDef name="ReducedBorderWidth"     type="number"   hmi-bind:value="{{ LocalProps.BorderWidth / 2 }}"                                     />
    <hmi:localDef name="HeaderGridLineColor"    type="string"   hmi-bind:value="{{ Converter.RGBA(  HmiProps.HeaderSettings.HeaderGridLineColor ) }}" />
  </defs>

  <g id="Background">
    <!--change x to Layout.ActualX-->

    <hmi-element:table hmi-bind:auto-scroll="{ParamProps.AlwaysShowRecent}" hmi-bind:config="{ HmiProps }" hmi-bind:height="{Layout.ActualHeight}" hmi-bind:width="{Layout.ActualWidth}" start-x="0" start-y="0" hmi-bind:horizontal-scrollbar-visibility="{HmiProps.HorizontalScrollBarVisibility}"
                       hmi-bind:vertical-scrollbar-visibility="{HmiProps.VerticalScrollBarVisibility}">

      <!--Column Header-->
      <hmi-feature:header>
        <hmi:master-inline>
          <hmi:param name="Padding"   type="HmiPaddingPart"   hmi-bind:value="{ HmiProps.CellPadding }" />

          <hmi:template>
            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                xmlns:hmi="http://svg.siemens.com/hmi/"
                xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                height="10" width="10" id="ColumnHeaderSVG" >

              <hmi:self type="system:HmiHeaderCellSystemPart" displayName="ColumnHeader" name="columnheader" version="1.0.0" performanceClass="s">
                <hmi:paramDef name="Padding"              type="HmiPaddingPart" />

              </hmi:self>

              <defs>
                <hmi:localDef name="PaddingLeftRight"     type="number"     hmi-bind:value="{{ ( ParamProps.Padding.Left + ParamProps.Padding.Right ) }}" />
                <hmi:localDef name="ReducedWidth"         type="number"     hmi-bind:value="{{ ( HmiProps.Width - 30 ) }}"                                />
                <hmi:localDef name="ReducedHeight"        type="number"     hmi-bind:value="{{ ( HmiProps.Height / 2 ) }}"                                />
                <hmi:localDef name="PadLessWidth"         type="number"     hmi-bind:value="{{ HmiProps.Width - LocalProps.PaddingLeftRight }}"           />
              </defs>

              <g id="TIFID_ColumnHeaderGroup" opacity="1">
                <rect id="ColumnHeaderRect"
                               x="0"
                               y="0"
                               hmi-bind:width="{ HmiProps.Width }"
                               hmi-bind:height="{ HmiProps.Height }"
                               hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}"/>
                <hmi:include template="include.style.flat.content.svghmi" hmi-bind:for="{ HmiProps.Content }"
                             hmi-bind:x="{ ParamProps.Padding.Left }"
                             hmi-bind:y="{ ParamProps.Padding.Top }"
                             hmi-bind:width="{{ gt( HmiProps.SortDirection, 0 ) ? (lt( ( LocalProps.PadLessWidth - 40 ), 0 ) ? 0 : ( LocalProps.PadLessWidth - 40 )) : (lt( LocalProps.PadLessWidth, 0 ) ? 0 : LocalProps.PadLessWidth) }}"
                             hmi-bind:height="{{ HmiProps.Height - ParamProps.Padding.Bottom }}">
                  <hmi:param name="Graphic"         type="HmiGraphic"   hmi-bind:value="{ HmiProps.Graphic }"                                                                                         />
                  <hmi:param name="Text"            type="string"       hmi-bind:value="{{ Converter.IsNumber(HmiProps.Text) ? HmiProps.Text : ( HmiProps.Text ? HmiProps.Text : HmiProps.Name ) }}"  />
                  <hmi:param name="Font"            type="HmiFontPart"  hmi-bind:value="{ HmiProps.Font }"                                                                                            />
                  <hmi:param name="TextColor"       type="HmiColor"     hmi-bind:value="{ HmiProps.ForeColor }"                                                                                       />
                  <hmi:param name="GraphicWidth"    type="number"       hmi-bind:value="{ HmiProps.GraphicWidth }"                                                                                    />
                  <hmi:param name="GraphicHeight"   type="number"       hmi-bind:value="{ HmiProps.GraphicHeight }"                                                                                   />
                </hmi:include>
                <svg hmi-bind:x="{{ gt( LocalProps.ReducedWidth, 0 ) ? LocalProps.ReducedWidth : HmiProps.Width }}" hmi-bind:y="{ LocalProps.ReducedHeight }" hmi:if="{{ and( and( gt( HmiProps.SortOrder, 0 ), gt( HmiProps.SortDirection, 0 )), eq( HmiProps.AllowSort, true )) }}">
                  <path d="M 5 0 L0 10 L 10 10 z" hmi-bind:transform="rotate( {{eq( HmiProps.SortDirection, 2 ) ? 180 : 0}}, 5, 5)"></path>
                  <text   x="11" y="10" font-size="14" font-style="normal" font-weight="400" font-family="Siemens Sans"  >
                    <hmi:text hmi-bind:value="{ HmiProps.SortOrder }"/>
                  </text>
                </svg>
              </g>
            </svg>
          </hmi:template>
        </hmi:master-inline>

      </hmi-feature:header>

      <!--Row Headers-->
      <hmi-feature:recordHeader >
        <hmi:master-inline >
          <hmi:param name="Padding"   type="HmiPaddingPart"   hmi-bind:value="{ HmiProps.CellPadding }" />
          <hmi:template>
            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                xmlns:hmi="http://svg.siemens.com/hmi/"
                xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                xmlns:hmi-data-bind="http://svg.siemens.com/hmi/data/bind/"
                height="10" width="10" >
              <hmi:self type="system:HmiHeaderCellSystemPart" displayName="RowHeader" name="rowheader" version="1.0.0" performanceClass="s">
                <hmi:data type="header-view"></hmi:data>
                <hmi:paramDef name="Padding"      type="HmiPaddingPart" />
              </hmi:self>

              <g id="TIFID_RowHeaderGroup" opacity="1">
                <rect id="RowHeaderRect"
                               x="0"
                               y="0"
                               hmi-bind:width="{ HmiProps.Width }"
                               hmi-bind:height="{ HmiProps.Height }"
                               hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}"
                               />
                <hmi:include template="include.style.flat.text.svghmi"
                             hmi-bind:x="{ ParamProps.Padding.Left }"
                             hmi-bind:y="{ ParamProps.Padding.Top }"
                             hmi-bind:width="{{ HmiProps.Width - ( ParamProps.Padding.Right + ParamProps.Padding.Left ) }}"
                             hmi-bind:height="{{ HmiProps.Height - ParamProps.Padding.Bottom }}">
                  <hmi:param name="Text"                    type="string"                   hmi-data-bind:value="{ Content.Index }"                       />
                  <hmi:param name="Font"                    type="HmiFontPart"              hmi-bind:value="{ HmiProps.Font }"                            />
                  <hmi:param name="TextColor"               type="HmiColor"                 hmi-bind:value="{ HmiProps.ForeColor }"                       />
                  <hmi:param name="HorizontalTextAlignment" type="HmiHorizontalAlignment"   hmi-bind:value="{ HmiProps.Content.HorizontalTextAlignment }" />
                  <hmi:param name="VerticalTextAlignment"   type="HmiVerticalAlignment"     value="1"                                                     />


                </hmi:include>
              </g>
            </svg>
          </hmi:template>
        </hmi:master-inline>
      </hmi-feature:recordHeader>

      <hmi-feature:dataTemplates>
        <hmi:master-include template="include.style.flat.multilinedatacell.svghmi">
          <hmi:param name="Padding"   type="HmiPaddingPart"   hmi-bind:value="{ HmiProps.CellPadding }" />
        </hmi:master-include>
      </hmi-feature:dataTemplates>

      <hmi-feature:rowBackground >
        <hmi:master-include template="include.style.flat.rowbackground.svghmi">
        </hmi:master-include>
      </hmi-feature:rowBackground>

      <hmi-feature:columnBackground >
        <hmi:master-include template="include.style.flat.columnbackground.svghmi">
        </hmi:master-include>
      </hmi-feature:columnBackground>

      <!--Grid lines-->
      <hmi-feature:gridlines>
        <hmi-feature:gridline
          position-filter="header" expansion="header inner"
          hmi-bind:stroke-width="{ HmiProps.GridLineWidth }"
          hmi-bind:stroke="{LocalProps.HeaderGridLineColor}"
          orientation="row column">
        </hmi-feature:gridline>
        <hmi-feature:gridline
          position-filter="inner" expansion="header"
          hmi-bind:stroke-width="{ HmiProps.GridLineWidth }"
          hmi-bind:stroke="{LocalProps.HeaderGridLineColor}"
          orientation="row column">
        </hmi-feature:gridline>
        <hmi-feature:gridline
          position-filter="inner" expansion="inner"
          hmi-bind:stroke-width="{ HmiProps.GridLineWidth }"
          hmi-bind:stroke="{{ HmiProps.GridLineVisibility == 0 ? 'rgba(0,0,0,0)' : Converter.RGBA(  HmiProps.GridLineColor ) }}"
          hmi-bind:orientation="{{ HmiProps.GridLineVisibility == 3 ? 'row column' : ( HmiProps.GridLineVisibility == 2 ? 'column':'row') }}">
        </hmi-feature:gridline>
      </hmi-feature:gridlines>

      <hmi-feature:selection>
        <hmi:master-inline >
          <hmi:template>
            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                xmlns:hmi="http://svg.siemens.com/hmi/"
                xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                height="10" width="10" >
              <hmi:self type="system:HmiSelectionSystemPart" displayName="SelectionBorder" name="selectionborder" version="1.0.0" performanceClass="s">
              </hmi:self>

              <defs>
                <hmi:localDef name="ChangedBorderWidth" type="number" hmi-bind:value="{{ HmiProps.BorderWidth / 2 }}"/>
              </defs>

              <g id="TIFID_SelectionRect" opacity="1">
                <rect id="ItemBGRect3"
                    hmi-bind:x="{LocalProps.ChangedBorderWidth}"
                    hmi-bind:y="{LocalProps.ChangedBorderWidth}"
                    hmi-bind:width="{ HmiProps.Width}"
                    hmi-bind:height="{ HmiProps.Height }"
                    fill="none"
                    hmi-bind:stroke-width="{ HmiProps.BorderWidth }"
                    hmi-bind:stroke="{{Converter.RGBA(HmiProps.BorderColor)}}"/>
              </g>
            </svg>
          </hmi:template>
        </hmi:master-inline>
      </hmi-feature:selection>
    </hmi-element:table>

	  <rect id="ItemBGRect"
          hmi-bind:x="{ LocalProps.ReducedBorderWidth }"
          hmi-bind:y="{ LocalProps.ReducedBorderWidth }"
          hmi-bind:width="{{ Layout.ActualWidth - LocalProps.BorderWidth }}"
          hmi-bind:height="{{ Layout.ActualHeight - LocalProps.BorderWidth }}"
          fill="none"
          hmi-bind:stroke-width="{{ LocalProps.ShowFocus ? 4 : 0 }}"
          hmi-bind:stroke="{{ LocalProps.ShowFocus ? ParamProps.FocusColor : 'black' }}"/>
  </g>
</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2016. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     preserveAspectRatio="none">

  <hmi:self type="item:HmiBar" displayName="Flat Bar" name="style.flat.bar" version="2.9" performanceClass="L"  >
    <hmi:focus focusVisual="local" />
  </hmi:self>

  <defs>
    <hmi:localDef name="IsMultilineTitle"       type="boolean"  hmi-bind:value="{{ Converter.IsMultiline( HmiProps.Title.Text ) }}" />
    <hmi:localDef name="IsLabelMultiLine"       type="boolean"  hmi-bind:value="{{ Converter.IsMultiline( HmiProps.Label.Text ) }}" />

    <hmi:localDef name="IsScaleHorizontal"      type="boolean"  hmi-bind:value="{{ HmiProps.StraightScale.Orientation == HmiOrientation.Horizontal }}" />

    <hmi:localDef name="IsCompactMode"          type="boolean"  hmi-bind:value="{{ LocalProps.IsScaleHorizontal ? or( lt( HmiProps.Width, 100 ), lt( HmiProps.Height, 30 ) ) : or( lt( HmiProps.Width, 30 ), lt( HmiProps.Height, 100 ) ) }}" />
    <hmi:localDef name="ShowFocus"              type="boolean"  hmi-bind:value="{{ and( HmiProps.ShowFocusVisual, SysProps.HasFocus ) }}" />

    <hmi:localDef name="ItemSpacing"            type="number"   hmi-bind:value="{{ 4 + HmiProps.BorderWidth / 2 }}" />
    <hmi:localDef name="BarSpacing"             type="number"   value="0" />
    <hmi:localDef name="BarTickGap"             type="number"   value="2" />
    <hmi:localDef name="LabelOffset"            type="number"   hmi-bind:value="{{ - HmiProps.StraightScale.LabelFont.Size }}" />

    <hmi:localDef name="OriginValue"            type="number"   hmi-bind:value="{{ HmiProps.RelativeToOrigin ? Converter.Min( HmiProps.StraightScale.BeginValue, HmiProps.StraightScale.EndValue ) + HmiProps.OriginValue / 100 * abs( HmiProps.StraightScale.EndValue - HmiProps.StraightScale.BeginValue ) : HmiProps.OriginValue }}" />

    <hmi:localDef name="BorderColor"            type="number"   hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : HmiProps.BorderColor }}" />
    <hmi:localDef name="TitleHeight"            type="number"   hmi-bind:value="{{ HmiProps.Title.Visible ? ( LocalProps.IsMultilineTitle ? ( Converter.TextHeight( HmiProps.Title.Text, HmiProps.Title.Font ) * 2 ) : ( Converter.TextHeight( HmiProps.Title.Text, HmiProps.Title.Font ) ) ) : 0 }}" />
    <hmi:localDef name="LabelHeight"            type="number"   hmi-bind:value="{{ HmiProps.Label.Visible ? ( LocalProps.IsLabelMultiLine ? ( Converter.TextHeight( HmiProps.Label.Text, HmiProps.Label.Font ) * 2 ) : ( Converter.TextHeight( HmiProps.Label.Text, HmiProps.Label.Font ) ) ) : 0 }}" />

    <hmi:localDef name="TitleY"                 type="number"   hmi-bind:value="{ LocalProps.TitleHeight }" />

    <hmi:localDef name="ProcessValueText"       type="string"   hmi-bind:value="{{ Converter.FormatPattern( HmiProps.ProcessValue, HmiProps.OutputFormat ) }}" />
    <hmi:localDef name="ProcessValueTextHeight"	type="number"   hmi-bind:value="{{ Converter.TextHeight( LocalProps.ProcessValueText , HmiProps.Font ) }}" />
    <hmi:localDef name="TrendIndicatorWidth"    type="number"   hmi-bind:value="{{ HmiProps.ShowTrendIndicator ? 14 : 0 }}" />
    <hmi:localDef name="TrendIndicatorHeight"   type="number"   hmi-bind:value="{{ HmiProps.ShowTrendIndicator ? 20 : 0 }}" />
    <hmi:localDef name="TrendIndicatorPadding"  type="number"   hmi-bind:value="{{ HmiProps.ShowTrendIndicator ? 10 : 0 }}" />
    <hmi:localDef name="TrendIndicatorSpacing"  type="number"   hmi-bind:value="{{ LocalProps.TrendIndicatorWidth + LocalProps.TrendIndicatorPadding }}" />
    <hmi:localDef name="Padding"                type="number"   value="5" />

    <hmi:localDef name="IOFieldWidth"           type="number"   hmi-bind:value="{{ LocalProps.IsScaleHorizontal ? 0.25 * HmiProps.Width - 10 : HmiProps.Width }}" />
    <hmi:localDef name="IOFieldHeight"          type="number"   hmi-bind:value="{ HmiProps.Font.Size }" />

    <hmi:localDef name="ScaleWidth"             type="number"   hmi-bind:value="{{ LocalProps.IsCompactMode ? HmiProps.Width : ( LocalProps.IsScaleHorizontal ? 0.75 * ( HmiProps.Width - (2 * HmiProps.BorderWidth ) )  : 0.4 * ( HmiProps.Width - ( 2 * HmiProps.BorderWidth ) ) ) }}" />
    <hmi:localDef name="ScaleHeight"            type="number"   hmi-bind:value="{{ LocalProps.IsCompactMode ? HmiProps.Height - LocalProps.TitleHeight - 5 : ( LocalProps.IsScaleHorizontal ? 0.4 * ( HmiProps.Height - ( 2 * HmiProps.BorderWidth ) ) : HmiProps.Height - ( 2 * HmiProps.BorderWidth ) - LocalProps.LabelHeight - Converter.Max( LocalProps.ProcessValueTextHeight, LocalProps.TrendIndicatorHeight ) - LocalProps.TitleHeight - ( 3 * LocalProps.Padding ) + 2 ) }}" />
    <hmi:localDef name="ScaleX"                 type="number"   hmi-bind:value="{{ or( LocalProps.IsCompactMode, LocalProps.IsScaleHorizontal ) ? HmiProps.BorderWidth : HmiProps.Width - HmiProps.BorderWidth - LocalProps.ScaleWidth }}" />
    <hmi:localDef name="ScaleY"                 type="number"   hmi-bind:value="{{ or( LocalProps.IsCompactMode, not( LocalProps.IsScaleHorizontal ) ) ? LocalProps.TitleY + 5 : HmiProps.Height - ( LocalProps.LabelHeight == 0 ? 0 : LocalProps.LabelHeight + 10 ) - HmiProps.BorderWidth - LocalProps.ScaleHeight }}" />

    <hmi:localDef name="RibbonWidth"            type="number"   hmi-bind:value="{{ LocalProps.IsScaleHorizontal ? LocalProps.ScaleHeight : LocalProps.ScaleWidth }}" />

    <hmi:localDef name="IOFieldLimit"           type="number"   hmi-bind:value="{{ LocalProps.IsCompactMode ? HmiProps.Width - LocalProps.TrendIndicatorSpacing : HmiProps.Width - ( 2 * HmiProps.BorderWidth ) - LocalProps.TrendIndicatorSpacing - ( LocalProps.IsScaleHorizontal ? ( LocalProps.ScaleWidth + 2 * LocalProps.Padding ) : 0 ) }}" />
    <hmi:localDef name="IOFieldText"			      type="string"   hmi-bind:value="{{ Converter.TextEllipsis( LocalProps.ProcessValueText, LocalProps.IOFieldLimit, HmiProps.Font ) }}" />
    <hmi:localDef name="IOFieldTextWidth"		    type="number"   hmi-bind:value="{{ Converter.TextWidth( LocalProps.IOFieldText , HmiProps.Font ) }}" />

    <hmi:localDef name="IOFieldX"               type="number"   hmi-bind:value="{{ LocalProps.IsCompactMode ? LocalProps.IOFieldLimit / 2 : ( LocalProps.IsScaleHorizontal ? HmiProps.BorderWidth + LocalProps.ScaleWidth + ( 2 * LocalProps.Padding )  : ( HmiProps.Width - HmiProps.BorderWidth - LocalProps.TrendIndicatorSpacing )) }}" />
    <hmi:localDef name="IOFieldY"               type="number"   hmi-bind:value="{{ LocalProps.IsCompactMode ? LocalProps.ScaleY + LocalProps.ScaleHeight / 2 : ( LocalProps.IsScaleHorizontal ? LocalProps.ScaleY + ( 0.5 * LocalProps.ScaleHeight ) + LocalProps.IOFieldHeight/2 : LocalProps.ScaleY + LocalProps.ScaleHeight + LocalProps.Padding + LocalProps.IOFieldHeight ) }}" />

    <hmi:localDef name="TrendIndicatorX"		    type="number"   hmi-bind:value="{{ LocalProps.IsCompactMode ? LocalProps.IOFieldX + ( LocalProps.IOFieldTextWidth / 2 ) + LocalProps.TrendIndicatorPadding : LocalProps.IOFieldX + LocalProps.TrendIndicatorPadding + ( LocalProps.IsScaleHorizontal ? LocalProps.IOFieldTextWidth : 0 ) }}" />
    <hmi:localDef name="TrendIndicatorY"		    type="number"   hmi-bind:value="{{ LocalProps.IOFieldY - LocalProps.ProcessValueTextHeight + HmiProps.Font.Size / 2 }}" />

    <hmi:localDef name="ThresholdFallbackColor" type="number"   hmi-bind:value="{ HmiProps.NormalRangeColor }" />
    <hmi:localDef name="ProcessValueColorRaw"   type="number"   hmi-bind:value="{{ Converter.ThresholdColorForValue( HmiProps.ProcessValue, HmiProps.Thresholds, LocalProps.ThresholdFallbackColor ) }}" />
    <hmi:localDef name="ProcessValueColor"      type="string"   hmi-bind:value="{{ Converter.RGBA( LocalProps.ProcessValueColorRaw ) }}" />
    <hmi:localDef name="IOFieldTextColor"       type="string"   hmi-bind:value="{{ LocalProps.IsCompactMode ? Converter.RGBA( HmiProps.ProcessValueIndicatorForeColor ) : LocalProps.ProcessValueColor }}" />

    <hmi:localDef name="IndicatorWidth"         type="number"   value="18" />
    <hmi:localDef name="ScaleSurchargeCalc"     type="number"   hmi-bind:value="{{ LocalProps.IndicatorWidth / 2 }}" />
    <hmi:localDef name="ScaleSurcharge"         type="number"   hmi-bind:value="{{ or ( or( HmiProps.ProcessValueIndicatorMode == HmiProcessIndicatorMode.DetailedIndicator, HmiProps.ProcessValueIndicatorMode == HmiProcessIndicatorMode.BarWithDetailedIndicator ) ,
                                                                                            has( HmiProps.StraightScale.ScaleMode, HmiScaleMode.Labels ) ) ? LocalProps.ScaleSurchargeCalc : 0 }}" />
    <hmi:localDef name="StraightDialLength"     type="number"   hmi-bind:value="{{ ( LocalProps.IsScaleHorizontal ? LocalProps.ScaleWidth : LocalProps.ScaleHeight ) - 2 * ( LocalProps.BarSpacing + LocalProps.ScaleSurcharge ) }}" />

<hmi:localDef name="ItemOperable"           type="boolean"  hmi-bind:value="{{ HmiProps.Operability == HmiOperability.Operable  }}" />
  </defs>

  <g id="ElementsGroup" hmi-bind:opacity="{{ LocalProps.ItemOperable ? 1.0 : 0.5  }}">
    <!-- item rect -->
    <rect id="ItemRect"
        hmi:if="{{ or( LocalProps.ShowFocus, or( (Converter.Alpha( HmiProps.BackColor ) != 0), (Converter.Alpha( HmiProps.BorderColor ) != 0) ) ) }}"
        hmi-bind:x="{{ HmiProps.BorderWidth / 2 }}"
        hmi-bind:y="{{ HmiProps.BorderWidth / 2 }}"
        hmi-bind:width="{{ HmiProps.Width - HmiProps.BorderWidth }}"
        hmi-bind:height="{{ HmiProps.Height - HmiProps.BorderWidth }}"
        hmi-bind:stroke="{{ Converter.RGBA( LocalProps.BorderColor ) }}"
        hmi-bind:stroke-width="{ HmiProps.BorderWidth }"
        hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}" />

    <g id="TitleGroup" hmi:if="{{ LocalProps.TitleHeight != 0 }}">
      <g id="SingleLineTitle" hmi:if="{{ not( LocalProps.IsMultilineTitle ) }}">
        <text hmi-bind:fill="{{ Converter.RGBA( HmiProps.Title.ForeColor ) }}"
          hmi-bind:x="{{ HmiProps.Width / 2 }}"
          hmi-bind:y="{ LocalProps.TitleY }"
          hmi-bind:font-size="{ HmiProps.Title.Font.Size }"
          hmi-bind:font-style="{{ HmiProps.Title.Font.Italic ? 'italic' : 'normal' }}"
          hmi-bind:font-weight="{ HmiProps.Title.Font.Weight }"
          hmi-bind:font-family="{ HmiProps.Title.Font.Name }"
          hmi-bind:text-decoration="{{ Converter.TextDecoration( HmiProps.Title.Font ) }}"
          text-anchor="middle"
          dominant-baseline="auto">
        <hmi:text hmi-bind:value="{ HmiProps.Title.Text }" />
      </text>
    </g>
    <g id="MultiLineTitle" hmi:if="{ LocalProps.IsMultilineTitle }">
      <hmi-element:textField
        start-x="0"
        start-y="0"
        hmi-bind:width="{ HmiProps.Width }"
        hmi-bind:height="{ LocalProps.TitleHeight }"

        hmi-bind:value="{ HmiProps.Title.Text }"
        hmi-bind:fore-color="{{ Converter.RGBA( HmiProps.Title.ForeColor ) }}"
        horizontal-text-alignment="center"
        vertical-text-alignment="top"
        read-only="true"
        output-format="{S}"

        horizontal-scrollbar-visibility="collapsed"
        vertical-scrollbar-visibility="collapsed"
        text-trimming="character-ellipsis"               
        text-wrapping="no-wrap"
        multi-line="true">
        <hmi-feature:inputBehavior clear-on-activate="false" />
        <hmi-feature:font hmi-bind:scope="{ HmiProps.Title.Font }" />
      </hmi-element:textField>
      </g>  
    </g>

    <g id="LabelGroup" hmi:if="{{ LocalProps.LabelHeight != 0 }}">
        <g id="LabelSingleLineText" hmi:if="{{ not( LocalProps.IsLabelMultiLine )}}">
            <text hmi-bind:fill="{{ Converter.RGBA( HmiProps.Label.ForeColor ) }}"
                hmi-bind:x="{{ HmiProps.Width / 2 }}"
                hmi-bind:y="{{ HmiProps.Height - LocalProps.ItemSpacing - LocalProps.LabelHeight / 2 - 2 }}"
                hmi-bind:font-size="{ HmiProps.Label.Font.Size }"
                hmi-bind:font-style="{{ HmiProps.Label.Font.Italic ? 'italic' : 'normal' }}"
                hmi-bind:font-weight="{ HmiProps.Label.Font.Weight }"
                hmi-bind:font-family="{ HmiProps.Label.Font.Name }"
                hmi-bind:text-decoration="{{ Converter.TextDecoration( HmiProps.Label.Font ) }}"
                text-anchor="middle"
                dominant-baseline="auto">
                <hmi:text hmi-bind:value="{ HmiProps.Label.Text }" />
            </text>
        </g>
      <g id="LabelMultiLineText" hmi:if="{ LocalProps.IsLabelMultiLine }">
            <hmi-element:textField
                hmi-bind:start-y="{{ HmiProps.Height - LocalProps.ItemSpacing - LocalProps.LabelHeight / 2 - 20 }}"
                hmi-bind:width="{ HmiProps.Width }"
                hmi-bind:height="{ LocalProps.LabelHeight }"
                hmi-bind:value="{ HmiProps.Label.Text }"
                hmi-bind:fore-color="{{ Converter.RGBA( HmiProps.Label.ForeColor ) }}"
                text-wrapping="no-wrap"
                text-trimming="character-ellipsis"
                horizontal-text-alignment="center"
                vertical-text-alignment="top"
                enabled="false"
                read-only="true"
                multi-line="true"
                horizontal-scrollbar-visibility="collapsed"
                vertical-scrollbar-visibility="collapsed"
                >
                <hmi-feature:font hmi-bind:scope="{ HmiProps.Label.Font }" />
            </hmi-element:textField>
      </g>            
    </g>

    <g id="BarGroup" hmi-bind:transform="translate( {{ LocalProps.ScaleX }} , {{ LocalProps.ScaleY }})">

      <!-- background  -->
      <rect id="BarBackGroundRect"
            hmi-bind:x="{ LocalProps.BarSpacing }"
            hmi-bind:y="{ LocalProps.BarSpacing }"
            hmi-bind:width="{{ LocalProps.ScaleWidth - 2 * LocalProps.BarSpacing }}"
            hmi-bind:height="{{ LocalProps.ScaleHeight - 2 * LocalProps.BarSpacing }}"
            hmi-bind:fill="{{ Converter.RGBA( HmiProps.ScaleForeColor ) }}" />

      <g id="StraightDialGroupA">
        <hmi-element:straightDial hmi-bind:start-x="{{ LocalProps.BarSpacing + ( LocalProps.IsScaleHorizontal ? LocalProps.ScaleSurcharge : 0 ) }}"
                                  hmi-bind:start-y="{{ LocalProps.BarSpacing + ( LocalProps.IsScaleHorizontal ? 0 : LocalProps.ScaleSurcharge ) }}"
                                  hmi-bind:length="{ LocalProps.StraightDialLength }"
                                  hmi-bind:orientation="{ HmiProps.StraightScale.Orientation }"
                                  hmi-bind:begin-surcharge="{ LocalProps.ScaleSurcharge }"
                                  hmi-bind:end-surcharge="{ LocalProps.ScaleSurcharge }">

          <hmi-feature:scale hmi-bind:begin-value="{ HmiProps.StraightScale.BeginValue }"
                             hmi-bind:end-value="{ HmiProps.StraightScale.EndValue }"
                             hmi-bind:type="{ HmiProps.StraightScale.ScalingType }"
                             hmi-bind:maximum-sections="{{ Converter.Max( 5, HmiProps.StraightScale.DivisionCount ) }}"
                             hmi-bind:extend="{{ HmiProps.StraightScale.AutoScaling ? 'both' : 'none' }}">

            <!-- forward scale e.g. BeginValue lt EndValue -->
            <hmi-feature:range hmi-bind:condition="{{ lt( HmiProps.StraightScale.BeginValue, HmiProps.StraightScale.EndValue ) }}"
                               hmi-bind:begin-value="{{ le( LocalProps.OriginValue, HmiProps.StraightScale.BeginValue ) ? 'scale-begin' : ge( LocalProps.OriginValue, HmiProps.StraightScale.EndValue ) ? 'scale-end' : Converter.FormatPattern( LocalProps.OriginValue, '{I}' ) }}"
                               hmi-bind:end-value="{ HmiProps.ProcessValue }">

              <hmi-feature:ribbons hmi-bind:condition="{{ or( HmiProps.ProcessValueIndicatorMode == HmiProcessIndicatorMode.Bar, HmiProps.ProcessValueIndicatorMode == HmiProcessIndicatorMode.BarWithDetailedIndicator ) }}"
                                   hmi-bind:offset="{{ LocalProps.RibbonWidth / 2 }}"
                                   hmi-bind:stroke-width="{ LocalProps.RibbonWidth }"
                                   hmi-bind:stroke="{ LocalProps.ProcessValueColor }" />
              <hmi-feature:ticks hmi-bind:condition="{{ not( LocalProps.IsCompactMode ) }}"
                                 position-filter="begin"
                                 stroke-width="1"
                                 hmi-bind:stroke="{{ Converter.RGBA( HmiProps.StraightScale.TickColor ) }}"
                                 hmi-bind:length="{ LocalProps.RibbonWidth }" />
            </hmi-feature:range>

            <!-- revers scale e.g. BeginValue gt EndValue -->
            <hmi-feature:range hmi-bind:condition="{{ gt( HmiProps.StraightScale.BeginValue, HmiProps.StraightScale.EndValue ) }}"
                               hmi-bind:begin-value="{{ ge( LocalProps.OriginValue, HmiProps.StraightScale.BeginValue ) ? 'scale-begin' : le( LocalProps.OriginValue, HmiProps.StraightScale.EndValue ) ? 'scale-end' : Converter.FormatPattern( LocalProps.OriginValue, '{I}' ) }}"
                               hmi-bind:end-value="{ HmiProps.ProcessValue }">

              <hmi-feature:ribbons hmi-bind:condition="{{ or( HmiProps.ProcessValueIndicatorMode == HmiProcessIndicatorMode.Bar, HmiProps.ProcessValueIndicatorMode == HmiProcessIndicatorMode.BarWithDetailedIndicator ) }}"
                                   hmi-bind:offset="{{ LocalProps.RibbonWidth / 2 }}"
                                   hmi-bind:stroke-width="{ LocalProps.RibbonWidth }"
                                   hmi-bind:stroke="{ LocalProps.ProcessValueColor }" />
            </hmi-feature:range>

            <!-- AutoScaling true -->
            <hmi-feature:autoMeasure hmi-bind:condition="{{ and( not( LocalProps.IsCompactMode ), HmiProps.StraightScale.AutoScaling ) }}">

              <!-- Ticks -->
              <hmi-feature:division hmi-bind:condition="{{ has( HmiProps.StraightScale.ScaleMode, HmiScaleMode.Ticks ) }}"
                                    hmi-bind:count="{ HmiProps.StraightScale.SubDivisionCount }">

                <hmi-feature:ticks hmi-bind:offset="{ LocalProps.BarTickGap }"
                                   hmi-bind:position-filter="{{ has( HmiProps.StraightScale.ScaleMode, HmiScaleMode.Labels ) ? 'inner' : 'regular' }}"
                                   hmi-bind:length="{{ LocalProps.RibbonWidth / 2 - LocalProps.BarTickGap }}"
                                   hmi-bind:stroke="{{ Converter.RGBA( HmiProps.StraightScale.TickColor ) }}"
                                   stroke-width="1" />

                <hmi-feature:ticks hmi-bind:offset="{ LocalProps.BarTickGap }"
                                   hmi-bind:position-filter="{{ 'begin end' }}"
                                   hmi-bind:length="{{ LocalProps.RibbonWidth / 2 - LocalProps.BarTickGap }}"
                                   hmi-bind:stroke="{{ Converter.RGBA( HmiProps.StraightScale.TickColor ) }}"
                                   stroke-width="2" />
              </hmi-feature:division>

              <hmi-feature:labels hmi-bind:condition="{{ has( HmiProps.StraightScale.ScaleMode, HmiScaleMode.Labels ) }}"
                                  hmi-bind:offset="{ LocalProps.LabelOffset }"
                                  hmi-bind:fill="{{ Converter.RGBA( HmiProps.StraightScale.LabelColor ) }}"
                                  hmi-bind:alignment="{{ LocalProps.IsScaleHorizontal ? '0 -1' : '1 0' }}"
                                  hmi-bind:output-format="{ HmiProps.StraightScale.OutputFormat }" >
                <hmi-feature:font hmi-bind:scope="{ HmiProps.StraightScale.LabelFont }" />
              </hmi-feature:labels>
            </hmi-feature:autoMeasure>

            <!-- AutoScaling false -->
            <hmi-feature:division hmi-bind:condition="{{ and( not( LocalProps.IsCompactMode ), not( HmiProps.StraightScale.AutoScaling )) }}"
                                  hmi-bind:count="{ HmiProps.StraightScale.DivisionCount }">
              <!-- Ticks -->
              <hmi-feature:division hmi-bind:condition="{{ has( HmiProps.StraightScale.ScaleMode, HmiScaleMode.Ticks ) }}"
                                    hmi-bind:count="{ HmiProps.StraightScale.SubDivisionCount }">

                <hmi-feature:ticks hmi-bind:offset="{ LocalProps.BarTickGap }"
                                   hmi-bind:position-filter="{{ 'inner end' }}"
                                   hmi-bind:length="{{ LocalProps.RibbonWidth / 2 - LocalProps.BarTickGap }}"
                                   hmi-bind:stroke="{{ Converter.RGBA( HmiProps.StraightScale.TickColor ) }}" />
              </hmi-feature:division>

              <hmi-feature:labels hmi-bind:condition="{{ has( HmiProps.StraightScale.ScaleMode, HmiScaleMode.Labels ) }}"
                                  hmi-bind:offset="{ LocalProps.LabelOffset }"
                                  hmi-bind:fill="{{ Converter.RGBA( HmiProps.StraightScale.LabelColor ) }}"
                                  hmi-bind:alignment="{{ LocalProps.IsScaleHorizontal ? '0 -1' : '1 0' }}"
                                  hmi-bind:output-format="{ HmiProps.StraightScale.OutputFormat }">
                <hmi-feature:font hmi-bind:scope="{ HmiProps.StraightScale.LabelFont }" />
              </hmi-feature:labels>
            </hmi-feature:division>
            <!-- Min peak value indicator -->
            <hmi-feature:marker hmi-bind:value="{ HmiProps.ComputedMinPeakValue }" hmi-bind:condition="{{ has( HmiProps.PeakIndicators, HmiPeakIndicator.Low ) }}">

              <hmi-feature:poleMarkers hmi-bind:alignment-horizontal="{{ LocalProps.IsScaleHorizontal ? 0.0 : -1.0 }}"
                                       hmi-bind:alignment-vertical="{{ LocalProps.IsScaleHorizontal ? -1.0 :  0.0 }}"
                                       hmi-bind:content-width="{{ LocalProps.IsScaleHorizontal ? 9 : 11 }}"
                                       hmi-bind:content-height="{{ LocalProps.IsScaleHorizontal ? 11 : 9 }}">

                <!-- Sub template for the Min peak value indicator -->
                <hmi:master-include template="include.style.flat.peakindicator.svghmi" >

                  <hmi:param name="ScaleOrientation"      type="HmiOrientation"   hmi-bind:value="{ HmiProps.StraightScale.Orientation }" />
                  <hmi:param name="IndicatorForeColor"    type="HmiColor"         hmi-bind:value="{ HmiProps.Title.ForeColor }"           />

                </hmi:master-include>

              </hmi-feature:poleMarkers>

            </hmi-feature:marker>

            <!-- Max peak value indicator -->
            <hmi-feature:marker hmi-bind:value="{ HmiProps.ComputedMaxPeakValue }" hmi-bind:condition="{{ has( HmiProps.PeakIndicators, HmiPeakIndicator.High ) }}">

              <hmi-feature:poleMarkers hmi-bind:alignment-horizontal="{{ LocalProps.IsScaleHorizontal ? 0.0 : -1.0 }}"
                                       hmi-bind:alignment-vertical="{{ LocalProps.IsScaleHorizontal ? -1.0 :  0.0 }}"
                                       hmi-bind:content-width="{{ LocalProps.IsScaleHorizontal ? 9 : 11 }}"
                                       hmi-bind:content-height="{{ LocalProps.IsScaleHorizontal ? 11 : 9 }}">

                <!-- Sub template for the Max peak value indicator -->
                <hmi:master-include template="include.style.flat.peakindicator.svghmi" >

                  <hmi:param name="ScaleOrientation"      type="HmiOrientation"   hmi-bind:value="{ HmiProps.StraightScale.Orientation }" />
                  <hmi:param name="IndicatorForeColor"    type="HmiColor"         hmi-bind:value="{ HmiProps.Title.ForeColor }"           />

                </hmi:master-include>

              </hmi-feature:poleMarkers>

            </hmi-feature:marker>

            <!-- Process value indicator -->
            <hmi-feature:marker hmi-bind:condition="{{ or( HmiProps.ProcessValueIndicatorMode == HmiProcessIndicatorMode.DetailedIndicator, HmiProps.ProcessValueIndicatorMode == HmiProcessIndicatorMode.BarWithDetailedIndicator ) }}"
                                hmi-bind:value="{ HmiProps.ProcessValue }">

              <hmi-feature:poleMarkers hmi-bind:alignment-horizontal="{{ LocalProps.IsScaleHorizontal ? 0.0 : -1.0 }}"
                                       hmi-bind:alignment-vertical="{{ LocalProps.IsScaleHorizontal ? -1.0 :  0.0 }}"
                                       hmi-bind:content-width="{{ LocalProps.IsScaleHorizontal ? 18 : LocalProps.RibbonWidth }}"
                                       hmi-bind:content-height="{{ LocalProps.IsScaleHorizontal ? LocalProps.RibbonWidth : 18 }}">

                <!-- Sub template for the process value indicator -->
                <hmi:master-inline>
                  <hmi:param name="RibbonWidth"               type="number"        hmi-bind:value="{ LocalProps.RibbonWidth   }"                              />
                  <hmi:param name="IsScaleHorizontal"         type="boolean"       hmi-bind:value="{ LocalProps.IsScaleHorizontal }"                          />
                  <hmi:param name="IndicatorForeColor"        type="string"        hmi-bind:value="{{ Converter.RGBA( HmiProps.ProcessValueIndicatorForeColor ) }}"  />
                  <hmi:template>
                    <svg xmlns="http://www.w3.org/2000/svg"
                         xmlns:xlink="http://www.w3.org/1999/xlink"
                         xmlns:hmi="http://svg.siemens.com/hmi/"
                         xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                         xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
                         xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
                         xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
                         xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
                         overflow="visible">

                      <hmi:self type="custom" displayName="PVIndicator" name="extended.pvindicator" version="1.0.0" performanceClass="s">
                        <hmi:paramDef name="RibbonWidth"        type="number" />
                        <hmi:paramDef name="IsScaleHorizontal"  type="boolean" />
                        <hmi:paramDef name="IndicatorForeColor" type="string" />
                      </hmi:self>

                      <g id="ProcessValueIndicator"
                         hmi-bind:transform="translate({{ ParamProps.IsScaleHorizontal ? 0 : ParamProps.RibbonWidth }},{{ ParamProps.IsScaleHorizontal ? ParamProps.RibbonWidth : 18 }}) rotate({{ ParamProps.IsScaleHorizontal ? 270 : 180 }})" >
                        <rect x="0" y="8" stroke="none" height="2"
                              hmi-bind:width="{ ParamProps.RibbonWidth }"
                              hmi-bind:fill="{ ParamProps.IndicatorForeColor }" />
                        <path d="M 0,0 l 18,9 l -18,9 z"
                              hmi-bind:fill="{ ParamProps.IndicatorForeColor }" />
                      </g>
                    </svg>
                  </hmi:template>
                </hmi:master-inline>
              </hmi-feature:poleMarkers>
            </hmi-feature:marker>
          </hmi-feature:scale>
        </hmi-element:straightDial>
      </g>
    </g>
    <g id="IOFieldGroup"
      hmi:if="{{ or( HmiProps.ProcessValueIndicatorMode == HmiProcessIndicatorMode.DetailedIndicator, HmiProps.ProcessValueIndicatorMode == HmiProcessIndicatorMode.BarWithDetailedIndicator ) }}">
      <text id="ProcessIndicatorValue" hmi-bind:text-anchor="{{ LocalProps.IsCompactMode ? 'middle' :  ( LocalProps.IsScaleHorizontal ? 'start' : 'end' ) }}"
            hmi-bind:x="{ LocalProps.IOFieldX }"
            hmi-bind:y="{ LocalProps.IOFieldY }"
            hmi-bind:fill="{ LocalProps.IOFieldTextColor }"
            hmi-bind:font-size="{ HmiProps.Font.Size }"
            hmi-bind:font-style="{{ HmiProps.Font.Italic ? 'italic' : 'normal' }}"
            hmi-bind:font-weight="{ HmiProps.Font.Weight }"
            hmi-bind:font-family="{ HmiProps.Font.Name }"
            hmi-bind:text-decoration="{{ Converter.TextDecoration( HmiProps.Font ) }}">
        <hmi:text hmi-bind:value="{ LocalProps.IOFieldText }" />
      </text>

      <!--Trend indicator -->
      <g hmi:if="{{ and( HmiProps.ShowTrendIndicator, HmiProps.ComputedValueTendency != HmiValueTendency.Steady ) }}"
          hmi-bind:transform="translate({ LocalProps.TrendIndicatorX },{ LocalProps.TrendIndicatorY })">

        <path d="M 7,0 l-7,13 l4,0 l0,7 l6,0 l0,-7 l4,0 z"
              hmi-bind:transform="rotate({{ HmiProps.ComputedValueTendency == HmiValueTendency.Downwards ? 180 : 0 }},7,10)"
              hmi-bind:fill="{ LocalProps.IOFieldTextColor }" />

      </g>
    </g>
  </g>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     preserveAspectRatio="none" >

    <hmi:self type="item:HmiButton" displayName="Flat Button" name="style.flat.button" version="2.9" performanceClass="L">
        <hmi:focus focusVisual="local" />
    </hmi:self>

    <defs>
        <!-- Local definitions of this template -->
        <hmi:localDef name="ColorAlphaMask"         type="number"   value="0x01000000" />
        <hmi:localDef name="HoverAlpha"             type="number"   value="0xC0000000" />
        <hmi:localDef name="DisabledAlpha"          type="number"   value="0x99000000" />

        <hmi:localDef name="Pressed"                type="number"   value="0" />
        <hmi:localDef name="MouseHover"             type="number"   value="0" />

        <hmi:localDef name="ItemOperable"           type="boolean"  hmi-bind:value="{{ HmiProps.Operability == HmiOperability.Operable  }}" />
        <hmi:localDef name="ShowFocus"              type="boolean"  hmi-bind:value="{{ and( HmiProps.ShowFocusVisual, SysProps.HasFocus ) }}" />

        <hmi:localDef name="BorderWidth"            type="number"   hmi-bind:value="{{ LocalProps.ShowFocus ? ( HmiProps.BorderWidth + 2 ) : HmiProps.BorderWidth }}" />
        <hmi:localDef name="AlternateBorderColor"   type="HmiColor" hmi-bind:value="{{ LocalProps.ItemOperable ? HmiProps.AlternateBorderColor : 0 }}" />
        <hmi:localDef name="AlternateBorderY"       type="number"   hmi-bind:value="{{ LocalProps.Pressed ? HmiProps.BorderWidth / 2 : HmiProps.Height - HmiProps.BorderWidth / 2 }}" />

        <hmi:localDef name="Graphic"                type="string"   hmi-bind:value="{{ LocalProps.Pressed == 0 ? HmiProps.Graphic : ( HmiProps.Content.ContentMode == HmiContentMode.GraphicOrText ? HmiProps.AlternateGraphic : ( HmiProps.AlternateGraphic == '' ? HmiProps.Graphic : HmiProps.AlternateGraphic )) }}" />
        <hmi:localDef name="GraphicWidth"           type="number"   hmi-bind:value="{{ LocalProps.Pressed == 0 ? HmiProps.GraphicWidth
                                                        : ( HmiProps.AlternateGraphic == '' ? HmiProps.GraphicWidth : HmiProps.AlternateGraphicWidth ) }}" />
        <hmi:localDef name="GraphicHeight"          type="number"   hmi-bind:value="{{ LocalProps.Pressed == 0 ? HmiProps.GraphicHeight : ( HmiProps.AlternateGraphic == '' ? HmiProps.GraphicHeight : HmiProps.AlternateGraphicHeight ) }}" />
        <hmi:localDef name="Text"                   type="string"   hmi-bind:value="{{ LocalProps.Pressed == 0 ? HmiProps.Text    : ( HmiProps.AlternateText    == '' ? HmiProps.Text    : HmiProps.AlternateText    ) }}" />

        <hmi:localDef name="ContentPositionX"       type="number"   hmi-bind:value="{{ HmiProps.BorderWidth + HmiProps.Padding.Left }}" />
        <hmi:localDef name="ContentPositionY"       type="number"   hmi-bind:value="{{ HmiProps.BorderWidth + HmiProps.Padding.Top  }}" />

        <hmi:localDef name="ContentWidth"           type="number"   hmi-bind:value="{{ HmiProps.Width  - (2 * HmiProps.BorderWidth) - HmiProps.Padding.Left - HmiProps.Padding.Right }}" />
        <hmi:localDef name="ContentHeight"          type="number"   hmi-bind:value="{{ HmiProps.Height - (2 * HmiProps.BorderWidth) - HmiProps.Padding.Top  - HmiProps.Padding.Bottom }}" />

        <hmi:localDef name="ForeColor"              type="HmiColor" hmi-bind:value="{{ LocalProps.ItemOperable ? HmiProps.ForeColor : HmiProps.ForeColor % LocalProps.ColorAlphaMask + LocalProps.DisabledAlpha }}" />
        <hmi:localDef name="HoverBackColor"         type="HmiColor" hmi-bind:value="{{ HmiProps.BackColor % LocalProps.ColorAlphaMask + LocalProps.HoverAlpha }}" />
        <hmi:localDef name="DisabledBackColor"      type="HmiColor" hmi-bind:value="{{ HmiProps.BackColor % LocalProps.ColorAlphaMask + LocalProps.DisabledAlpha }}" />

        <hmi:localDef name="BackColor"              type="string"   hmi-bind:value="{{ Converter.RGBA( LocalProps.ItemOperable ?
                                                    ( LocalProps.Pressed ? HmiProps.AlternateBackColor : (LocalProps.MouseHover ? LocalProps.HoverBackColor : HmiProps.BackColor )) : LocalProps.DisabledBackColor ) }}" />

        <!-- Actions of this template -->
        <hmi:action id="onMouseHover" hmi-bind:condition="{ LocalProps.ItemOperable }" >
            <hmi:setProperty name="LocalProps.MouseHover"   type="number" value="1" />
        </hmi:action>
        <hmi:action id="onMouseDown" hmi-bind:condition="{ LocalProps.ItemOperable }" >
            <hmi:setProperty name="LocalProps.Pressed"      type="number" value="1" />
            <hmi:setProperty name="LocalProps.MouseHover"   type="number" value="0" />
        </hmi:action>
        <hmi:action id="onMouseUp" hmi-bind:condition="{ LocalProps.ItemOperable }" >
            <hmi:setProperty name="LocalProps.MouseHover"   type="number" hmi-bind:value="{ LocalProps.Pressed }" />
            <hmi:setProperty name="LocalProps.Pressed"      type="number" value="0" />
        </hmi:action>
        <hmi:action id="onMouseLeave"  hmi-bind:condition="{ LocalProps.ItemOperable }" >
            <hmi:setProperty name="LocalProps.Pressed"      type="number" value="0" />
            <hmi:setProperty name="LocalProps.MouseHover"   type="number" value="0" />
        </hmi:action>

        <!-- Graphical elements of this template -->

        <clipPath id="ItemClipRect">
            <rect id="ItemRect"
                  hmi-bind:x="{{ HmiProps.BorderWidth / 2 }}"
                  hmi-bind:y="{{ HmiProps.BorderWidth / 2 }}"
                  hmi-bind:width="{{ HmiProps.Width - HmiProps.BorderWidth }}"
                  hmi-bind:height="{{ HmiProps.Height - HmiProps.BorderWidth }}"
                  hmi-bind:stroke-width="{ LocalProps.BorderWidth }" />
        </clipPath>

    </defs>

    <g id="ExtendedButton" hmi-bind:opacity="{{ LocalProps.ItemOperable ? 1.0 : 0.5  }}"
       hmi-event:mouseHover="url(#onMouseHover)" hmi-event:down="url(#onMouseDown)" hmi-event:up="url(#onMouseUp)" hmi-event:mouseLeave="url(#onMouseLeave)">

        <!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

        <rect id="ItemBGRect"
              x="0"
              y="0"
              hmi-bind:width="{ HmiProps.Width }"
              hmi-bind:height="{ HmiProps.Height }"
              hmi-bind:fill="{ LocalProps.BackColor }"
              stroke-width="0" />

        <g clip-path="url(#ItemClipRect)">
            <hmi:include template="include.style.flat.content.svghmi" hmi-bind:for="{ HmiProps.Content }"
                         hmi-bind:x="{ LocalProps.ContentPositionX }"
                         hmi-bind:y="{ LocalProps.ContentPositionY }"
                         hmi-bind:width="{ LocalProps.ContentWidth }"
                         hmi-bind:height="{ LocalProps.ContentHeight }">

                <hmi:param name="Graphic"       type="HmiGraphic"   hmi-bind:value="{ LocalProps.Graphic }"       />
                <hmi:param name="Text"          type="string"       hmi-bind:value="{ LocalProps.Text }"          />
                <hmi:param name="Font"          type="HmiFontPart"  hmi-bind:value="{ HmiProps.Font }"            />
                <hmi:param name="TextColor"     type="HmiColor"     hmi-bind:value="{ LocalProps.ForeColor }"       />
                <hmi:param name="GraphicWidth"  type="number"       hmi-bind:value="{ LocalProps.GraphicWidth }"  />
                <hmi:param name="GraphicHeight" type="number"       hmi-bind:value="{ LocalProps.GraphicHeight }" />

            </hmi:include>
        </g>

        <rect id="ItemBorder"
            hmi-bind:x="{{ LocalProps.BorderWidth / 2 }}"
            hmi-bind:y="{{ LocalProps.BorderWidth / 2 }}"
            hmi-bind:width="{{ HmiProps.Width - LocalProps.BorderWidth }}"
            hmi-bind:height="{{ HmiProps.Height - LocalProps.BorderWidth }}"
            hmi-bind:stroke="{{ Converter.RGBA( HmiProps.BorderColor ) }}"
            hmi-bind:stroke-width="{ HmiProps.BorderWidth }"
            fill-opacity="0"
            />

        <rect id="ItemRect_Used"
            fill-opacity="0"
            hmi-bind:stroke="{{ Converter.RGBA( HmiProps.BorderColor ) }}"
            hmi-bind:x="{{ HmiProps.BorderWidth / 2 }}"
            hmi-bind:y="{{ HmiProps.BorderWidth / 2 }}"
            hmi-bind:width="{{ HmiProps.Width - HmiProps.BorderWidth }}"
            hmi-bind:height="{{ HmiProps.Height - HmiProps.BorderWidth }}" />

        <line id="AlternateItemBorder"
            x1="0"
            hmi-bind:y1="{ LocalProps.AlternateBorderY }"
            hmi-bind:x2="{ HmiProps.Width }"
            hmi-bind:y2="{ LocalProps.AlternateBorderY }"
            hmi-bind:stroke="{{ Converter.RGBA( LocalProps.AlternateBorderColor ) }}"
            hmi-bind:stroke-width="{ HmiProps.BorderWidth }"
            />

        <rect id="ItemFocusRect"
            hmi-bind:visibility="{{ LocalProps.ShowFocus ? 'visible' : 'hidden' }}"
            x="-1"
            y="-1"
            hmi-bind:width="{{ HmiProps.Width + HmiProps.BorderWidth }}"
            hmi-bind:height="{{ HmiProps.Height + HmiProps.BorderWidth }}"
            hmi-bind:stroke="{{ Converter.RGBA( HmiProps.FocusColor ) }}"
            stroke-width="4"
            fill-opacity="0"
            />

    </g>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.4/dtd/svg14-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     preserveAspectRatio="none">

    <hmi:self type="item:HmiButton" displayName="Flat Button Round" name="style.flat.button.round" version="2.9" performanceClass="L" >
        <hmi:focus focusVisual="local" />
    </hmi:self>

    <defs>
        <!-- Local definitions of this template -->
        <hmi:localDef name="ColorAlphaMask"         type="number"   value="0x01000000" />
        <hmi:localDef name="HoverAlpha"             type="number"   value="0xC0000000" />
        <hmi:localDef name="DisabledAlpha"          type="number"   value="0x99000000" />

        <hmi:localDef name="MinWidthHeight"         type="number"   hmi-bind:value="{{ Converter.Min( HmiProps.Width, HmiProps.Height )}}" />
        <hmi:localDef name="DeltaWidth"             type="number"   hmi-bind:value="{{ floor( ( HmiProps.Width  - (LocalProps.MinWidthHeight - 2)) / 2 ) }}" />
        <hmi:localDef name="DeltaHeight"            type="number"   hmi-bind:value="{{ floor( ( HmiProps.Height - (LocalProps.MinWidthHeight - 2)) / 2 ) }}" />

        <hmi:localDef name="Pressed"                type="number"   value="0" />
        <hmi:localDef name="MouseHover"             type="number"   value="0" />

        <hmi:localDef name="ItemOperable"           type="boolean"  hmi-bind:value="{{ HmiProps.Operability == HmiOperability.Operable }}" />
        <hmi:localDef name="ShowFocus"              type="boolean"  hmi-bind:value="{{ and( HmiProps.ShowFocusVisual, SysProps.HasFocus ) }}" />

        <hmi:localDef name="BorderWidth"            type="number"   hmi-bind:value="{{ LocalProps.ShowFocus ? ( HmiProps.BorderWidth + 2 ) : HmiProps.BorderWidth }}" />

        <hmi:localDef name="Graphic"                type="string"   hmi-bind:value="{{ LocalProps.Pressed == 0 ? HmiProps.Graphic : ( HmiProps.Content.ContentMode == HmiContentMode.GraphicOrText ? HmiProps.AlternateGraphic : ( HmiProps.AlternateGraphic == '' ? HmiProps.Graphic : HmiProps.AlternateGraphic )) }}" />
        <hmi:localDef name="GraphicWidth"           type="number"   hmi-bind:value="{{ LocalProps.Pressed == 0 ? HmiProps.GraphicWidth : ( HmiProps.AlternateGraphic == '' ? HmiProps.GraphicWidth : HmiProps.AlternateGraphicWidth ) }}" />
        <hmi:localDef name="GraphicHeight"          type="number"   hmi-bind:value="{{ LocalProps.Pressed == 0 ? HmiProps.GraphicHeight : ( HmiProps.AlternateGraphic == '' ? HmiProps.GraphicHeight : HmiProps.AlternateGraphicHeight ) }}" />
        <hmi:localDef name="Text"                   type="string"   hmi-bind:value="{{ LocalProps.Pressed == 0 ? HmiProps.Text    : ( HmiProps.AlternateText    == '' ? HmiProps.Text    : HmiProps.AlternateText    ) }}" />

        <hmi:localDef name="ContentPositionX"       type="number"   hmi-bind:value="{{ HmiProps.BorderWidth + HmiProps.Padding.Left }}" />
        <hmi:localDef name="ContentPositionY"       type="number"   hmi-bind:value="{{ HmiProps.BorderWidth + HmiProps.Padding.Top  }}" />

        <hmi:localDef name="ContentWidth"           type="number"   hmi-bind:value="{{ (LocalProps.MinWidthHeight - 2)- (2 * HmiProps.BorderWidth) - HmiProps.Padding.Left - HmiProps.Padding.Right }}" />
        <hmi:localDef name="ContentHeight"          type="number"   hmi-bind:value="{{ (LocalProps.MinWidthHeight - 2)- (2 * HmiProps.BorderWidth) - HmiProps.Padding.Top  - HmiProps.Padding.Bottom }}" />

        <hmi:localDef name="ForeColor"              type="HmiColor" hmi-bind:value="{{ LocalProps.ItemOperable ? HmiProps.ForeColor : HmiProps.ForeColor % LocalProps.ColorAlphaMask + LocalProps.DisabledAlpha }}" />
        <hmi:localDef name="HoverBackColor"         type="HmiColor" hmi-bind:value="{{ HmiProps.BackColor % LocalProps.ColorAlphaMask + LocalProps.HoverAlpha }}" />
        <hmi:localDef name="DisabledBackColor"      type="HmiColor" hmi-bind:value="{{ HmiProps.BackColor % LocalProps.ColorAlphaMask + LocalProps.DisabledAlpha }}" />

        <hmi:localDef name="BackColor"              type="string"   hmi-bind:value="{{ Converter.RGBA( LocalProps.ItemOperable ?
                                                    ( LocalProps.Pressed ? HmiProps.AlternateBackColor : (LocalProps.MouseHover ? LocalProps.HoverBackColor : HmiProps.BackColor )) : LocalProps.DisabledBackColor ) }}" />

        <!-- Actions of this template -->
        <hmi:action id="onMouseHover" hmi-bind:condition="{ LocalProps.ItemOperable }" >
            <hmi:setProperty name="LocalProps.MouseHover" type="number" value="1" />
        </hmi:action>
        <hmi:action id="onMouseDown" hmi-bind:condition="{ LocalProps.ItemOperable }" >
            <hmi:setProperty name="LocalProps.Pressed"      type="number" value="1" />
            <hmi:setProperty name="LocalProps.MouseHover"   type="number" value="0" />
        </hmi:action>
        <hmi:action id="onMouseUp" hmi-bind:condition="{ LocalProps.ItemOperable }" >
            <hmi:setProperty name="LocalProps.MouseHover"   type="number" hmi-bind:value="{ LocalProps.Pressed }" />
            <hmi:setProperty name="LocalProps.Pressed"      type="number" value="0" />
        </hmi:action>
        <hmi:action id="onMouseLeave" hmi-bind:condition="{ LocalProps.ItemOperable }" >
            <hmi:setProperty name="LocalProps.Pressed"      type="number" value="0" />
            <hmi:setProperty name="LocalProps.MouseHover"   type="number" value="0" />
        </hmi:action>

        <!-- Graphical elements of this template -->

        <clipPath id="ItemClipRect">
            <rect id="ItemRect"
                  hmi-bind:x="{{ LocalProps.DeltaWidth  + LocalProps.BorderWidth / 2 }}"
                  hmi-bind:y="{{ LocalProps.DeltaHeight + LocalProps.BorderWidth / 2 + ( LocalProps.Pressed ? 2 : 0 ) }}"
                  hmi-bind:width="{{ (LocalProps.MinWidthHeight - 2)- LocalProps.BorderWidth }}"
                  hmi-bind:height="{{ (LocalProps.MinWidthHeight - 2)- LocalProps.BorderWidth }}"
                  hmi-bind:stroke-width="{ LocalProps.BorderWidth }"
                  hmi-bind:rx="{{ (LocalProps.MinWidthHeight - 2)/ 2 }}" />
        </clipPath>
    </defs>

    <g id="ExtendedButton" hmi-bind:opacity="{{ LocalProps.ItemOperable ? 1.0 : 0.5  }}"
       hmi-event:mouseHover="url(#onMouseHover)" hmi-event:down="url(#onMouseDown)" hmi-event:up="url(#onMouseUp)" hmi-event:mouseLeave="url(#onMouseLeave)">
        <rect id="ItemBGRect"
              hmi-bind:x="{{ LocalProps.DeltaWidth }}"
              hmi-bind:y="{{ LocalProps.DeltaHeight - 1 + ( LocalProps.Pressed ? 2 : 0 ) }}"
              hmi-bind:width="{{ (LocalProps.MinWidthHeight - 2) }}"
              hmi-bind:height="{{ (LocalProps.MinWidthHeight - 2) }}"
              hmi-bind:fill="{ LocalProps.BackColor }"
              stroke-width="0"
              hmi-bind:rx="{{ (LocalProps.MinWidthHeight - 2)/ 2 }}" />

        <g clip-path="url(#ItemClipRect)">
            <hmi:include template="include.style.flat.content.svghmi" hmi-bind:for="{ HmiProps.Content }"
                         hmi-bind:x="{{ LocalProps.DeltaWidth  + LocalProps.ContentPositionX }}"
                         hmi-bind:y="{{ LocalProps.DeltaHeight + LocalProps.ContentPositionY }}"
                         hmi-bind:width="{ LocalProps.ContentWidth }"
                         hmi-bind:height="{ LocalProps.ContentHeight }">

                <hmi:param name="Graphic"       type="HmiGraphic"   hmi-bind:value="{ LocalProps.Graphic }"         />
                <hmi:param name="Text"          type="string"       hmi-bind:value="{ LocalProps.Text }"            />
                <hmi:param name="Font"          type="HmiFontPart"  hmi-bind:value="{ HmiProps.Font }"              />
                <hmi:param name="TextColor"     type="HmiColor"     hmi-bind:value="{ LocalProps.ForeColor }"         />
                <hmi:param name="GraphicWidth"  type="number"       hmi-bind:value="{ LocalProps.GraphicWidth }"    />
                <hmi:param name="GraphicHeight" type="number"       hmi-bind:value="{ LocalProps.GraphicHeight }"   />

            </hmi:include>
        </g>

        <rect id="ItemBorder"
              hmi-bind:x="{{ LocalProps.DeltaWidth  + LocalProps.BorderWidth / 2 }}"
              hmi-bind:y="{{ LocalProps.DeltaHeight - 1 + LocalProps.BorderWidth / 2 + ( LocalProps.Pressed ? 2 : 0 ) }}"
              hmi-bind:width="{{ (LocalProps.MinWidthHeight - 2)- LocalProps.BorderWidth }}"
              hmi-bind:height="{{ (LocalProps.MinWidthHeight - 2)- LocalProps.BorderWidth }}"
            hmi-bind:stroke="{{ Converter.RGBA( HmiProps.BorderColor ) }}"
            hmi-bind:stroke-width="{ HmiProps.BorderWidth }"
            fill-opacity="0"
            hmi-bind:rx="{{ (LocalProps.MinWidthHeight - 2)/ 2 }}"
            />

        <circle id="FocusCircle"
                hmi-bind:visibility="{{ LocalProps.ShowFocus ? 'visible' : 'hidden' }}"
                hmi-bind:cx="{{ LocalProps.DeltaWidth + (LocalProps.MinWidthHeight - 2)/ 2 }}"
                hmi-bind:cy="{{ LocalProps.DeltaHeight + (LocalProps.MinWidthHeight - 2)/ 2 + (LocalProps.Pressed ? 2 : 0) }}"
                hmi-bind:r="{{ (LocalProps.MinWidthHeight - 2)/ 2 + 1 }}"
                stroke-width="2" fill="none"
                hmi-bind:stroke="{{ Converter.RGBA( HmiProps.FocusColor ) }}" />

        <rect id="ItemRect_Used"
              fill-opacity="0"
              hmi-bind:x="{{ LocalProps.DeltaWidth  + LocalProps.BorderWidth / 2 }}"
              hmi-bind:y="{{ LocalProps.DeltaHeight + LocalProps.BorderWidth / 2 + ( LocalProps.Pressed ? 2 : 0 ) }}"
              hmi-bind:width="{{ (LocalProps.MinWidthHeight - 2)- LocalProps.BorderWidth }}"
              hmi-bind:height="{{ (LocalProps.MinWidthHeight - 2)- LocalProps.BorderWidth }}"
              hmi-bind:rx="{{ (LocalProps.MinWidthHeight - 2)/ 2 }}" />

        <path hmi-bind:d="M {{ LocalProps.DeltaWidth }},{{ ((LocalProps.MinWidthHeight - 2)/ 2 + ( LocalProps.Pressed ? 2 : 0 )) + (LocalProps.DeltaHeight - 1 + ( LocalProps.Pressed ? 2 : 0 )) }} a {{ (LocalProps.MinWidthHeight - 2)/ 2 }} {{ (LocalProps.MinWidthHeight - 2)/ 2 }} 0 0 {{ LocalProps.Pressed ? 1 : 0 }} {{ (LocalProps.MinWidthHeight - 2)}},0 a {{ (LocalProps.MinWidthHeight - 2)/ 2 }},{{ (LocalProps.MinWidthHeight - 2)/ 2 + 2 }} 0 0 {{ LocalProps.Pressed ? 0 : 1 }} {{ -(LocalProps.MinWidthHeight - 2)}},0"
              hmi-bind:fill="{{ Converter.RGBA( HmiProps.AlternateBorderColor ) }}"
              stroke-width="0" />
    </g>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     preserveAspectRatio="none">

    <hmi:self type="item:HmiCheckBoxGroup" displayName="Flat CheckBoxGroup" name="style.flat.checkboxgroup" version="2.9" performanceClass="L" >
        <hmi:focus focusVisual="local" />
    </hmi:self>

    <defs>
        <!-- Local definitions of this template -->
        <hmi:localDef name="ScrollBarPart"              type="HmiScrollBarSystemPart" hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiScrollBarSystemPart' ) }}" />
        <hmi:localDef name="ScrollBarPosition"          type="number" value="0" />
        <hmi:localDef name="ShowFocus"                  type="boolean"  hmi-bind:value="{{ and( HmiProps.ShowFocusVisual, SysProps.HasFocus ) }}" />

        <hmi:localDef name="BorderColor"                type="number"   hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : HmiProps.BorderColor }}" />
        <hmi:localDef name="BorderWidth"                type="number"   hmi-bind:value="{{ LocalProps.ShowFocus ? ( HmiProps.BorderWidth + 2 ) : HmiProps.BorderWidth }}" />

        <hmi:localDef name="CheckBoxCount"              type="number"   hmi-bind:value="{{ Converter.CountItems(HmiProps.SelectionItems) }}" />
        <hmi:localDef name="SelectionAutoFactor"        type="number"   hmi-bind:value="{{ and( ( HmiProps.Content.ContentMode == HmiContentMode.GraphicAndText ), or( HmiProps.Content.TextPosition == HmiTextPosition.Top, HmiProps.Content.TextPosition == HmiTextPosition.Bottom ) ) ? 1 - HmiProps.Content.SplitRatio : 1 }}" />
        <hmi:localDef name="SelectionAutoHeight"        type="number"   hmi-bind:value="{{ HmiProps.Font.Size * 3 / LocalProps.SelectionAutoFactor }}" />
        <hmi:localDef name="SelectionItemHeight"        type="number"   hmi-bind:value="{{ HmiProps.SelectionItemHeight == 0 ? LocalProps.SelectionAutoHeight : HmiProps.SelectionItemHeight }}" />

        <hmi:localDef name="ContentPositionX"           type="number"   hmi-bind:value="{{ HmiProps.BorderWidth + HmiProps.Padding.Left }}" />
        <hmi:localDef name="ContentPositionY"           type="number"   hmi-bind:value="{{ HmiProps.BorderWidth + HmiProps.Padding.Top  }}" />

        <hmi:localDef name="ViewHeight"                 type="number"   hmi-bind:value="{{ HmiProps.Height - (2 * HmiProps.BorderWidth) - HmiProps.Padding.Top  - HmiProps.Padding.Bottom }}" />
        <hmi:localDef name="ContentHeight"              type="number"   hmi-bind:value="{{ LocalProps.CheckBoxCount * LocalProps.SelectionItemHeight }}" />
        <hmi:localDef name="ScrollBarWidth"             type="number"   hmi-bind:value="{{ gt( LocalProps.ContentHeight, LocalProps.ViewHeight ) ? LocalProps.ScrollBarPart.Thickness : 0 }}" />
        <hmi:localDef name="ContentWidth"               type="number"   hmi-bind:value="{{ HmiProps.Width  - 2 * HmiProps.BorderWidth - HmiProps.Padding.Left - HmiProps.Padding.Right - LocalProps.ScrollBarWidth }}" />
        <hmi:localDef name="ScrollBarContentHeight"     type="number"   hmi-bind:value="{{ HmiProps.Height - ( 2 * HmiProps.BorderWidth + HmiProps.Padding.Top + HmiProps.Padding.Bottom ) }}" />
        <hmi:localDef name="ScrollBarContentPositionX"  type="number"   hmi-bind:value="{{ HmiProps.Width - HmiProps.BorderWidth - HmiProps.Padding.Right - LocalProps.ScrollBarWidth }}" />
        
        <!-- Graphical elements of this template -->
        <clipPath id="ItemClipRect">
            <rect id="ItemRect"
                  hmi-bind:x="{{ HmiProps.BorderWidth / 2 }}"
                  hmi-bind:y="{{ HmiProps.BorderWidth / 2 }}"
                  hmi-bind:width="{{ HmiProps.Width - HmiProps.BorderWidth }}"
                  hmi-bind:height="{{ HmiProps.Height - HmiProps.BorderWidth }}"
                  hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}"
                  hmi-bind:stroke="{{ Converter.RGBA( LocalProps.BorderColor ) }}"
                  hmi-bind:stroke-width="{ LocalProps.BorderWidth }"
                  rx="5" />
        </clipPath>

    </defs>
    <g id="ElementsGroupCheckbox">
        <g id="ExtendedButton">

          <rect id="ItemRect_Background"
              hmi-bind:x="{{ HmiProps.BorderWidth / 2 }}"
              hmi-bind:y="{{ HmiProps.BorderWidth / 2 }}"
              hmi-bind:width="{{ HmiProps.Width - HmiProps.BorderWidth }}"
              hmi-bind:height="{{ HmiProps.Height - HmiProps.BorderWidth }}"
              hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}" />
          
            <g clip-path="url(#ItemClipRect)">
                <g hmi:if="{{ LocalProps.CheckBoxCount != 0 }}" id="SelectionItem_0"
                   hmi-bind:transform="translate(0, {{ LocalProps.ScrollBarPosition * -1.0 }} )">
                    <hmi:include template="include.style.flat.checkbox.svghmi" hmi-bind:forEach="{ HmiProps.SelectionItems }"
                                hmi-bind:x="{ LocalProps.ContentPositionX }"
                                hmi-bind:y="{ LocalProps.ContentPositionY }"
                                hmi-bind:width="{ LocalProps.ContentWidth }"
                                hmi-bind:height="{ LocalProps.ContentHeight }">

                        <hmi:param name="ItemOperable"            type="boolean"        hmi-bind:value="{{ HmiProps.Operability == HmiOperability.Operable }}" />
                        <hmi:param name="ForeColor"               type="HmiColor"       hmi-bind:value="{ HmiProps.ForeColor }" />
                        <hmi:param name="BackColor"               type="HmiColor"       hmi-bind:value="{ HmiProps.AlternateBackColor }" />
                        <hmi:param name="BorderColor"             type="HmiColor"       hmi-bind:value="{ HmiProps.AlternateBorderColor }" />
                        <hmi:param name="FocusColor"              type="HmiColor"       hmi-bind:value="{ HmiProps.FocusColor }" />
                        <hmi:param name="BorderWidth"             type="number"         value="2" />
                        <hmi:param name="Content"                 type="HmiContentPart" hmi-bind:value="{ HmiProps.Content }" />
                        <hmi:param name="Font"                    type="HmiFontPart"    hmi-bind:value="{ HmiProps.Font }" />
                        <hmi:param name="SelectorPosition"        type="number"         hmi-bind:value="{ HmiProps.SelectorPosition }" />
                        <hmi:param name="SelectionItemHeight"     type="number"         hmi-bind:value="{ LocalProps.SelectionItemHeight }" />
                        <hmi:param name="ShowFocusVisual"         type="boolean"        hmi-bind:value="{ HmiProps.ShowFocusVisual }" />
                        <hmi:param name="SelectionItemDefaultHeight"  type="number"        hmi-bind:value="{ HmiProps.SelectionItemHeight }" />

                    </hmi:include>
                </g>
                 
            </g>

        </g>

      <rect id="ItemRect_Used"
          hmi-bind:x="{{ HmiProps.BorderWidth / 2 }}"
          hmi-bind:y="{{ HmiProps.BorderWidth / 2 }}"
          hmi-bind:width="{{ HmiProps.Width - HmiProps.BorderWidth }}"
          hmi-bind:height="{{ HmiProps.Height - HmiProps.BorderWidth }}"
          hmi-bind:stroke="{{ Converter.RGBA( LocalProps.BorderColor ) }}"
          hmi-bind:stroke-width="{ LocalProps.BorderWidth }"
          fill="none"/>
      
        <g hmi:if="{{ gt( LocalProps.ContentHeight, LocalProps.ViewHeight ) }}" id="ScrollBarForExpandedCheckBoxGroup">

          <hmi:include template="include.style.flat.scrollbarstandalone.svghmi"
              hmi-bind:width="{ HmiProps.Width }"
              hmi-bind:height="{ HmiProps.Height }" >

            <hmi:param name="BackColor"           type="HmiColor"         hmi-bind:value="{ LocalProps.ScrollBarPart.BackColor }" />
            <hmi:param name="ThumbBackColor"      type="HmiColor"         hmi-bind:value="{ LocalProps.ScrollBarPart.ThumbBackColor }" />
            <hmi:param name="Orientation"         type="HmiOrientation"   hmi-bind:value="{{ HmiOrientation.Vertical }}" />
            <hmi:param name="Width"               type="number"           hmi-bind:value="{ LocalProps.ScrollBarWidth }" />
            <hmi:param name="Height"              type="number"           hmi-bind:value="{ LocalProps.ScrollBarContentHeight }" />
            <hmi:param name="BeginValue"          type="number"           value="0" />
            <hmi:param name="EndValue"            type="number"           hmi-bind:value="{ LocalProps.ContentHeight }" />
            <hmi:param name="CurrentValue"        type="number"           hmi-bind:value="{ LocalProps.ScrollBarPosition }" />
            <hmi:param name="VisibleValueRange"   type="number"           hmi-bind:value="{ LocalProps.ViewHeight }" />
            <hmi:param name="Thickness"           type="number"           hmi-bind:value="{ LocalProps.ScrollBarWidth }" />
            <hmi:param name="SmallStepValueRange" type="number"           hmi-bind:value="{ LocalProps.CheckBoxCount }" />
            <hmi:param name="BorderWidth"         type="number"           value="0" />
            <hmi:param name="OffsetX"             type="number"           hmi-bind:value="{ LocalProps.ScrollBarContentPositionX }" />
            <hmi:param name="OffsetY"             type="number"           hmi-bind:value="{ LocalProps.ContentPositionY }" />

            </hmi:include>
        </g>
    </g>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     preserveAspectRatio="none">

    <hmi:self type="item:HmiClock" displayName="Flat Clock" name="style.flat.clock" version="2.8" performanceClass="L" >
        <hmi:focus focusVisual="local" />
    </hmi:self>

    <defs>
        <hmi:localDef name="IsCompactMode"          type="boolean"  hmi-bind:value="{{ or( lt( HmiProps.Width, 100 ), lt( HmiProps.Height, 100 ) ) }}" />
        <hmi:localDef name="ShowFocus"              type="boolean"  hmi-bind:value="{{ and( HmiProps.ShowFocusVisual, SysProps.HasFocus ) }}" />
        <hmi:localDef name="ItemOperable"           type="boolean"  hmi-bind:value="{{ HmiProps.Operability == HmiOperability.Operable }}" />
        
        <hmi:localDef name="ArcSpacing"             type="number"   hmi-bind:value="{{ ( HmiProps.BorderWidth ? HmiProps.BorderWidth + 3 : 0 ) }}" />

        <hmi:localDef name="TitleHeight"            type="number"   hmi-bind:value="{{ HmiProps.Title.Visible ? HmiProps.Title.Font.Size : 0 }}" />

        <hmi:localDef name="DialTickColor"          type="string"   hmi-bind:value="{{ Converter.RGBA( HmiProps.DialTickColor ) }}" />
        <hmi:localDef name="DialLabelColor"         type="string"   hmi-bind:value="{{ Converter.RGBA( HmiProps.DialLabelColor ) }}" />
        <hmi:localDef name="DialBackColor"          type="string"   hmi-bind:value="{{ Converter.RGBA( HmiProps.DialBackColor ) }}" />
        <hmi:localDef name="DialForeColor"          type="string"   value="rgba(126,145,160,0.15)" />
        <hmi:localDef name="ClockHandColor"         type="string"   value="#7E91A0" />

        <hmi:localDef name="MinWidthHeight"         type="number"   hmi-bind:value="{{ Converter.Min( HmiProps.Width, HmiProps.Height ) }}" />
        <hmi:localDef name="Radius"                 type="number"   hmi-bind:value="{{ LocalProps.MinWidthHeight / 2 }}" />
        <hmi:localDef name="DeltaWidth"             type="number"   hmi-bind:value="{{ ( HmiProps.Width  - LocalProps.MinWidthHeight ) / 2 }}" />
        <hmi:localDef name="DeltaHeight"            type="number"   hmi-bind:value="{{ ( HmiProps.Height - LocalProps.MinWidthHeight ) / 2 }}" />

        <hmi:localDef name="CenterX"                type="number"   hmi-bind:value="{{ LocalProps.DeltaWidth  + LocalProps.Radius }}" />
        <hmi:localDef name="CenterY"                type="number"   hmi-bind:value="{{ LocalProps.DeltaHeight + LocalProps.Radius }}" />

        <hmi:localDef name="DialRadius"             type="number"   hmi-bind:value="{{ LocalProps.Radius / 2 - LocalProps.ArcSpacing - 10 }}" />
        <hmi:localDef name="TickOffset"             type="number"   hmi-bind:value="{{ ((LocalProps.Radius - 25) / 2) + 4 }}" />
        
        <hmi:localDef name="Time"                   type="number"   hmi-bind:value="{{ ( HmiProps.ComputedHours * 3600 + HmiProps.ComputedMinutes * 60 + HmiProps.ComputedSeconds ) * 1000 }}" />
        <hmi:localDef name="TimeFormatString"       type="string"   hmi-bind:value="{{ HmiProps.ShowHours ? ( HmiProps.ShowMinutes ? ( HmiProps.ShowSeconds ? '{T,@HH:mm:ss}' : '{T,@HH:mm}' ) : ( HmiProps.ShowSeconds ? '{T,@HH::ss}' : '{T,@HH}' ) ) : ( HmiProps.ShowMinutes ? ( HmiProps.ShowSeconds ? '{T,@mm:ss}' : '{T,@mm}' ) : ( HmiProps.ShowSeconds ? '{T,@ss}' : '{T,@–}' ) ) }}" />
    </defs>

    <g hmi-bind:opacity="{{ LocalProps.ItemOperable ? 1.0 : 0.5 }}">
        <!-- background rectangle -->
        <g id="ElementsGroup" hmi:if="{{ or( (Converter.Alpha( HmiProps.BackColor ) != 0), (Converter.Alpha( HmiProps.BorderColor ) != 0) ) }}" >

            <rect id="ItemBGRect"
                  hmi-bind:x="{{ HmiProps.BorderWidth / 2 }}"
                  hmi-bind:y="{{ HmiProps.BorderWidth / 2 }}"
                  hmi-bind:width="{{ HmiProps.Width - HmiProps.BorderWidth }}"
                  hmi-bind:height="{{ HmiProps.Height - HmiProps.BorderWidth }}"
                  hmi-bind:fill="{{ Converter.RGBA(HmiProps.BackColor) }}"
                  hmi-bind:stroke="{{ Converter.RGBA( HmiProps.BorderColor ) }}"
                  hmi-bind:stroke-width="{ HmiProps.BorderWidth }" />

        </g>

        <!-- Arc Dial for Background -->
        <g id="DialBackground" hmi:if="{{ not( LocalProps.IsCompactMode ) }}">

            <circle hmi-bind:fill="{ LocalProps.DialBackColor }"
                    hmi-bind:cx="{ LocalProps.CenterX }"
                    hmi-bind:cy="{ LocalProps.CenterY }"
                    hmi-bind:r="{{ LocalProps.Radius}}" />

            <circle hmi-bind:fill="{ LocalProps.DialForeColor }"
                    hmi-bind:cx="{ LocalProps.CenterX }"
                    hmi-bind:cy="{ LocalProps.CenterY }"
                    hmi-bind:r="{{ LocalProps.Radius}}" />

            <circle hmi-bind:fill="{ LocalProps.DialBackColor }"
                    hmi-bind:cx="{ LocalProps.CenterX }"
                    hmi-bind:cy="{ LocalProps.CenterY }"
                    hmi-bind:r="{{ LocalProps.Radius - 25 }}"
                    hmi-bind:stroke="{ LocalProps.DialTickColor }" />
        </g>


        <!-- Arc Dial -->
        <g id="ArcDialNVE" hmi:if="{{ not( LocalProps.IsCompactMode ) }}">

            <hmi-element:arcDial hmi-bind:center-x="{ LocalProps.CenterX }"
                                 hmi-bind:center-y="{ LocalProps.CenterY }"
                                 hmi-bind:radius="{ LocalProps.DialRadius }"
                                 begin-angle="270"
                                 angle-range="360">

                <!-- Scale -->
                <hmi-feature:scale begin-value="0"
                                   end-value="12"
                                   maximum-sections="12"
                                   extend="none">

                    <!-- Scale -->
                    <hmi-feature:division count="4">
                        <hmi-feature:division count="3">
                            <hmi-feature:ticks hmi-bind:condition="{{ has( HmiProps.DialMode, HmiScaleMode.Ticks) }}"
                                            position-filter="inner"
                                            hmi-bind:offset="{ LocalProps.TickOffset }"
                                            length="8"
                                            hmi-bind:stroke="{ LocalProps.DialTickColor }" />

                            <!-- Labels -->
                            <hmi-feature:labels hmi-bind:condition="{{ has( HmiProps.DialMode, HmiScaleMode.Labels) }}"
                                                alignment-mode="center"
                                                position-filter="end"
                                                hmi-bind:offset="{ LocalProps.TickOffset }"
                                                hmi-bind:fill="{ LocalProps.DialLabelColor }"
                                                output-format="{I}">


                                <hmi-feature:font hmi-bind:scope="{ HmiProps.DialLabelFont }" />

                            </hmi-feature:labels>
                        </hmi-feature:division>
                    </hmi-feature:division>


                </hmi-feature:scale>
            </hmi-element:arcDial>

        </g>

        <g id="TitleGroup" hmi:if="{{ LocalProps.TitleHeight != 0 }}">
            <text text-anchor="middle"
                  hmi-bind:x="{ LocalProps.CenterX }"
                  hmi-bind:y="{{ LocalProps.CenterY }}"
                  hmi-bind:fill="{{ Converter.RGBA( HmiProps.Title.ForeColor ) }}"
                  hmi-bind:font-size="{ HmiProps.Title.Font.Size }"
                  hmi-bind:font-style="{{ HmiProps.Title.Font.Italic ? 'italic' : 'normal' }}"
                  hmi-bind:font-weight="{ HmiProps.Title.Font.Weight }"
                  hmi-bind:font-family="{ HmiProps.Title.Font.Name }"
                  hmi-bind:text-decoration="{{ Converter.TextDecoration( HmiProps.Title.Font ) }}">
                <hmi:text hmi-bind:value="{ HmiProps.Title.Text }" />
            </text>
        </g>

        <g id="ClockHand" hmi:if="{{ not( LocalProps.IsCompactMode ) }}" hmi-bind:transform="translate( {{ LocalProps.CenterX }},{{ LocalProps.CenterY }} )"
           hmi-bind:fill="{ LocalProps.ClockHandColor }" hmi-bind:stroke="{ LocalProps.ClockHandColor }">
            <line hmi:if="{ HmiProps.ShowHours }" hmi-bind:transform="rotate( {{ ( HmiProps.ComputedHours % 12 ) * 30 + HmiProps.ComputedMinutes * 0.5 }} )"
                  stroke-width="4" x1="0" y1="0" x2="0" hmi-bind:y2="{{ -1.0 * ( (LocalProps.Radius - 25) * 0.65 ) }}" />

            <line hmi:if="{ HmiProps.ShowMinutes }" hmi-bind:transform="rotate( {{ HmiProps.ComputedMinutes * 6 + HmiProps.ComputedSeconds * 0.1 }} )"
                  stroke-width="2" x1="0" y1="0" x2="0" hmi-bind:y2="{{ -1.0 * ( (LocalProps.Radius - 25) * 0.85 ) }}" />

            <line hmi:if="{ HmiProps.ShowSeconds }" hmi-bind:transform="rotate( {{ HmiProps.ComputedSeconds * 6 }} )"
                  stroke-width="1" x1="0" y1="0" x2="0" hmi-bind:y2="{{ -1.0 * ( (LocalProps.Radius - 25) * 0.95 ) }}" />

        </g>
        
        <g id="DigitalFormat"  hmi:if="{ LocalProps.IsCompactMode }">
            
            <rect id="DialBackgroundDigital" hmi-bind:fill="{ LocalProps.DialBackColor }"
                    hmi-bind:x="{{ HmiProps.BorderWidth / 2 }}"
                    hmi-bind:y="{{ HmiProps.BorderWidth / 2 }}"
                    hmi-bind:width="{{ HmiProps.Width - HmiProps.BorderWidth }}"
                    hmi-bind:height="{{ HmiProps.Height - HmiProps.BorderWidth }}"
                    hmi-bind:stroke="{ LocalProps.DialTickColor }" 
            />
            <text id="ValueText" text-anchor="middle"
                  hmi-bind:x="{{ HmiProps.Width  / 2 }}"
                  hmi-bind:y="{{ (HmiProps.Height + (HmiProps.DialLabelFont.Size / 2)) / 2 }}"
                  hmi-bind:fill="{ LocalProps.DialLabelColor }"
                  hmi-bind:font-size="{ HmiProps.DialLabelFont.Size }"
                  hmi-bind:font-style="{{ HmiProps.DialLabelFont.Italic ? 'italic' : 'normal' }}"
                  hmi-bind:font-weight="{ HmiProps.DialLabelFont.Weight }"
                  hmi-bind:font-family="{ HmiProps.DialLabelFont.Name }"
                  hmi-bind:text-decoration="{{ Converter.TextDecoration( HmiProps.DialLabelFont ) }}">
                <hmi:text hmi-bind:value="{{ Converter.FormatPattern( LocalProps.Time, LocalProps.TimeFormatString ) }}" />
            </text>      
        </g>
        
        <rect id="ItemRect_Used"
        hmi:if="{ LocalProps.ShowFocus }"
              fill-opacity="0"
              hmi-bind:stroke="{{ Converter.RGBA( HmiProps.FocusColor ) }}"
              x="1"
              y="1"
              hmi-bind:width="{{ HmiProps.Width - 2 }}"
              hmi-bind:height="{{ HmiProps.Height - 2 }}"
              stroke-width="2" />
    </g>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2016. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:hmi="http://svg.siemens.com/hmi/"
    xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
    xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
    xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
    xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
    xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"

    preserveAspectRatio="none"
    overflow="visible" >

    <hmi:self type="item:HmiCustomWebControlContainer" displayName="Flat Custom Web Control Container" name="style.flat.customwebcontrolcontainer" version="2.8" performanceClass="L" >
        <hmi:focus focusVisual="local" />
    </hmi:self>

    <defs>
        <!-- System definitions of this template -->
        <hmi:localDef name="WindowFramePart"              type="HmiWindowFrameSystemPart"   hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiWindowFrameSystemPart' ) }}" />

        <hmi:localDef name="MinimumWidth"                 type="number"     value="100" />
        <hmi:localDef name="MinimumHeight"                type="number"     value="50"  />

        <hmi:localDef name="ShowFocus"                    type="boolean"    hmi-bind:value="{{ and( HmiProps.ShowFocusVisual, SysProps.HasFocus ) }}" />
        <hmi:localDef name="ShowCaption"                  type="boolean"    hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowCaption ) }}" />
        <hmi:localDef name="CaptionHeight"                type="number"     hmi-bind:value="{{ LocalProps.ShowCaption ? LocalProps.WindowFramePart.CaptionHeight : 0 }}" />
        <hmi:localDef name="CaptionColor"                 type="number"     hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : HmiProps.CaptionColor }}" />
        <hmi:localDef name="WindowBorderColor"            type="number"     hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : LocalProps.WindowFramePart.BorderColor }}" />
        <hmi:localDef name="WindowBorderWidth"            type="number"     hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowBorder ) ? LocalProps.WindowFramePart.BorderWidth : 0 }}" />

        <clipPath id="WindowClipRect">
            <rect id="ItemRect"
                  hmi-bind:width="{ HmiProps.Width   }"
                  hmi-bind:height="{ HmiProps.Height }"
                  stroke="none" />
        </clipPath>
    </defs>

    <g id="ElementsGroup" clip-path="url(#WindowClipRect)">

        <!-- Item has no BackColor >>> no BackGround
        <rect id="BackGroundRect"
              hmi-bind:width="{ HmiProps.Width }"
              hmi-bind:height="{ HmiProps.Height }"
              hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}"
              stroke="none"
              hmi-bind:rx="{ LocalProps.SYS_RX }" /> -->

        <!-- Content -->
        <g >
            <hmi-element:content
                 hmi-bind:left="{ LocalProps.WindowBorderWidth }"
                 hmi-bind:top="{{ LocalProps.WindowBorderWidth + LocalProps.CaptionHeight }}"
                 hmi-bind:width="{{ HmiProps.Width - 2 * LocalProps.WindowBorderWidth }}"
                 hmi-bind:height="{{ HmiProps.Height - 2 * LocalProps.WindowBorderWidth - LocalProps.CaptionHeight }}" />
        </g>

    </g>

    <!-- Frame -->
    <hmi:include template="include.style.flat.hmiwindowframe.default.svghmi"
                 x="0"
                 y="0"
                 hmi-bind:width="{ HmiProps.Width }"
                 hmi-bind:height="{ HmiProps.Height }" >

        <hmi:param name="Top"               type="number"           hmi-bind:value="{ HmiProps.Top }"                 />
        <hmi:param name="Left"              type="number"           hmi-bind:value="{ HmiProps.Left }"                />
        <hmi:param name="Width"             type="number"           hmi-bind:value="{ HmiProps.Width }"               />
        <hmi:param name="Height"            type="number"           hmi-bind:value="{ HmiProps.Height }"              />
        <hmi:param name="WindowFlags"       type="HmiWindowFlag"    hmi-bind:value="{ HmiProps.WindowFlags }"         />
        <hmi:param name="MinimumWidth"      type="number"           hmi-bind:value="{ LocalProps.MinimumWidth }"      />
        <hmi:param name="MinimumHeight"     type="number"           hmi-bind:value="{ LocalProps.MinimumHeight }"     />
        <hmi:param name="Icon"              type="HmiGraphic"       hmi-bind:value="{ HmiProps.Icon }"                />
        <hmi:param name="Caption"           type="HmiTextPart"      hmi-bind:value="{ HmiProps.Caption }"             />
        <hmi:param name="CaptionColor"      type="HmiColor"         hmi-bind:value="{ LocalProps.CaptionColor }"      />
        <hmi:param name="ShowCaption"       type="boolean"          hmi-bind:value="{ LocalProps.ShowCaption }"       />
        <hmi:param name="CaptionHeight"     type="number"           hmi-bind:value="{ LocalProps.CaptionHeight }"     />
        <hmi:param name="WindowBorderWidth" type="number"           hmi-bind:value="{ LocalProps.WindowBorderWidth }" />
        <hmi:param name="WindowBorderColor" type="HmiColor"         hmi-bind:value="{ LocalProps.WindowBorderColor }" />
        <hmi:param name="ItemOperable"      type="boolean"          hmi-bind:value="{ HmiProps.Enabled }"             />
        <hmi:param name="WindowState"       type="number"           hmi-bind:value="{ HmiProps.WindowState }" />
      
    </hmi:include>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2016. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"

     preserveAspectRatio="none"
     overflow="visible" >

    <hmi:self type="item:HmiDetailedParameterControl" displayName="Flat DetailedParameterControl" name="style.flat.detailedparametercontrol" version="2.8" performanceClass="L" >
        <hmi:focus focusVisual="local" />
    </hmi:self>

    <defs>
        <!-- System definitions of this template -->
        <hmi:localDef name="ScrollBarPart"                type="HmiScrollBarSystemPart"     hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiScrollBarSystemPart' ) }}" />
        
        <hmi:localDef name="WindowFramePart"              type="HmiWindowFrameSystemPart"   hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiWindowFrameSystemPart' ) }}" />

        <hmi:localDef name="MinimumWidth"                 type="number"     value="100" />
        <hmi:localDef name="MinimumHeight"                type="number"     value="50"  />
        <hmi:localDef name="SeparatorHeight"              type="number"     value="2"   />

        <hmi:localDef name="ShowFocus"                    type="boolean"    hmi-bind:value="{{ and( HmiProps.ShowFocusVisual, SysProps.HasFocus ) }}" />
        <hmi:localDef name="ShowCaption"                  type="boolean"    hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowCaption ) }}" />
        <hmi:localDef name="CaptionHeight"                type="number"     hmi-bind:value="{{ LocalProps.ShowCaption ? LocalProps.WindowFramePart.CaptionHeight : 0 }}" />
        <hmi:localDef name="CaptionColor"                 type="number"     hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : HmiProps.CaptionColor }}" />
        <hmi:localDef name="WindowBorderColor"            type="number"     hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : LocalProps.WindowFramePart.BorderColor }}" />
        <hmi:localDef name="WindowBorderWidth"            type="number"     hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowBorder ) ? LocalProps.WindowFramePart.BorderWidth : 0 }}" />
        <hmi:localDef name="WindowInnerWidth"             type="number"     hmi-bind:value="{{ HmiProps.Width - 2 * LocalProps.WindowBorderWidth }}" />

        <!-- Properties of the Hmi Window -->
        <hmi:localDef name="IsToolBarHeightNull"          type="boolean"    hmi-bind:value="{{ HmiProps.ToolBar.Height == null }}" />
        <hmi:localDef name="TestToolBarHeight"            type="number"     hmi-bind:value="{{ LocalProps.IsToolBarHeightNull ? 0 : HmiProps.ToolBar.Height + LocalProps.ScrollBarPart.Thickness }}" />
        <hmi:localDef name="TestToolBarVisibility"        type="boolean"    hmi-bind:value="{{ LocalProps.IsToolBarHeightNull ? false : HmiProps.ToolBar.Visible }}" />
        <hmi:localDef name="TestToolBarElements"          type="boolean"    hmi-bind:value="{{ ( Converter.CountItems( HmiProps.ToolBar.Elements ) ) ? true : false }}" />

        <!-- Definition of StatusBar properties -->
        <hmi:localDef name="IsStatusBarHeightNull"        type="boolean"    hmi-bind:value="{{ HmiProps.StatusBar.Height == null }}" />
        <hmi:localDef name="TestStatusBarElements"        type="boolean"    hmi-bind:value="{{ ( Converter.CountItems( HmiProps.StatusBar.Elements ) ) ? true : false }}" />
        <hmi:localDef name="TestStatusBarHeight"          type="number"     hmi-bind:value="{{ LocalProps.IsStatusBarHeightNull ? 0 : HmiProps.StatusBar.Height }}" />
        <hmi:localDef name="HasStatusBar"                 type="boolean"    hmi-bind:value="{{ LocalProps.IsStatusBarHeightNull ? false : true }}" />
        <hmi:localDef name="StatusBarHeight"              type="number"     hmi-bind:value="{{ ( LocalProps.HasStatusBar ) ? LocalProps.TestStatusBarHeight : 0 }}" />
        <hmi:localDef name="StatusBarVisibility"          type="boolean"    hmi-bind:value="{{ LocalProps.IsStatusBarHeightNull ? false : HmiProps.StatusBar.Visible }}" />
        <hmi:localDef name="HasStatusBarElements"         type="boolean"    hmi-bind:value="{{ ( LocalProps.HasStatusBar ) ? LocalProps.TestStatusBarElements : false }}" />
        <hmi:localDef name="StatusBarVisible"             type="boolean"    hmi-bind:value="{{ ( not( and( LocalProps.StatusBarVisibility, LocalProps.HasStatusBarElements ) ) ) ? false : ( or( ( LocalProps.WindowInnerWidth == 0 ), ( LocalProps.StatusBarHeight == 0 ) ) ? false : true ) }}" />
        <hmi:localDef name="HeightPadding"                type="number"     hmi-bind:value="{{ HmiProps.Height - LocalProps.WindowBorderWidth }}" />
        <hmi:localDef name="StatusBarTop"                 type="number"     hmi-bind:value="{{ LocalProps.HeightPadding - LocalProps.StatusBarHeight }}" />

        <!-- Definition of ToolBar properties -->
        <hmi:localDef name="HasToolBar"                   type="boolean"    hmi-bind:value="{{ LocalProps.IsToolBarHeightNull ? false : true }}" />
        <hmi:localDef name="ToolBarHeight"                type="number"     hmi-bind:value="{{ ( LocalProps.HasToolBar ) ? LocalProps.TestToolBarHeight : 0 }}" />
        <hmi:localDef name="ToolBarVisibility"            type="boolean"    hmi-bind:value="{{ ( LocalProps.HasToolBar ) ? LocalProps.TestToolBarVisibility: false }}" />
        <hmi:localDef name="HasToolBarElements"           type="boolean"    hmi-bind:value="{{ ( LocalProps.HasToolBar ) ? LocalProps.TestToolBarElements : false }}" />
        <hmi:localDef name="ToolBarVisible"               type="boolean"    hmi-bind:value="{{ ( not( and( LocalProps.ToolBarVisibility, LocalProps.HasToolBarElements ) ) ) ? false : ( or ( ( LocalProps.WindowInnerWidth == 0 ), ( LocalProps.ToolBarHeight == 0 ) ) ? false : true ) }}" />

        <!-- Position and Extent related properties of the content -->
        <hmi:localDef name="ContentOffsetHeight"          type="number"     hmi-bind:value="{{ ( LocalProps.ToolBarVisible ? LocalProps.ToolBarHeight : 0 ) + ( LocalProps.StatusBarVisible ? LocalProps.StatusBarHeight : 0 ) }}" />

        <hmi:localDef name="FocusColor"                   type="string"     hmi-bind:value="{{ Converter.RGBA( HmiProps.FocusColor ) }}" />

        <clipPath id="WindowClipRect">
            <rect id="ItemRect"
                  hmi-bind:width="{ HmiProps.Width   }"
                  hmi-bind:height="{ HmiProps.Height }"
                  stroke="none" />
        </clipPath>
    </defs>

    <g id="ElementsGroup" clip-path="url(#WindowClipRect)">

        <!-- Background -->
        <rect id="BackGroundRect"
              hmi-bind:width="{ HmiProps.Width }"
              hmi-bind:height="{ HmiProps.Height }"
              hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}"
              stroke="none" />


        <!-- ToolBar -->
        <g hmi:if="{ LocalProps.HasToolBar }" id="ToolBar">
            <hmi:include template="include.style.flat.toolbar.default.svghmi" hmi-bind:for="{ HmiProps.ToolBar }"
                         hmi-bind:x="{ LocalProps.WindowBorderWidth }"
                         hmi-bind:y="{{ ( LocalProps.HeightPadding - LocalProps.ToolBarHeight - ( LocalProps.StatusBarVisibility ? LocalProps.StatusBarHeight : 0 ) ) }}"
                         hmi-bind:width="{ LocalProps.WindowInnerWidth }"
                         hmi-bind:height="{ LocalProps.ToolBarHeight }">

                <hmi:param name="Width"           type="number"   hmi-bind:value="{ LocalProps.WindowInnerWidth }" />
                <hmi:param name="Height"          type="number"   hmi-bind:value="{ LocalProps.ToolBarHeight }" />
                <hmi:param name="ItemOperable"    type="boolean"  hmi-bind:value="{ HmiProps.Enabled }" />
                <hmi:param name="FocusColor"      type="string"   hmi-bind:value="{ LocalProps.FocusColor }" />
                <hmi:param name="ShowFocusVisual" type="boolean"  hmi-bind:value="{ HmiProps.ShowFocusVisual }"   />

            </hmi:include>
        </g>

        <!-- StatusBar -->
        <g hmi:if="{ LocalProps.HasStatusBar }" id="StatusBar">
            <hmi:include template="include.style.flat.statusbar.default.svghmi" hmi-bind:for="{ HmiProps.StatusBar }"
                         hmi-bind:x="{ LocalProps.WindowBorderWidth }"
                         hmi-bind:y="{ LocalProps.StatusBarTop }"
                         hmi-bind:width="{ LocalProps.WindowInnerWidth }"
                         hmi-bind:height="{ LocalProps.StatusBarHeight }">

                <hmi:param name="Width"           type="number"   hmi-bind:value="{ LocalProps.WindowInnerWidth }"  />
                <hmi:param name="Height"          type="number"   hmi-bind:value="{ LocalProps.StatusBarHeight }" />
                <hmi:param name="ItemOperable"    type="boolean"  hmi-bind:value="{ HmiProps.Enabled }"           />
                <hmi:param name="FocusColor"      type="string"   hmi-bind:value="{ LocalProps.FocusColor }"      />
                <hmi:param name="ShowFocusVisual" type="boolean"  hmi-bind:value="{ HmiProps.ShowFocusVisual }"   />

            </hmi:include>
        </g>

        <g>
            <!-- Separator between grid and toolbar -->
            <rect
                  hmi-bind:y="{{ LocalProps.HeightPadding - LocalProps.ContentOffsetHeight - LocalProps.SeparatorHeight }}"
                  hmi-bind:width="{ HmiProps.Width }"
                  hmi-bind:height="{ LocalProps.SeparatorHeight }"
                  hmi-bind:fill="{{ Converter.RGBA( HmiProps.StatusBar.BackColor ) }}"
                  stroke="none"/>
        </g>

        <!-- Content as include subtemplate -->
        <g>
            <hmi:include template="style.flat.detailedparametercontrolcontent.default.svghmi" hmi-bind:for="{ HmiProps}"
                         hmi-bind:x="{ LocalProps.WindowBorderWidth }"
                         hmi-bind:y="{{ LocalProps.WindowBorderWidth + LocalProps.CaptionHeight }}"
                         hmi-bind:width="{ LocalProps.WindowInnerWidth }"
                         hmi-bind:height="{ HmiProps.Height }" >
                <hmi:param name="WindowBorderWidth"             type="number"  hmi-bind:value="{ LocalProps.WindowBorderWidth }"   />
                <hmi:param name="CaptionHeight"                 type="number"  hmi-bind:value="{ LocalProps.CaptionHeight }"       />
                <hmi:param name="ContentOffsetHeight"           type="number"  hmi-bind:value="{ LocalProps.ContentOffsetHeight }" />
                <hmi:param name="FocusColor"                    type="string"  hmi-bind:value="{ LocalProps.FocusColor }"          />
                <hmi:param name="ShowFocusVisual"               type="boolean" hmi-bind:value="{ HmiProps.ShowFocusVisual }"       />
            </hmi:include>
        </g>
    </g>

    <!-- Frame -->
    <hmi:include template="include.style.flat.hmiwindowframe.default.svghmi"
                 x="0"
                 y="0"
                 hmi-bind:width="{ HmiProps.Width }"
                 hmi-bind:height="{ HmiProps.Height }" >

        <hmi:param name="Top"               type="number"           hmi-bind:value="{ HmiProps.Top }"                 />
        <hmi:param name="Left"              type="number"           hmi-bind:value="{ HmiProps.Left }"                />
        <hmi:param name="Width"             type="number"           hmi-bind:value="{ HmiProps.Width }"               />
        <hmi:param name="Height"            type="number"           hmi-bind:value="{ HmiProps.Height }"              />
        <hmi:param name="WindowFlags"       type="HmiWindowFlag"    hmi-bind:value="{ HmiProps.WindowFlags }"         />
        <hmi:param name="MinimumWidth"      type="number"           hmi-bind:value="{ LocalProps.MinimumWidth }"      />
        <hmi:param name="MinimumHeight"     type="number"           hmi-bind:value="{ LocalProps.MinimumHeight }"     />
        <hmi:param name="Icon"              type="HmiGraphic"       hmi-bind:value="{ HmiProps.Icon }"                />
        <hmi:param name="Caption"           type="HmiTextPart"      hmi-bind:value="{ HmiProps.Caption }"             />
        <hmi:param name="CaptionColor"      type="HmiColor"         hmi-bind:value="{ LocalProps.CaptionColor }"      />
        <hmi:param name="ShowCaption"       type="boolean"          hmi-bind:value="{ LocalProps.ShowCaption }"       />
        <hmi:param name="CaptionHeight"     type="number"           hmi-bind:value="{ LocalProps.CaptionHeight }"     />
        <hmi:param name="WindowBorderWidth" type="number"           hmi-bind:value="{ LocalProps.WindowBorderWidth }" />
        <hmi:param name="WindowBorderColor" type="HmiColor"         hmi-bind:value="{ LocalProps.WindowBorderColor }" />
        <hmi:param name="ItemOperable"      type="boolean"          hmi-bind:value="{ HmiProps.Enabled }"             />
        <hmi:param name="WindowState"       type="number"           hmi-bind:value="{ HmiProps.WindowState }" />

    </hmi:include>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-types="http://svg.siemens.com/hmi/types/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     preserveAspectRatio="none"
     id="custom_DetailedParameterControlContent"
     data-tif-type="WSI:SvgGrid">
  
    <hmi:self type="custom" displayName="Flat detailedparameterControlContent" name="style.flat.detailedparametercontrolcontent">
        <hmi:paramDef name="WindowBorderWidth"          type="number" />
        <hmi:paramDef name="CaptionHeight"              type="number" />
        <hmi:paramDef name="ContentOffsetHeight"        type="number" />
        <hmi:paramDef name="FocusColor"                 type="string" />
        <hmi:paramDef name="ShowFocusVisual"            type="boolean"/>
    </hmi:self>
    <defs>
        <hmi:localDef name="MyLocalContent"    type="HmiContentPart">
            <hmi-types:content
            SplitRatio="0.5"
            ContentMode="2"
            TextPosition="0"
            GraphicStretchMode="0"
            VerticalTextAlignment="1"
            HorizontalTextAlignment="0"
            Spacing="5"
            TextTrimming="1"
            Type="0"
            ElementID="0"/>
        </hmi:localDef>
        <hmi:localDef name="MyLocalPadding" type="HmiPaddingPart">
            <hmi-types:padding
            Left="5"
            Right="0"
            Top="0"
            Bottom="0"/>
        </hmi:localDef>
        <hmi:localDef name="ShowGridFocus"               type="boolean"  hmi-bind:value="{{ and( ParamProps.ShowFocusVisual, SysProps.HasFocus ) }}" />
        <hmi:localDef name="ResourceListDelay"           type="boolean"  value="true"          />
        <hmi:localDef name="FocusRectStrokeWidth"        type="number"   value="4"             />
        <hmi:localDef name="BorderWidth"                 type="number"   value="5"             />
        <hmi:localDef name="PropNameText"                type="string"   value="Text"          />
        <hmi:localDef name="PropNameGraphic"             type="string"   value="Graphic"       />
        <hmi:localDef name="PropNameGraphicWidth"        type="string"   value="GraphicWidth"  />
        <hmi:localDef name="PropNameGraphicHeight"       type="string"   value="GraphicHeight" />
        <hmi:localDef name="ComboWidth"                  type="number"   value="220"           />
        <hmi:localDef name="ComboHeight"                 type="number"   value="40"            />
        <hmi:localDef name="NumberFieldHeight"           type="number"   value="39" />
        <hmi:localDef name="NumberFieldWidth"            type="number"   value="60" />
        <hmi:localDef name="MainControlHeight"           type="number"   value="75"/>
        <hmi:localDef name="PaddingBtwnPSTPS"            type="number"   value="30"/>
        <hmi:localDef name="PaddingBtwnComboNum"         type="number"   value="5"/>
        <hmi:localDef name="PaddingAroundCombo"          type="number"   value="20"/>
        <hmi:localDef name="MainControlWidth"            type="number"   hmi-bind:value="{{ LocalProps.PaddingBtwnPSTPS + ( LocalProps.ComboWidth * 2 ) + ( LocalProps.NumberFieldWidth * 2 ) + ( LocalProps.PaddingBtwnComboNum * 2 ) + ( LocalProps.PaddingAroundCombo * 2 )}}" />
        <hmi:localDef name="SingleCombolWidth"           type="number"   hmi-bind:value="{{ LocalProps.MainControlWidth / 2 }}" />
        <hmi:localDef name="DirectionRow"                type="string"   value="row" />
        <hmi:localDef name="DirectionRowReverse"         type="string"   value="row-reverse" />
        <hmi:localDef name="DirectionColumnReverse"      type="string"   value="column-reverse" />
        <hmi:localDef name="PstBottomPadding"            type="number"   value="10" />
        <hmi:localDef name="NumberToDisplay"             type="number"   value="6" />
        <hmi:localDef name="NumberToolTipDispLimit"      type="number"   value="99999" />
        <hmi:localDef name="NumberFieldMidPosition"      type="string"   value="50%" />
        <hmi:localDef name="NumberFieldTextXPos"         type="number"   value="235" />
        <hmi:localDef name="NumberFieldTextYPos"         type="number"   value="26" />
        <hmi:localDef name="HeaderGridLineColor"         type="string"   hmi-bind:value="{{ Converter.RGBA(  HmiProps.ParameterView.HeaderSettings.HeaderGridLineColor ) }}"/>
        <hmi:localDef name="ControlHeight"               type="number"   hmi-bind:value="{{ Layout.ActualHeight - 2 * ParamProps.WindowBorderWidth - ParamProps.CaptionHeight - ParamProps.ContentOffsetHeight }}"/>
        <hmi:localDef name="ControlWidth"                type="number"   hmi-bind:value="{ Layout.ActualWidth }"/>
        <hmi:localDef name="IsParameterSetTypeFixed"     type="boolean"  hmi-bind:value="{{ HmiProps.ParameterSetTypeFixed ? false : true }}" />
        <hmi:localDef name="PaddingBtwnComboGrid"        type="number"   value="8" />
        <hmi:localDef name="ListItemHeight"              type="number"   hmi-bind:value="{{ HmiProps.ParameterView.Font.Size * 1.5 + 10 }}" />
        <hmi:localDef name="VerticalPaddingBtwnCombo"    type="number"   hmi-bind:value="{{ LocalProps.PaddingBtwnComboNum + LocalProps.PaddingAroundCombo }}" />
        <hmi:localDef name="ListHeightTillWindow"        type="number"   hmi-bind:value="{{ abs( LocalProps.ControlHeight - ( LocalProps.MainControlHeight - LocalProps.PaddingBtwnComboGrid ) + ( HmiProps.ToolBar.Visible ? HmiProps.ToolBar.Height : 0 ) + ( HmiProps.StatusBar.Visible ? HmiProps.StatusBar.Height : 0 ) ) }}" />
        <hmi:localDef name="MainControlHeightPadding"    type="number"   hmi-bind:value="{{ LocalProps.MainControlHeight - LocalProps.PstBottomPadding }}" />
        <hmi:localDef name="IsControlHeightLess"		     type="boolean"  hmi-bind:value="{{ lt( LocalProps.ControlHeight, LocalProps.MainControlHeightPadding ) }}" />
        <hmi:localDef name="ComboHeightTillGrid"	       type="number"   hmi-bind:value="{{ 2 * LocalProps.ComboHeight  + LocalProps.PaddingBtwnPSTPS + LocalProps.PstBottomPadding }}" />
        <hmi:localDef name="Stroke"                      type="string"   hmi-bind:value="{{ Converter.RGB( 4288059030 ) }}" />

        <!--Parameter set type positioning -->
        <hmi:localDef name="PstComboType"  type="string"   value="PST"  />
        <!--Parameter set  positioning -->
        <hmi:localDef name="PsComboType"   type="string"   value="PS"   />
        <!--Common combo properties-->
        <hmi:localDef name="NameLblY"   type="number"   value="20"   />
        <hmi:localDef name="NumberLblX" type="number"   value="235"  />
        <hmi:localDef name="ComboX"     type="number"   value="10"   />
        <hmi:localDef name="ComboY"     type="number"   value="25"   />
        <!--Font properties-->
        <hmi:localDef name="FontStyle"                          type="string"   hmi-bind:value="{{ HmiProps.Font.Italic ? 'italic': 'normal' }}" />
        <hmi:localDef name="TextDecoration"                     type="string"   hmi-bind:value="{{ HmiProps.Font.Underline ? ( HmiProps.Font.StrikeOut ? 'underline line-through' : 'underline' ) : ( HmiProps.Font.StrikeOut ? 'line-through' : ' ' ) }}" />
        <hmi:localDef name="ForeColor"                          type="string"   hmi-bind:value="{{ Converter.RGBA( HmiProps.ForeColor ) }}" />
        <hmi:localDef name="SelectionForeColor"                 type="string"   hmi-bind:value="{{ Converter.RGBA( HmiProps.SelectionForeColor ) }}" />

        <hmi:localDef name="DefaultParamSetTypeUnitText"        type="string"   hmi-bind:value="{{ Converter.GetTextByID( 'TBID_PacoCtrl_defaultTextParamSetTypeUnit' ) }}" />

        <!--Parameter set type label clipping-->
        <clipPath id="PstNameLblCliping">
            <rect hmi-bind:x="{ LocalProps.ComboX }" hmi-bind:width="{ LocalProps.ComboWidth }" hmi-bind:height="{ LocalProps.ComboHeight }">
            </rect>
        </clipPath>
        <clipPath id="PstNumberLblCliping">
            <rect hmi-bind:x="{ LocalProps.NumberLblX }" hmi-bind:width="{ LocalProps.ComboWidth }" hmi-bind:height="{ LocalProps.ComboHeight }">
            </rect>
        </clipPath>

        <!--Parameter set label clipping-->
        <clipPath id="PsNameLblCliping">
            <rect hmi-bind:x="{ LocalProps.ComboX }" hmi-bind:width="{ LocalProps.ComboWidth }" hmi-bind:height="{ LocalProps.ComboHeight }">
            </rect>
        </clipPath>
        <clipPath id="PsNumberLblCliping">
            <rect hmi-bind:x="{ LocalProps.NumberLblX }" hmi-bind:width="{ LocalProps.ComboWidth }" hmi-bind:height="{ LocalProps.ComboHeight }">
            </rect>
        </clipPath>
    </defs>
    <g hmi-flex:width="{ HmiProps.Width }"
       hmi-flex:height="{ LocalProps.ControlHeight }"
       hmi-flex:direction="{ LocalProps.DirectionColumnReverse }"
       hmi-flex:wrap="false">
        <!--Paco grid part-->
        <g hmi-flex:grow="1"
           hmi-flex:width="{ Layout.ActualWidth }">
            <g hmi:if="{{ not( HmiProps.HideDetails ) }}" id="Background"   >
                <!--change x to Layout.ActualX-->

                <hmi-element:table
                    hmi-bind:config="{ HmiProps.ParameterView }"
                    hmi-bind:height="{{ Layout.ActualHeight - 1 }}"
                    hmi-bind:width="{ Layout.ActualWidth }"
                    hmi-bind:horizontal-scrollbar-visibility="{ HmiProps.ParameterView.HorizontalScrollBarVisibility }"
                    hmi-bind:vertical-scrollbar-visibility="{ HmiProps.ParameterView.VerticalScrollBarVisibility }">

                    <!--Column Header-->
                    <hmi-feature:header>
                        <hmi:master-inline>
                            <hmi:param name="Padding"   type="HmiPaddingPart"   hmi-bind:value="{ HmiProps.ParameterView.CellPadding }" />
                            <hmi:template>
                                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                                      xmlns:hmi="http://svg.siemens.com/hmi/"
                                      xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                                      height="10" width="10" id="ColumnHeaderSVG" >

                                    <hmi:self type="system:HmiHeaderCellSystemPart" displayName="ColumnHeader" name="columnheader" version="1.0.0" performanceClass="s">
                                        <hmi:paramDef name="Padding"          type="HmiPaddingPart" />
                                    </hmi:self>

                                    <defs>
                                        <hmi:localDef name="PaddingLeftRight"       type="number"     hmi-bind:value="{{ ( ParamProps.Padding.Left + ParamProps.Padding.Right ) }}" />
                                        <hmi:localDef name="PaddingWidth"           type="number"     hmi-bind:value="{{ HmiProps.Width - LocalProps.PaddingLeftRight }}" />
                                    </defs>
                                    <g id="TIFID_ColumnHeaderGroup" opacity="1">
                                        <rect id="ColumnHeaderRect"
                                              hmi-bind:width="{ HmiProps.Width }"
                                              hmi-bind:height="{ HmiProps.Height }"
                                              hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}"/>
                                        <hmi:include template="include.style.flat.content.svghmi" hmi-bind:for="{ HmiProps.Content }"
                                                      hmi-bind:x="{ ParamProps.Padding.Left }"
                                                      hmi-bind:y="{ ParamProps.Padding.Top }"
                                                      hmi-bind:width="{ LocalProps.PaddingWidth }"
                                                      hmi-bind:height="{{ HmiProps.Height - ParamProps.Padding.Bottom }}">
                                            <hmi:param name="Text"              type="string"       hmi-bind:value="{{ Converter.IsNumber(HmiProps.Text) ?
                                                                                                                        HmiProps.Text :
                                                                                                                        ( HmiProps.Text ?
                                                                                                                            HmiProps.Text :
                                                                                                                            HmiProps.Name ) }}" />
                                            <hmi:param name="Graphic"           type="HmiGraphic"   hmi-bind:value="{ HmiProps.Graphic }"       />
                                            <hmi:param name="Font"              type="HmiFontPart"  hmi-bind:value="{ HmiProps.Font }"          />
                                            <hmi:param name="TextColor"         type="HmiColor"     hmi-bind:value="{ HmiProps.ForeColor }"     />
                                            <hmi:param name="GraphicWidth"      type="number"       hmi-bind:value="{ HmiProps.GraphicWidth }"  />
                                            <hmi:param name="GraphicHeight"     type="number"       hmi-bind:value="{ HmiProps.GraphicHeight }" />
                                        </hmi:include>

                                    </g>
                                </svg>
                            </hmi:template>
                        </hmi:master-inline>
                    </hmi-feature:header>

                    <!--Row Headers-->
                    <hmi-feature:recordHeader >
                        <hmi:master-inline >
                            <hmi:param name="Padding"   type="HmiPaddingPart"   hmi-bind:value="{ HmiProps.ParameterView.CellPadding }" />
                            <hmi:template>
                                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                                      xmlns:hmi="http://svg.siemens.com/hmi/"
                                      xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                                      xmlns:hmi-data-bind="http://svg.siemens.com/hmi/data/bind/"
                                      height="10" width="10" >
                                    <hmi:self type="system:HmiHeaderCellSystemPart" displayName="RowHeader" name="rowheader" version="1.0.0" performanceClass="s">
                                        <hmi:data type="header-view"></hmi:data>
                                        <hmi:paramDef name="Padding"      type="HmiPaddingPart" />
                                    </hmi:self>

                                    <g id="TIFID_RowHeaderGroup" opacity="1">
                                        <rect id="RowHeaderRect"
                                              hmi-bind:width="{ HmiProps.Width}"
                                              hmi-bind:height="{ HmiProps.Height }"
                                              hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}"/>
                                        <hmi:include template="include.style.flat.text.svghmi"
                                                      hmi-bind:x="{ ParamProps.Padding.Left }"
                                                      hmi-bind:y="{ ParamProps.Padding.Top }"
                                                      hmi-bind:width="{{ HmiProps.Width - ( ParamProps.Padding.Right + ParamProps.Padding.Left ) }}"
                                                      hmi-bind:height="{{ HmiProps.Height - ParamProps.Padding.Bottom }}">
                                            <hmi:param name="Text"                      type="string"                   hmi-data-bind:value="{ Content.Index }"                         />
                                            <hmi:param name="Font"                      type="HmiFontPart"              hmi-bind:value="{ HmiProps.Font }"                              />
                                            <hmi:param name="TextColor"                 type="HmiColor"                 hmi-bind:value="{ HmiProps.ForeColor }"                         />
                                            <hmi:param name="HorizontalTextAlignment"   type="HmiHorizontalAlignment"   hmi-bind:value="{ HmiProps.Content.HorizontalTextAlignment }"   />
                                            <hmi:param name="VerticalTextAlignment"     type="HmiVerticalAlignment"     value="1"                                                       />
                                        </hmi:include>
                                    </g>
                                </svg>
                            </hmi:template>
                        </hmi:master-inline>
                    </hmi-feature:recordHeader>

                    <!--Data template-->
                    <hmi-feature:dataTemplates>
                            <hmi:master-include template="include.style.flat.heirarchicaldatacell.svghmi">
                                <hmi:param name="Padding"      type="HmiPaddingPart"   hmi-bind:value="{ HmiProps.ParameterView.CellPadding }" />
                                <hmi:param name="RowBackColor" type="HmiColor"         hmi-bind:value="{ HmiProps.ParameterView.BackColor }"     />
                                <hmi:param name="RowForeColor" type="HmiColor"         hmi-bind:value="{ HmiProps.ParameterView.ForeColor }"     />
                            </hmi:master-include>
                        </hmi-feature:dataTemplates>

                    <hmi-feature:rowBackground >
                        <hmi:master-include template="include.style.flat.rowbackground.svghmi">
                        </hmi:master-include>
                    </hmi-feature:rowBackground>

                    <hmi-feature:columnBackground >
                        <hmi:master-include template="include.style.flat.columnbackground.svghmi">
                        </hmi:master-include>
                    </hmi-feature:columnBackground>

                    <!--Grid lines-->
                    <hmi-feature:gridlines>
                        <hmi-feature:gridline
                          position-filter="header" expansion="header inner"
                          hmi-bind:stroke-width="{ HmiProps.ParameterView.GridLineWidth }"
                          hmi-bind:stroke="{ LocalProps.HeaderGridLineColor }"
                          orientation="row column">
                        </hmi-feature:gridline>
                        <hmi-feature:gridline
                          position-filter="inner" expansion="header"
                          hmi-bind:stroke-width="{ HmiProps.ParameterView.GridLineWidth }"
                          hmi-bind:stroke="{ LocalProps.HeaderGridLineColor }"
                          orientation="row column">
                        </hmi-feature:gridline>
                        <hmi-feature:gridline
                          position-filter="inner" expansion="inner"
                          hmi-bind:stroke-width="{ HmiProps.ParameterView.GridLineWidth }"
                          hmi-bind:stroke="{{ HmiProps.ParameterView.GridLineVisibility == 0 ? 'rgba(0,0,0,0)' : Converter.RGBA(  HmiProps.ParameterView.GridLineColor ) }}"
                          hmi-bind:orientation="{{ HmiProps.ParameterView.GridLineVisibility == 3 ? 'row column' : ( HmiProps.ParameterView.GridLineVisibility == 2 ? 'column':'row') }}">
                        </hmi-feature:gridline>
                    </hmi-feature:gridlines>

                    <hmi-feature:selection>
                        <hmi:master-inline >
                            <hmi:template>
                                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                                      xmlns:hmi="http://svg.siemens.com/hmi/"
                                      xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                                      height="10" width="10" >
                                    <hmi:self type="system:HmiSelectionSystemPart" displayName="SelectionBorder" name="selectionborder" version="1.0.0" performanceClass="s">
                                    </hmi:self>
                                    <defs>
                                      <hmi:localDef name="BorderWidthPadding"       type="number"     hmi-bind:value="{{ HmiProps.BorderWidth / 2 }}" />
                                    </defs>
                                    <g id="TIFID_SelectionRect" opacity="1">
                                        <rect id="ItemBGRect3"
                                              hmi-bind:x="{ LocalProps.BorderWidthPadding }"
                                              hmi-bind:y="{ LocalProps.BorderWidthPadding }"
                                              hmi-bind:width="{ HmiProps.Width}"
                                              hmi-bind:height="{ HmiProps.Height }"
                                              fill="none"
                                              hmi-bind:stroke-width="{ HmiProps.BorderWidth }"
                                              hmi-bind:stroke="{{Converter.RGBA(HmiProps.BorderColor)}}"/>
                                    </g>
                                </svg>
                            </hmi:template>
                        </hmi:master-inline>
                    </hmi-feature:selection>
                  <hmi:master-inline>
                    <hmi:param name="BackColor"  type="HmiColor" hmi-bind:value ="{ HmiProps.BackColor }"  />
                    <hmi:param name="FocusColor" type="HmiColor" hmi-bind:value ="{ HmiProps.FocusColor }" />

                    <hmi:template>
                      <svg xmlns="http://www.w3.org/2000/svg"
                       xmlns:hmi="http://svg.siemens.com/hmi/"
                       xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                       xmlns:hmi-data-bind="http://svg.siemens.com/hmi/data/bind/"
                       overflow="visible">
                        <hmi:self type="custom" name="title" displayName="title" >
                          <hmi:data type="grid-combo"></hmi:data>
                        </hmi:self>
                        <defs>
                          <hmi:localDef name="XPos"                             type="number"                   hmi-data-bind:value="{ Content.X }"        />
                          <hmi:localDef name="YPos"                             type="number"                   hmi-data-bind:value="{ Content.Y }"        />
                          <hmi:localDef name="RSType"                           type="string"                   value="GridComboRow"                       />
                          <hmi:localDef name="RowId"                            type="number"                   hmi-data-bind:value="{ Content.RowId }"    />
                          <hmi:localDef name="Width"                            type="number"                   hmi-data-bind:value="{ Content.Width }"    />
                          <hmi:localDef name="Height"                           type="number"                   hmi-data-bind:value="{ Content.Height }"   />
                          <hmi:localDef name="Font"                             type="HmiFontPart"              hmi-data-bind:value="{ Content.Font }"     />
                          <hmi:localDef name="ComboFocusColor"                  type="HmiColor"                 value="4286434550"                         />
                          <hmi:localDef name="ComboBorderColor"                 type="HmiColor"                 value="4288059030"                         />
                          <hmi:localDef name="ComboBackColor"                   type="HmiColor"                 value="4294506745"                         />
                          <hmi:localDef name="ComboForeColor"                   type="HmiColor"                 value="4278190080"                         />
                          <hmi:localDef name="ComboSelectionForeColor"          type="HmiColor"                 value="4278190080"                         />
                          <hmi:localDef name="ComboSelectionBackColor"          type="HmiColor"                 value="4286434550"                         />
                          <hmi:localDef name="ComboAlternateBackColor"          type="HmiColor"                 value="4294506745"                         />
                          <hmi:localDef name="ComboCollapsedBackColor"          type="HmiColor"                 value="4294506745"                         />
                          <hmi:localDef name="ComboCollapsedForeColor"          type="HmiColor"                 value="4278190080"                         />
                          <hmi:localDef name="GridHeight"                  type="number"                   hmi-data-bind:value="{ Content.GridHeight }"    />
                          <hmi:localDef name="MyLocalContent"                   type="HmiContentPart">
                            <hmi-types:content SplitRatio="0.2" ContentMode="1" TextPosition="1" Spacing="1" TextTrimming="1" />
                          </hmi:localDef>
                          <hmi:localDef name="MyLocalPadding"   type="HmiPaddingPart">
                            <hmi-types:padding />
                          </hmi:localDef>
                        </defs>

                        <hmi:include template="include.style.extended.combobox.svghmi"
                                   hmi-bind:x="{ LocalProps.XPos }"
                                   hmi-bind:y="{ LocalProps.YPos }"
                                   hmi-bind:width="{ LocalProps.Width }"
                                   hmi-bind:height="{ LocalProps.Height }">

                          <hmi:param name="MaxListBoxViewCount"    type="number"                   hmi-bind:value="{{ abs((LocalProps.GridHeight / LocalProps.Height)-( LocalProps.RowId + 2)) }}"              />
                          <hmi:param name="ResourceList"           type="string"                   hmi-bind:value="{{ LocalProps.RSType + LocalProps.RowId }}"   />
                          <hmi:param name="Content"                type="HmiContentPart"           hmi-bind:value="{ LocalProps.MyLocalContent }"                />
                          <hmi:param name="Font"                   type="HmiFontPart"              hmi-bind:value="{ LocalProps.Font }"                          />
                          <hmi:param name="Padding"                type="HmiPaddingPart"           hmi-bind:value="{ LocalProps.MyLocalPadding }"                />
                          <hmi:param name="Width"                  type="number"                   hmi-bind:value="{ LocalProps.Width }"                         />
                          <hmi:param name="Height"                 type="number"                   hmi-bind:value="{ LocalProps.Height }"                        />
                          <hmi:param name="ShowFocus"              type="boolean"                  value="false"                                                 />
                          <hmi:param name="BorderWidth"            type="number"                   value="2"                                                     />
                          <hmi:param name="FocusColor"             type="HmiColor"                 hmi-bind:value="{ HmiProps.FocusColor }"                      />
                          <hmi:param name="BorderColor"            type="HmiColor"                 hmi-bind:value="{ LocalProps.ComboBorderColor}"               />
                          <hmi:param name="BackColor"              type="HmiColor"                 hmi-bind:value="{ LocalProps.ComboBackColor }"                />
                          <hmi:param name="ForeColor"              type="HmiColor"                 hmi-bind:value="{ LocalProps.ComboForeColor }"                />
                          <hmi:param name="SelectionForeColor"     type="HmiColor"                 hmi-bind:value="{ LocalProps.ComboSelectionForeColor }"       />
                          <hmi:param name="SelectionBackColor"     type="HmiColor"                 hmi-bind:value="{ LocalProps.ComboSelectionBackColor }"       />
                          <hmi:param name="AlternateBackColor"     type="HmiColor"                 hmi-bind:value="{ LocalProps.ComboAlternateBackColor }"       />
                          <hmi:param name="CollapsedBackColor"     type="HmiColor"                 hmi-bind:value="{ LocalProps.ComboCollapsedBackColor }"       />
                          <hmi:param name="CollapsedForeColor"     type="HmiColor"                 hmi-bind:value="{ LocalProps.ComboCollapsedForeColor }"       />
                          <hmi:param name="GraphicWidth"           type="number"                   value="300"                                                   />
                          <hmi:param name="GraphicHeight"          type="number"                   value="30"                                                    />
                          <hmi:param name="Enabled"                type="boolean"                  value="false"                                                 />
                          <hmi:param name="Operability"            type="HmiOperability"           value="0"                                                     />
                          <hmi:param name="IOFieldType"            type="HmiIOFieldType"           value="2"                                                     />
                          <hmi:param name="ResourceListDelay"      type="boolean"                  value="true"                                                  />
                          <hmi:param name="PropNameText"           type="string"                   value="Text"                                                  />
                          <hmi:param name="PropNameGraphic"        type="string"                   value="Graphic"                                               />
                          <hmi:param name="PropNameGraphicWidth"   type="string"                   value="GraphicWidth"                                          />
                          <hmi:param name="PropNameGraphicHeight"  type="string"                   value="GraphicHeight"                                         />
                          <hmi:param name="CanOpenComboBox"        type="boolean"                  value="true"                                                  />
                          <hmi:param name="SelectedIndex"          type="number"                   value="-1"                                                    />
                        </hmi:include>
                      </svg>
                    </hmi:template>
                  </hmi:master-inline>
                </hmi-element:table>
                <!--Grid focus rect-->
                <rect hmi-bind:width="{{ Layout.ActualWidth - LocalProps.BorderWidth }}"
                      hmi-bind:height="{{ Layout.ActualHeight - LocalProps.BorderWidth }}"
                      fill="none"
                      hmi-bind:stroke-width="{{ LocalProps.ShowGridFocus ? LocalProps.FocusRectStrokeWidth : 0 }}"
                      hmi-bind:stroke="{{ LocalProps.ShowGridFocus ? ParamProps.FocusColor : 'black' }}"/>
            </g>
        </g>
        <!--Paco combo part-->
        <g hmi-flex:grow="0"
           hmi-flex:width="{ Layout.ActualWidth }"
           hmi-bind:height="{ LocalProps.MainControlHeight }"
           hmi-flex:justifyContent="end"
           hmi-flex:direction="{{ lt( HmiProps.Width , LocalProps.MainControlWidth ) ?  ( HmiProps.ParameterSetTypeFixed ? LocalProps.DirectionRow :  LocalProps.DirectionColumnReverse ) : ( HmiProps.ParameterSetTypeFixed ? LocalProps.DirectionRow : LocalProps.DirectionRowReverse ) }}"
           id="TIFID_pacoMainControl">
            <!--Parameter set combo row-->
            <g hmi-flex:width="{{ HmiProps.ParameterSetTypeFixed ? HmiProps.Width : LocalProps.SingleCombolWidth }}"
               hmi-flex:height="{ LocalProps.MainControlHeight }">
                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                    xmlns:hmi="http://svg.siemens.com/hmi/"
                    xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                    xmlns:hmi-data-bind="http://svg.siemens.com/hmi/data/bind/"
                    hmi-bind:height="{{ and( lt( LocalProps.ControlWidth, LocalProps.MainControlWidth - 4 ), LocalProps.IsParameterSetTypeFixed ) ? ( lt(LocalProps.ControlHeight, LocalProps.ComboHeightTillGrid ) ? LocalProps.ControlHeight / 2  : HmiProps.Height ) : LocalProps.IsControlHeightLess ? LocalProps.ControlHeight : HmiProps.Height }}" >
                    <!--Parameter set combo label-->
                    <text  hmi-bind:x="{ LocalProps.ComboX }"
                           hmi-bind:y="{ LocalProps.NameLblY }"
                           clip-path="url(#PsNameLblCliping)"
                           hmi-bind:font-size="{ HmiProps.Font.Size }"
                           hmi-bind:font-style="{ LocalProps.FontStyle }"
                           hmi-bind:text-decoration="{ LocalProps.TextDecoration }"
                           hmi-bind:font-weight="{ HmiProps.Font.Weight }"
                           hmi-bind:font-family="{ HmiProps.Font.Name }"
                           hmi-bind:fill="{ LocalProps.ForeColor }">
                        <hmi:text hmi-bind:value="{{ Converter.GetTextByID( 'TBID_PacoCtrl_defaultTextParamSet' ) }}"/>
                    </text>
                    <!--Parameter set number label-->
                    <text  hmi-bind:x="{ LocalProps.NumberLblX }"
                           hmi-bind:y="{ LocalProps.NameLblY }"
                           clip-path="url(#PsNumberLblCliping)"
                           hmi-bind:font-size="{ HmiProps.Font.Size }"
                           hmi-bind:font-style="{ LocalProps.FontStyle }"
                           hmi-bind:text-decoration="{ LocalProps.TextDecoration }"
                           hmi-bind:font-weight="{ HmiProps.Font.Weight }"
                           hmi-bind:font-family="{ HmiProps.Font.Name }"
                           hmi-bind:fill="{ LocalProps.ForeColor }">
                        <hmi:text hmi-bind:value="{ LocalProps.DefaultParamSetTypeUnitText }"/>
                    </text>
                    <!--Parameter set Combo part-->
                    <g  hmi-bind:opacity="{{ HmiProps.HasPendingChanges ? 0.5 : 1 }}"
                        id="TIFID_pacoPsCombo">
                        <!--Parameter set number-->
                        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                             xmlns:hmi="http://svg.siemens.com/hmi/"
                             xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                             xmlns:hmi-data-bind="http://svg.siemens.com/hmi/data/bind/"
                             hmi-bind:x="{ LocalProps.NumberFieldTextXPos }"
                             hmi-bind:y="{ LocalProps.NumberFieldTextYPos }"
                             hmi-bind:width="{ LocalProps.NumberFieldWidth }"
                             hmi-bind:height="{ LocalProps.NumberFieldHeight }">
                            <!--Mouse events to show hide tool tip for number field-->
                            <defs>
                              <hmi:localDef name="CurrentParameterSetID"   type="string"   hmi-bind:value="{{  Converter.FormatPattern(abs(HmiProps.CurrentParameterSetID), '{I}')  }}"/>
                              <hmi:action id="onMouseEnterPs">
                                <hmi:sendCommand name="SHOW_TOOLTIP" type="string" hmi-bind:value="{{ HmiProps.CurrentParameterSetID ? LocalProps.CurrentParameterSetID : '' }}" hmi-bind:condition="{{ gt( (HmiProps.CurrentParameterSetID ? LocalProps.CurrentParameterSetID : '') , LocalProps.NumberToolTipDispLimit ) }}"/>
                              </hmi:action>
                              <hmi:action id="onMouseLeavePs">
                                <hmi:sendCommand name="HIDE_TOOLTIP" />
                              </hmi:action>
                            </defs>
                            <rect x="0" y="0"
                                hmi-bind:width="{ LocalProps.NumberFieldWidth }"
                                hmi-bind:height="{ LocalProps.NumberFieldHeight }"
                                hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}"
                                hmi-bind:stroke="{ LocalProps.Stroke }">
                            </rect>
                            <text hmi-event:mouseEnter="url(#onMouseEnterPs)"
                                  hmi-event:mouseLeave="url(#onMouseLeavePs)"
                                  hmi:if="{{ not( SysProps.IsDesignMode ) }}"
                                  dominant-baseline="middle" text-anchor="middle"
                                  hmi-bind:x="{ LocalProps.NumberFieldMidPosition }"
                                  hmi-bind:y="{ LocalProps.NumberFieldMidPosition }"
                                  hmi-bind:font-size="{ HmiProps.ParameterView.Font.Size }"
                                  hmi-bind:font-style="{ LocalProps.FontStyle }"
                                  hmi-bind:text-decoration="{ LocalProps.TextDecoration }"
                                  hmi-bind:font-weight="{ HmiProps.Font.Weight }"
                                  hmi-bind:font-family="{ HmiProps.Font.Name }"
                                  hmi-bind:fill="{ LocalProps.ForeColor }" >
                                <hmi:text hmi-bind:value="{{  Converter.TextEllipsis( HmiProps.CurrentParameterSetID ? LocalProps.CurrentParameterSetID : '', LocalProps.NumberToDisplay ) }}"/>
                            </text>
                        </svg>
                        <!--Parameter set Combo-->
                        <hmi:include template="include.style.flat.combobox.svghmi"
                                     hmi-bind:x="{ LocalProps.ComboX }"
                                     hmi-bind:y="{ LocalProps.ComboY }"
                                     hmi-bind:width="{ LocalProps.ComboWidth }"
                                     hmi-bind:height="{ LocalProps.ComboHeight }" >
                            <hmi:param name="MaxListBoxViewCount"    type="number"                   hmi-bind:value="{{ and( lt( LocalProps.ControlWidth, LocalProps.MainControlWidth - 4 ), LocalProps.IsParameterSetTypeFixed ) ?
                                                                                                                        abs( LocalProps.ListHeightTillWindow - LocalProps.ComboHeight - LocalProps.VerticalPaddingBtwnCombo ) / LocalProps.ListItemHeight :
                                                                                                                        LocalProps.ListHeightTillWindow / LocalProps.ListItemHeight }}" />
                            <hmi:param name="ResourceList"           type="string"                   hmi-bind:value="{ LocalProps.PsComboType }"                    />
                            <hmi:param name="Content"                type="HmiContentPart"           hmi-bind:value="{ LocalProps.MyLocalContent }"                 />
                            <hmi:param name="Font"                   type="HmiFontPart"              hmi-bind:value="{ HmiProps.ParameterView.Font }"               />
                            <hmi:param name="Padding"                type="HmiPaddingPart"           hmi-bind:value="{ LocalProps.MyLocalPadding }"                 />
                            <hmi:param name="Width"                  type="number"                   hmi-bind:value="{ LocalProps.ComboWidth }"                     />
                            <hmi:param name="Height"                 type="number"                   hmi-bind:value="{ LocalProps.ComboHeight }"                    />
                            <hmi:param name="ShowFocus"              type="boolean"                  value="false"                                                  />
                            <hmi:param name="BorderWidth"            type="number"                   value="1"                                                      />
                            <hmi:param name="FocusColor"             type="HmiColor"                 hmi-bind:value="{ HmiProps.FocusColor }"                       />
                            <hmi:param name="BorderColor"            type="HmiColor"                 value="4288059030"                                             />
                            <hmi:param name="BackColor"              type="HmiColor"                 hmi-bind:value="{ HmiProps.BackColor }"                        />
                            <hmi:param name="ForeColor"              type="HmiColor"                 hmi-bind:value="{ HmiProps.ForeColor }"                        />
                            <hmi:param name="SelectionForeColor"     type="HmiColor"                 hmi-bind:value="{ HmiProps.SelectionForeColor }"               />
                            <hmi:param name="SelectionBackColor"     type="HmiColor"                 hmi-bind:value="{ HmiProps.SelectionBackColor }"               />
                            <hmi:param name="AlternateBackColor"     type="HmiColor"                 hmi-bind:value="{ HmiProps.BackColor  }"                       />
                            <hmi:param name="CollapsedBackColor"     type="HmiColor"                 hmi-bind:value="{ HmiProps.BackColor }"               />
                            <hmi:param name="CollapsedForeColor"     type="HmiColor"                 hmi-bind:value="{ HmiProps.ForeColor }"               />
                            <hmi:param name="GraphicWidth"           type="number"                   value="300"                                                    />
                            <hmi:param name="GraphicHeight"          type="number"                   value="30"                                                     />
                            <hmi:param name="Enabled"                type="boolean"                  hmi-bind:value="{ HmiProps.Enabled }"                          />
                          <hmi:param name="Operability"            type="HmiOperability"           hmi-bind:value="{{ or( HmiProps.HasPendingChanges, HmiProps.Operability ) ? 1 : 0 }}"      />
                          <hmi:param name="IOFieldType"            type="HmiIOFieldType"           value="2"                                                      />
                            <hmi:param name="ResourceListDelay"      type="boolean"                  hmi-bind:value="{ LocalProps.ResourceListDelay }"              />
                            <hmi:param name="PropNameText"           type="string"                   hmi-bind:value="{ LocalProps.PropNameText }"                   />
                            <hmi:param name="PropNameGraphic"        type="string"                   hmi-bind:value="{ LocalProps.PropNameGraphic }"                />
                            <hmi:param name="PropNameGraphicWidth"   type="string"                   hmi-bind:value="{ LocalProps.PropNameGraphicWidth }"           />
                            <hmi:param name="PropNameGraphicHeight"  type="string"                   hmi-bind:value="{ LocalProps.PropNameGraphicHeight }"          />
                            <hmi:param name="CanOpenComboBox"        type="boolean"                  value="true"                                                   />
                            <hmi:param name="SelectedIndex"          type="number"                   value="-1"                                                     />
                        </hmi:include>
                    </g>
                </svg>
            </g>
            <!--Parameter set type combo part-->
            <g hmi-flex:width="{ LocalProps.SingleCombolWidth }"
               hmi:if="{ LocalProps.IsParameterSetTypeFixed }"
               hmi-flex:height="{ LocalProps.MainControlHeightPadding }">
                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                     xmlns:hmi="http://svg.siemens.com/hmi/"
                     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                     xmlns:hmi-data-bind="http://svg.siemens.com/hmi/data/bind/"
                     hmi-bind:height="{{ LocalProps.IsControlHeightLess ? LocalProps.ControlHeight : HmiProps.Height }}" >
                    <!--Parameter set type combo label-->
                    <text  hmi-bind:x="{ LocalProps.ComboX }"
                           hmi-bind:y="{ LocalProps.NameLblY }"
                           clip-path="url(#PstNameLblCliping)"
                           hmi-bind:font-size="{ HmiProps.Font.Size }"
                           hmi-bind:font-style="{ LocalProps.FontStyle }"
                           hmi-bind:text-decoration="{ LocalProps.TextDecoration }"
                           hmi-bind:font-weight="{ HmiProps.Font.Weight }"
                           hmi-bind:font-family="{ HmiProps.Font.Name }"
                           hmi-bind:fill="{ LocalProps.ForeColor }">
                        <hmi:text hmi-bind:value="{{ Converter.GetTextByID( 'TBID_PacoCtrl_defaultTextParamSetType' ) }}"/>
                    </text>
                    <!--Parameter set type number label-->
                    <text  hmi-bind:x="{ LocalProps.NumberLblX }"
                           hmi-bind:y="{ LocalProps.NameLblY }"
                           hmi:if="{{ or( not( SysProps.IsDesignMode ),HmiProps.ParameterSetTypeFixed ) }}"
                           clip-path="url(#PstNumberLblCliping)"
                           hmi-bind:font-size="{ HmiProps.Font.Size }"
                           hmi-bind:font-style="{ LocalProps.FontStyle }"
                           hmi-bind:text-decoration="{ LocalProps.TextDecoration }"
                           hmi-bind:font-weight="{ HmiProps.Font.Weight }"
                           hmi-bind:font-family="{ HmiProps.Font.Name }"
                           hmi-bind:fill="{ LocalProps.ForeColor }">
                        <hmi:text hmi-bind:value="{ LocalProps.DefaultParamSetTypeUnitText }"/>
                    </text>
                    <!--Parameter set type Combo part-->
                    <g  id="TIFID_pacoPstCombo">
                        <!--Parameter set type number-->
                        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                             xmlns:hmi="http://svg.siemens.com/hmi/"
                             xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                             xmlns:hmi-data-bind="http://svg.siemens.com/hmi/data/bind/"
                             hmi-bind:x="{ LocalProps.NumberFieldTextXPos }"
                             hmi-bind:y="{ LocalProps.NumberFieldTextYPos }"
                             hmi-bind:width="{ LocalProps.NumberFieldWidth }"
                             hmi-bind:height="{ LocalProps.NumberFieldHeight }">
                            <!--Mouse events to show hide tool tip for number field-->
                            <defs>
                              <hmi:localDef name="CurrentParameterSetTypeID"   type="string"   hmi-bind:value="{{  Converter.FormatPattern(abs(HmiProps.CurrentParameterSetTypeID), '{I}')  }}"/>
                              <hmi:action id="onMouseEnterPst">
                                <hmi:sendCommand name="SHOW_TOOLTIP" type="string" hmi-bind:value="{{  HmiProps.CurrentParameterSetTypeID ? LocalProps.CurrentParameterSetTypeID : '' }}" hmi-bind:condition="{{ gt( ( HmiProps.CurrentParameterSetTypeID ? LocalProps.CurrentParameterSetTypeID : '') , LocalProps.NumberToolTipDispLimit ) }}"/>
                              </hmi:action>
                              <hmi:action id="onMouseLeavePst">
                                <hmi:sendCommand name="HIDE_TOOLTIP" />
                              </hmi:action>
                            </defs>
                            <rect hmi-bind:width="{ LocalProps.NumberFieldWidth }"
                                  hmi-bind:height="{ LocalProps.NumberFieldHeight }"
                                  hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor) }}"
                                  hmi-bind:stroke="{ LocalProps.Stroke }">
                            </rect>
                            <text hmi-event:mouseEnter="url(#onMouseEnterPst)"
                                  hmi-event:mouseLeave="url(#onMouseLeavePst)"
                                  dominant-baseline="middle" text-anchor="middle"
                                  hmi-bind:x="{ LocalProps.NumberFieldMidPosition }"
                                  hmi-bind:y="{ LocalProps.NumberFieldMidPosition }"
                                  hmi-bind:font-size="{ HmiProps.ParameterView.Font.Size }"
                                  hmi-bind:font-style="{ LocalProps.FontStyle }"
                                  hmi-bind:text-decoration="{ LocalProps.TextDecoration }"
                                  hmi-bind:font-weight="{ HmiProps.Font.Weight }"
                                  hmi-bind:font-family="{ HmiProps.Font.Name }"
                                  hmi-bind:fill="{ LocalProps.ForeColor }"  >
                                <hmi:text hmi-bind:value="{{ Converter.TextEllipsis( HmiProps.CurrentParameterSetTypeID ? LocalProps.CurrentParameterSetTypeID : '', LocalProps.NumberToDisplay ) }}"/>
                            </text>
                        </svg>
                        <!--Parameter set type Combo-->
                        <hmi:include template="include.style.flat.combobox.svghmi"
                                     hmi-bind:x="{ LocalProps.ComboX }"
                                     hmi-bind:y="{ LocalProps.ComboY }"
                                     hmi-bind:width="{ LocalProps.ComboWidth }"
                                     hmi-bind:height="{ LocalProps.ComboHeight }" >

                            <hmi:param name="MaxListBoxViewCount"    type="number"                   hmi-bind:value="{{ LocalProps.ListHeightTillWindow / LocalProps.ListItemHeight }}" />
                            <hmi:param name="ResourceList"           type="string"                   hmi-bind:value="{ LocalProps.PstComboType }"                                       />
                            <hmi:param name="Content"                type="HmiContentPart"           hmi-bind:value="{ LocalProps.MyLocalContent }"                                     />
                            <hmi:param name="Font"                   type="HmiFontPart"              hmi-bind:value="{ HmiProps.ParameterView.Font }"                                   />
                            <hmi:param name="Padding"                type="HmiPaddingPart"           hmi-bind:value="{ LocalProps.MyLocalPadding }"                                     />
                            <hmi:param name="Width"                  type="number"                   hmi-bind:value="{ LocalProps.ComboWidth }"                                         />
                            <hmi:param name="Height"                 type="number"                   hmi-bind:value="{ LocalProps.ComboHeight }"                                        />
                            <hmi:param name="ShowFocus"              type="boolean"                  value="false"                                                                      />
                            <hmi:param name="BorderWidth"            type="number"                   value="1"                                                                          />
                            <hmi:param name="FocusColor"             type="HmiColor"                 hmi-bind:value="{ HmiProps.FocusColor }"                                           />
                            <hmi:param name="BorderColor"            type="HmiColor"                 value="4288059030"                                                                 />
                            <hmi:param name="BackColor"              type="HmiColor"                 hmi-bind:value="{ HmiProps.BackColor }"                                            />
                            <hmi:param name="ForeColor"              type="HmiColor"                 hmi-bind:value="{ HmiProps.ForeColor }"                                            />
                            <hmi:param name="AlternateBackColor"     type="HmiColor"                 hmi-bind:value="{ HmiProps.BackColor }"                                            />
                            <hmi:param name="SelectionForeColor"     type="HmiColor"                 hmi-bind:value="{ HmiProps.SelectionForeColor }"                                   />
                            <hmi:param name="SelectionBackColor"     type="HmiColor"                 hmi-bind:value="{ HmiProps.SelectionBackColor }"                                   />
                            <hmi:param name="CollapsedBackColor"     type="HmiColor"                 hmi-bind:value="{ HmiProps.BackColor }"                                            />
                            <hmi:param name="CollapsedForeColor"     type="HmiColor"                 hmi-bind:value="{ HmiProps.ForeColor }"                                            />
                            <hmi:param name="GraphicWidth"           type="number"                   value="300"                                                                        />
                            <hmi:param name="GraphicHeight"          type="number"                   value="30"                                                                         />
                            <hmi:param name="Enabled"                type="boolean"                  hmi-bind:value="{ HmiProps.Enabled }"                                              />
                            <hmi:param name="Operability"            type="HmiOperability"           hmi-bind:value="{{ or( HmiProps.Operability, or( HmiProps.ParameterSetTypeFixed , HmiProps.HasPendingChanges )) ? 1 : 0 }}" />
                            <hmi:param name="IOFieldType"            type="HmiIOFieldType"           value="2"                                                                          />
                            <hmi:param name="ResourceListDelay"      type="boolean"                  hmi-bind:value="{ LocalProps.ResourceListDelay }"                                  />
                            <hmi:param name="PropNameText"           type="string"                   hmi-bind:value="{ LocalProps.PropNameText }"                                       />
                            <hmi:param name="PropNameGraphic"        type="string"                   hmi-bind:value="{ LocalProps.PropNameGraphic }"                                    />
                            <hmi:param name="PropNameGraphicWidth"   type="string"                   hmi-bind:value="{ LocalProps.PropNameGraphicWidth }"                               />
                            <hmi:param name="PropNameGraphicHeight"  type="string"                   hmi-bind:value="{ LocalProps.PropNameGraphicHeight }"                              />
                            <hmi:param name="CanOpenComboBox"        type="boolean"                  value="true"                                                                       />
                            <hmi:param name="SelectedIndex"          type="number"                   value="-1"                                                                         />
                        </hmi:include>
                    </g>
                </svg>
            </g>
        </g>
    </g>
</svg><!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     preserveAspectRatio="none">

    <hmi:self type="item:HmiClock" displayName="Flat Digital Clock" name="style.flat.digitalclock" version="2.8" performanceClass="L" >
        <hmi:focus focusVisual="local" />
    </hmi:self>

    <defs>
        <hmi:localDef name="ShowFocus"              type="boolean"  hmi-bind:value="{{ and( HmiProps.ShowFocusVisual, SysProps.HasFocus ) }}" />
        <hmi:localDef name="ItemOperable"           type="boolean"  hmi-bind:value="{{ HmiProps.Operability == HmiOperability.Operable }}" />

        <hmi:localDef name="DialTickColor"          type="string"   hmi-bind:value="{{ Converter.RGBA( HmiProps.DialTickColor ) }}" />
        <hmi:localDef name="DialLabelColor"         type="string"   hmi-bind:value="{{ Converter.RGBA( HmiProps.DialLabelColor ) }}" />
        <hmi:localDef name="DialBackColor"          type="string"   hmi-bind:value="{{ Converter.RGBA( HmiProps.DialBackColor ) }}" />

        <hmi:localDef name="Time"                   type="number"   hmi-bind:value="{{ ( HmiProps.ComputedHours * 3600 + HmiProps.ComputedMinutes * 60 + HmiProps.ComputedSeconds ) * 1000 }}" />
        <hmi:localDef name="TimeFormatString"       type="string"   hmi-bind:value="{{ HmiProps.ShowHours ? ( HmiProps.ShowMinutes ? ( HmiProps.ShowSeconds ? '{T,@HH:mm:ss}' : '{T,@HH:mm}' ) : ( HmiProps.ShowSeconds ? '{T,@HH::ss}' : '{T,@HH}' ) ) : ( HmiProps.ShowMinutes ? ( HmiProps.ShowSeconds ? '{T,@mm:ss}' : '{T,@mm}' ) : ( HmiProps.ShowSeconds ? '{T,@ss}' : '{T,@–}' ) ) }}" />
    </defs>

    <g hmi-bind:opacity="{{ LocalProps.ItemOperable ? 1.0 : 0.5 }}">
        <!-- background rectangle -->
        <g id="ElementsGroup" hmi:if="{{ or( (Converter.Alpha( HmiProps.BackColor ) != 0), (Converter.Alpha( HmiProps.BorderColor ) != 0) ) }}" >

            <rect id="ItemBGRect"
                  hmi-bind:x="{{ HmiProps.BorderWidth / 2 }}"
                  hmi-bind:y="{{ HmiProps.BorderWidth / 2 }}"
                  hmi-bind:width="{{ HmiProps.Width - HmiProps.BorderWidth }}"
                  hmi-bind:height="{{ HmiProps.Height - HmiProps.BorderWidth }}"
                  hmi-bind:fill="{{ Converter.RGBA(HmiProps.BackColor) }}"
                  hmi-bind:stroke="{{ Converter.RGBA( HmiProps.BorderColor ) }}"
                  hmi-bind:stroke-width="{ HmiProps.BorderWidth }" />

        </g>

        <g id="DigitalFormat">

            <rect id="DialBackgroundDigital" hmi-bind:fill="{ LocalProps.DialBackColor }"
                    hmi-bind:x="{{ HmiProps.BorderWidth / 2 }}"
                    hmi-bind:y="{{ HmiProps.BorderWidth / 2 }}"
                    hmi-bind:width="{{ HmiProps.Width - HmiProps.BorderWidth }}"
                    hmi-bind:height="{{ HmiProps.Height - HmiProps.BorderWidth }}"
                    hmi-bind:stroke="{ LocalProps.DialTickColor }"
            />
            <text id="ValueText" text-anchor="middle"
                  hmi-bind:x="{{ HmiProps.Width  / 2 }}"
                  hmi-bind:y="{{ (HmiProps.Height + (HmiProps.DialLabelFont.Size / 2)) / 2 }}"
                  hmi-bind:fill="{ LocalProps.DialLabelColor }"
                  hmi-bind:font-size="{ HmiProps.DialLabelFont.Size }"
                  hmi-bind:font-style="{{ HmiProps.DialLabelFont.Italic ? 'italic' : 'normal' }}"
                  hmi-bind:font-weight="{ HmiProps.DialLabelFont.Weight }"
                  hmi-bind:font-family="{ HmiProps.DialLabelFont.Name }"
                  hmi-bind:text-decoration="{{ Converter.TextDecoration( HmiProps.DialLabelFont ) }}">
                <hmi:text hmi-bind:value="{{ Converter.FormatPattern( LocalProps.Time, LocalProps.TimeFormatString ) }}" />
            </text>
        </g>

        <rect id="ItemRect_Used"
        hmi:if="{ LocalProps.ShowFocus }"
              fill-opacity="0"
              hmi-bind:stroke="{{ Converter.RGBA( HmiProps.FocusColor ) }}"
              x="1"
              y="1"
              hmi-bind:width="{{ HmiProps.Width - 2 }}"
              hmi-bind:height="{{ HmiProps.Height - 2 }}"
              stroke-width="2" />
    </g>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2016. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:hmi="http://svg.siemens.com/hmi/"
    xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
    xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
    xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
    xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
    xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"

    preserveAspectRatio="none"
    overflow="visible" >

    <hmi:self type="item:HmiExampleControl" displayName="Flat ExampleControl" name="style.flat.examplecontrol" version="2.8" performanceClass="L" >
    <hmi:focus focusVisual="local" />
  </hmi:self>

    <defs>
        <!-- System definitions of this template -->
        <hmi:localDef name="ScrollBarPart"                type="HmiScrollBarSystemPart"     hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiScrollBarSystemPart' ) }}" />
        
        <hmi:localDef name="WindowFramePart"              type="HmiWindowFrameSystemPart"   hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiWindowFrameSystemPart' ) }}" />

        <hmi:localDef name="MinimumWidth"                 type="number"     value="100" />
        <hmi:localDef name="MinimumHeight"                type="number"     value="50"  />

        <hmi:localDef name="ShowFocus"                    type="boolean"    hmi-bind:value="{{ and( HmiProps.ShowFocusVisual, SysProps.HasFocus ) }}" />
        <hmi:localDef name="ShowCaption"                  type="boolean"    hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowCaption ) }}" />
        <hmi:localDef name="CaptionHeight"                type="number"     hmi-bind:value="{{ LocalProps.ShowCaption ? LocalProps.WindowFramePart.CaptionHeight : 0 }}" />
        <hmi:localDef name="CaptionColor"                 type="number"     hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : HmiProps.CaptionColor }}" />
        <hmi:localDef name="WindowBorderColor"            type="number"     hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : LocalProps.WindowFramePart.BorderColor }}" />
        <hmi:localDef name="WindowBorderWidth"            type="number"     hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowBorder ) ? LocalProps.WindowFramePart.BorderWidth : 0 }}" />
        <hmi:localDef name="WindowInnerWidth"             type="number"     hmi-bind:value="{{ HmiProps.Width - 2 * LocalProps.WindowBorderWidth }}" />

        <!-- Properties of the Hmi Window -->
        <hmi:localDef name="TestToolBar"                  type="number"     hmi-bind:value="{ HmiProps.ToolBar.Height }" />
        <hmi:localDef name="TestToolBarHeight"            type="number"     hmi-bind:value="{{ ( LocalProps.TestToolBar == null ) ? 0 : HmiProps.ToolBar.Height + LocalProps.ScrollBarPart.Thickness }}" />
        <hmi:localDef name="TestToolBarVisibility"        type="boolean"    hmi-bind:value="{{ ( LocalProps.TestToolBar == null ) ? false : HmiProps.ToolBar.Visible }}" />
        <hmi:localDef name="TestToolBarElements"          type="boolean"    hmi-bind:value="{{ ( Converter.CountItems( HmiProps.ToolBar.Elements ) ) ? true : false }}" />

        <!-- Definition of StatusBar properties -->
        <hmi:localDef name="TestStatusBar"                type="number"     hmi-bind:value="{ HmiProps.StatusBar.Height }" />
        <hmi:localDef name="TestStatusBarElements"        type="boolean"    hmi-bind:value="{{ ( Converter.CountItems( HmiProps.StatusBar.Elements ) ) ? true : false }}" />
        <hmi:localDef name="TestStatusBarHeight"          type="number"     hmi-bind:value="{{ ( LocalProps.TestStatusBar == null ) ? 0 : HmiProps.StatusBar.Height }}" />
        <hmi:localDef name="HasStatusBar"                 type="boolean"    hmi-bind:value="{{ ( LocalProps.TestStatusBar == null ) ? false : true }}" />
        <hmi:localDef name="StatusBarHeight"              type="number"     hmi-bind:value="{{ ( LocalProps.HasStatusBar ) ? LocalProps.TestStatusBarHeight : 0 }}" />
        <hmi:localDef name="StatusBarVisibility"          type="boolean"    hmi-bind:value="{{ ( LocalProps.TestStatusBar == null ) ? false : HmiProps.StatusBar.Visible }}" />
        <hmi:localDef name="HasStatusBarElements"         type="boolean"    hmi-bind:value="{{ ( LocalProps.HasStatusBar ) ? LocalProps.TestStatusBarElements : false }}" />
        <hmi:localDef name="StatusBarWidth"               type="number"     hmi-bind:value="{ LocalProps.WindowInnerWidth }" />
        <hmi:localDef name="StatusBarVisible"             type="boolean"    hmi-bind:value="{{ ( not( and( LocalProps.StatusBarVisibility, LocalProps.HasStatusBarElements ) ) ) ? false : ( or( ( LocalProps.StatusBarWidth == 0 ), ( LocalProps.StatusBarHeight == 0 ) ) ? false : true ) }}" />
        <hmi:localDef name="StatusBarTop"                 type="number"     hmi-bind:value="{{ HmiProps.Height - LocalProps.WindowBorderWidth - LocalProps.StatusBarHeight }}" />

        <!-- Definition of ToolBar properties -->
        <hmi:localDef name="HasToolBar"                   type="boolean"    hmi-bind:value="{{ ( LocalProps.TestToolBar == null ) ? false : true }}" />
        <hmi:localDef name="ToolBarHeight"                type="number"     hmi-bind:value="{{ ( LocalProps.HasToolBar ) ? LocalProps.TestToolBarHeight : 0 }}" />
        <hmi:localDef name="ToolBarPosition"              type="number"     value="1" />
        <hmi:localDef name="ToolBarVisibility"            type="boolean"    hmi-bind:value="{{ ( LocalProps.HasToolBar ) ? LocalProps.TestToolBarVisibility: false }}" />
        <hmi:localDef name="HasToolBarElements"           type="boolean"    hmi-bind:value="{{ ( LocalProps.HasToolBar ) ? LocalProps.TestToolBarElements : false }}" />
        <hmi:localDef name="ToolBarWidth"                 type="number"     hmi-bind:value="{{ ( or( ( LocalProps.ToolBarPosition == 1 ), ( LocalProps.ToolBarPosition == 0 ) ) ? LocalProps.WindowInnerWidth : LocalProps.ToolBarHeight ) }}"  />
        <hmi:localDef name="ToolBarVisible"               type="boolean"    hmi-bind:value="{{ ( not( and( LocalProps.ToolBarVisibility, LocalProps.HasToolBarElements ) ) ) ? false : ( or ( ( LocalProps.ToolBarWidth == 0 ), ( LocalProps.ToolBarHeight == 0 ) ) ? false : true ) }}" />

        <!-- Position and Extent related properties of the content -->
        <hmi:localDef name="ContentOffsetLeft"            type="number"     hmi-bind:value="{{ and( LocalProps.HasToolBar, ( LocalProps.ToolBarPosition == 2 ) ) ? LocalProps.ToolBarHeight : 0 }}" />
        <hmi:localDef name="ContentOffsetTop"             type="number"     hmi-bind:value="{{ and( LocalProps.HasToolBar, ( LocalProps.ToolBarPosition == 0 ) ) ? LocalProps.ToolBarHeight :  0 }}" />
        <hmi:localDef name="ContentOffsetWidth"           type="number"     hmi-bind:value="{{ ( and( LocalProps.ToolBarVisible, or( ( LocalProps.ToolBarPosition == 2 ), ( LocalProps.ToolBarPosition == 3 ) ) ) ?  LocalProps.ToolBarHeight : 0 ) }}" />
        <hmi:localDef name="ContentOffsetHeight"          type="number"     hmi-bind:value="{{ ( and( LocalProps.ToolBarVisible, or( ( LocalProps.ToolBarPosition == 0 ), ( LocalProps.ToolBarPosition == 1 ) ) ) ? LocalProps.ToolBarHeight : 0 ) + ( LocalProps.StatusBarVisible ? LocalProps.StatusBarHeight : 0 ) }}" />

        <hmi:localDef name="FocusColor"                   type="string"     hmi-bind:value="{{ Converter.RGBA( HmiProps.FocusColor ) }}" />

        <clipPath id="WindowClipRect">
            <rect id="ItemRect"
                  hmi-bind:width="{ HmiProps.Width   }"
                  hmi-bind:height="{ HmiProps.Height }"
                  stroke="none" />
        </clipPath>
    </defs>

    <g id="ElementsGroup" clip-path="url(#WindowClipRect)">

        <!-- Background -->
        <rect id="BackGroundRect"
              hmi-bind:width="{ HmiProps.Width }"
              hmi-bind:height="{ HmiProps.Height }"
              hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}"
              stroke="none" />


        <!-- ToolBar -->
        <g hmi:if="{ LocalProps.HasToolBar }" id="ToolBar">
            <hmi:include template="include.style.flat.toolbar.default.svghmi" hmi-bind:for="{ HmiProps.ToolBar }"
                         hmi-bind:x="{{ ( LocalProps.ToolBarPosition == 3 ) ? ( HmiProps.Width - LocalProps.WindowBorderWidth - LocalProps.ToolBarHeight ) : LocalProps.WindowBorderWidth }}"
                         hmi-bind:y="{{ ( LocalProps.ToolBarPosition == 1 ) ? ( HmiProps.Height - LocalProps.WindowBorderWidth - LocalProps.ToolBarHeight - ( LocalProps.StatusBarVisibility ? LocalProps.StatusBarHeight : 0 ) ) : LocalProps.CaptionHeight + LocalProps.WindowBorderWidth }}"
                         hmi-bind:width="{{ or( ( LocalProps.ToolBarPosition == 1 ), ( LocalProps.ToolBarPosition == 0 ) ) ? LocalProps.WindowInnerWidth : LocalProps.ToolBarHeight }}"
                         hmi-bind:height="{{ or( ( LocalProps.ToolBarPosition == 3 ), ( LocalProps.ToolBarPosition == 2 ) ) ? HmiProps.Height - 2 * LocalProps.WindowBorderWidth - LocalProps.CaptionHeight - ( LocalProps.StatusBarVisibility ? LocalProps.StatusBarHeight : 0 ) : LocalProps.ToolBarHeight }}">

                <hmi:param name="Width"           type="number"   hmi-bind:value="{{ or( ( LocalProps.ToolBarPosition == 0 ), ( LocalProps.ToolBarPosition == 1 ) ) ? LocalProps.WindowInnerWidth : LocalProps.ToolBarHeight }}" />
                <hmi:param name="Height"          type="number"   hmi-bind:value="{{ or( ( LocalProps.ToolBarPosition == 3 ), ( LocalProps.ToolBarPosition == 2 ) ) ? HmiProps.Height - 2 * LocalProps.WindowBorderWidth - LocalProps.CaptionHeight - ( LocalProps.StatusBarVisibility ? LocalProps.StatusBarHeight : 0 ) : LocalProps.ToolBarHeight }}" />
                <hmi:param name="ItemOperable"    type="boolean"  hmi-bind:value="{ HmiProps.Enabled }" />
                <hmi:param name="FocusColor"      type="string"   hmi-bind:value="{ LocalProps.FocusColor }" />
                <hmi:param name="ShowFocusVisual" type="boolean"  hmi-bind:value="{ HmiProps.ShowFocusVisual }"   />

            </hmi:include>
        </g>

        <!-- StatusBar -->
        <g hmi:if="{ LocalProps.HasStatusBar }" id="StatusBar">
            <hmi:include template="include.style.flat.statusbar.default.svghmi" hmi-bind:for="{ HmiProps.StatusBar }"
                         hmi-bind:x="{ LocalProps.WindowBorderWidth }"
                         hmi-bind:y="{ LocalProps.StatusBarTop }"
                         hmi-bind:width="{ LocalProps.StatusBarWidth }"
                         hmi-bind:height="{ LocalProps.StatusBarHeight }">

                <hmi:param name="Width"           type="number"   hmi-bind:value="{ LocalProps.StatusBarWidth }"      />
                <hmi:param name="Height"          type="number"   hmi-bind:value="{ LocalProps.StatusBarHeight }"     />
                <hmi:param name="Visible"         type="boolean"  hmi-bind:value="{ LocalProps.StatusBarVisibility }" />
                <hmi:param name="ItemOperable"    type="boolean"  hmi-bind:value="{ HmiProps.Enabled }"               />
                <hmi:param name="FocusColor"      type="string"   hmi-bind:value="{ LocalProps.FocusColor }"          />
                <hmi:param name="ShowFocusVisual" type="boolean"  hmi-bind:value="{ HmiProps.ShowFocusVisual }"   />

      </hmi:include>
    </g>

        <!-- Content as include subtemplate -->
        <g >
            <hmi:include template="style.flat.add_your_template_here.default.svghmi"  hmi-bind:for="{ HmiProps }"
                         hmi-bind:x="{{ LocalProps.WindowBorderWidth + LocalProps.ContentOffsetLeft }}"
                         hmi-bind:y="{{ LocalProps.WindowBorderWidth + LocalProps.CaptionHeight + LocalProps.ContentOffsetTop }}"
                         hmi-bind:width="{{ HmiProps.Width - 2 * LocalProps.WindowBorderWidth - LocalProps.ContentOffsetWidth }}"
                         hmi-bind:height="{{ HmiProps.Height - 2 * LocalProps.WindowBorderWidth - LocalProps.CaptionHeight - LocalProps.ContentOffsetHeight }}" >

                <hmi:param name="ShowFocus"     type="boolean"      hmi-bind:value="{ LocalProps.ShowFocus }"  />
                <hmi:param name="BackColor"     type="HmiColor"     hmi-bind:value="{ HmiProps.BackColor }" />
            </hmi:include>
        </g>
    </g>

    <!-- Frame -->
    <hmi:include template="include.style.flat.hmiwindowframe.default.svghmi"
                 x="0"
                 y="0"
                 hmi-bind:width="{ HmiProps.Width }"
                 hmi-bind:height="{ HmiProps.Height }" >

        <hmi:param name="Top"               type="number"           hmi-bind:value="{ HmiProps.Top }"                 />
        <hmi:param name="Left"              type="number"           hmi-bind:value="{ HmiProps.Left }"                />
        <hmi:param name="Width"             type="number"           hmi-bind:value="{ HmiProps.Width }"               />
        <hmi:param name="Height"            type="number"           hmi-bind:value="{ HmiProps.Height }"              />
        <hmi:param name="WindowFlags"       type="HmiWindowFlag"    hmi-bind:value="{ HmiProps.WindowFlags }"         />
        <hmi:param name="MinimumWidth"      type="number"           hmi-bind:value="{ LocalProps.MinimumWidth }"      />
        <hmi:param name="MinimumHeight"     type="number"           hmi-bind:value="{ LocalProps.MinimumHeight }"     />
        <hmi:param name="Icon"              type="HmiGraphic"       hmi-bind:value="{ HmiProps.Icon }"                />
        <hmi:param name="Caption"           type="HmiTextPart"      hmi-bind:value="{ HmiProps.Caption }"             />
        <hmi:param name="CaptionColor"      type="HmiColor"         hmi-bind:value="{ LocalProps.CaptionColor }"      />
        <hmi:param name="ShowCaption"       type="boolean"          hmi-bind:value="{ LocalProps.ShowCaption }"       />
        <hmi:param name="CaptionHeight"     type="number"           hmi-bind:value="{ LocalProps.CaptionHeight }"     />
        <hmi:param name="WindowBorderWidth" type="number"           hmi-bind:value="{ LocalProps.WindowBorderWidth }" />
        <hmi:param name="WindowBorderColor" type="HmiColor"         hmi-bind:value="{ LocalProps.WindowBorderColor }" />
        <hmi:param name="ItemOperable"      type="boolean"          hmi-bind:value="{ HmiProps.Enabled }"             />
        <hmi:param name="WindowState"       type="number"           hmi-bind:value="{ HmiProps.WindowState }" />

    </hmi:include>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2016. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:hmi="http://svg.siemens.com/hmi/"
    xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
    xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
    xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
    xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
    xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"

    preserveAspectRatio="none"
    overflow="visible" >

    <hmi:self type="item:HmiFaceplateContainer" displayName="Flat FaceplateContainer" name="style.flat.faceplatecontaimer" version="2.8" performanceClass="L" >
        <hmi:focus focusVisual="local" />
    </hmi:self>

    <defs>
        <!-- System definitions of this template -->
        <hmi:localDef name="WindowFramePart"        type="HmiWindowFrameSystemPart"   hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiWindowFrameSystemPart' ) }}" />

        <hmi:localDef name="MinimumWidth"           type="number"   value="100" />
        <hmi:localDef name="MinimumHeight"          type="number"   value="50"  />

        <hmi:localDef name="ShowFocus"              type="boolean"  hmi-bind:value="{{ and( HmiProps.ShowFocusVisual, SysProps.HasFocus ) }}" />
        <hmi:localDef name="ShowCaption"            type="boolean"  hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowCaption ) }}" />
        <hmi:localDef name="CaptionHeight"          type="number"   hmi-bind:value="{{ LocalProps.ShowCaption ? LocalProps.WindowFramePart.CaptionHeight : 0 }}" />
        <hmi:localDef name="CaptionColor"           type="number"   hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : HmiProps.CaptionColor }}" />
        <hmi:localDef name="WindowBorderColor"      type="number"   hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : LocalProps.WindowFramePart.BorderColor }}" />
        <hmi:localDef name="WindowBorderWidth"      type="number"   hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowBorder ) ? LocalProps.WindowFramePart.BorderWidth : 0 }}" />

        <clipPath id="WindowClipRect">
            <rect id="ItemRect"
                  hmi-bind:width="{ HmiProps.Width   }"
                  hmi-bind:height="{ HmiProps.Height }"
                  stroke="none" />
        </clipPath>
    </defs>

    <g id="ElementsGroup" clip-path="url(#WindowClipRect)">

        <!-- Content -->
        <g >
            <hmi-element:content
                 hmi-bind:left="{ LocalProps.WindowBorderWidth }"
                 hmi-bind:top="{{ LocalProps.WindowBorderWidth + LocalProps.CaptionHeight }}"
                 hmi-bind:width="{{ HmiProps.Width - 2 * LocalProps.WindowBorderWidth }}"
                 hmi-bind:height="{{ HmiProps.Height - 2 * LocalProps.WindowBorderWidth - LocalProps.CaptionHeight }}" />
        </g>
    </g>

    <!-- Frame -->
    <hmi:include template="include.style.flat.hmiwindowframe.default.svghmi"
                 x="0"
                 y="0"
                 hmi-bind:width="{ HmiProps.Width }"
                 hmi-bind:height="{ HmiProps.Height }">

        <hmi:param name="Top"               type="number"           hmi-bind:value="{ HmiProps.Top }"                 />
        <hmi:param name="Left"              type="number"           hmi-bind:value="{ HmiProps.Left }"                />
        <hmi:param name="Width"             type="number"           hmi-bind:value="{ HmiProps.Width }"               />
        <hmi:param name="Height"            type="number"           hmi-bind:value="{ HmiProps.Height }"              />
        <hmi:param name="WindowFlags"       type="HmiWindowFlag"    hmi-bind:value="{ HmiProps.WindowFlags }"         />
        <hmi:param name="MinimumWidth"      type="number"           hmi-bind:value="{ LocalProps.MinimumWidth }"      />
        <hmi:param name="MinimumHeight"     type="number"           hmi-bind:value="{ LocalProps.MinimumHeight }"     />
        <hmi:param name="Icon"              type="HmiGraphic"       hmi-bind:value="{ HmiProps.Icon }"                />
        <hmi:param name="Caption"           type="HmiTextPart"      hmi-bind:value="{ HmiProps.Caption }"             />
        <hmi:param name="CaptionColor"      type="HmiColor"         hmi-bind:value="{ LocalProps.CaptionColor }"      />
        <hmi:param name="ShowCaption"       type="boolean"          hmi-bind:value="{ LocalProps.ShowCaption }"       />
        <hmi:param name="CaptionHeight"     type="number"           hmi-bind:value="{ LocalProps.CaptionHeight }"     />
        <hmi:param name="WindowBorderWidth" type="number"           hmi-bind:value="{ LocalProps.WindowBorderWidth }" />
        <hmi:param name="WindowBorderColor" type="HmiColor"         hmi-bind:value="{ LocalProps.WindowBorderColor }" />
        <hmi:param name="ItemOperable"      type="boolean"          hmi-bind:value="{ HmiProps.Enabled }"             />
        <hmi:param name="WindowState"       type="number"           hmi-bind:value="{ HmiProps.WindowState }" />

    </hmi:include>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2020. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:hmi="http://svg.siemens.com/hmi/"
    xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
    xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
    xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/"
    preserveAspectRatio="none"
    overflow="visible"
    id="TIFID_custom_TrendControlContent">

    <hmi:self type="item:HmiFunctionTrendControl" displayName="Flat FunctionTrendControl" name="style.flat.functiontrendcontrol" version="2.8" performanceClass="L" >
        <hmi:focus focusVisual="local" />
    </hmi:self>

    <defs>
        <!-- System definitions of this template -->
        <hmi:localDef name="ScrollBarPart"                type="HmiScrollBarSystemPart"     hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiScrollBarSystemPart' ) }}" />

        <hmi:localDef name="WindowFramePart"              type="HmiWindowFrameSystemPart"   hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiWindowFrameSystemPart' ) }}" />

        <hmi:localDef name="MinimumWidth"                 type="number"     value="100" />
        <hmi:localDef name="MinimumHeight"                type="number"     value="50"  />
        <hmi:localDef name="LegendTextPadding"            type="number"     value="12"  />

        <hmi:localDef name="ShowFocus"                    type="boolean"    hmi-bind:value="{{ and( HmiProps.ShowFocusVisual, SysProps.HasFocus ) }}" />
        <hmi:localDef name="ShowCaption"                  type="boolean"    hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowCaption ) }}" />
        <hmi:localDef name="CaptionHeight"                type="number"     hmi-bind:value="{{ LocalProps.ShowCaption ? LocalProps.WindowFramePart.CaptionHeight : 0 }}" />
        <hmi:localDef name="CaptionColor"                 type="number"     hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : HmiProps.CaptionColor }}" />
        <hmi:localDef name="WindowBorderColor"            type="number"     hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : LocalProps.WindowFramePart.BorderColor }}" />
        <hmi:localDef name="WindowBorderWidth"            type="number"     hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowBorder ) ? LocalProps.WindowFramePart.BorderWidth : 0 }}" />
        <hmi:localDef name="PaddedWindowBorderWidth"      type="number"     hmi-bind:value="{{ 2 * LocalProps.WindowBorderWidth }}" />
        <hmi:localDef name="WindowInnerWidth"             type="number"     hmi-bind:value="{{ HmiProps.Width - LocalProps.PaddedWindowBorderWidth }}" />
        <hmi:localDef name="HeightPadding"                type="number"     hmi-bind:value="{{ HmiProps.Height - LocalProps.WindowBorderWidth }}" />
        <hmi:localDef name="CaptionHeightPadding"         type="number"     hmi-bind:value="{{ LocalProps.WindowBorderWidth + LocalProps.CaptionHeight }}" />
        <hmi:localDef name="StartX"                       type="number"     hmi-bind:value="{{ HmiProps.ShiftAxes ? 10 : 0 }}" />


        <!-- Definition of StatusBar properties -->
        <hmi:localDef name="HasStatusBar"                 type="boolean"    hmi-bind:value="{{ HmiProps.StatusBar.Height ? true : false }}" />
        <hmi:localDef name="TestStatusBarElements"        type="boolean"    hmi-bind:value="{{ ( Converter.CountItems( HmiProps.StatusBar.Elements ) ) ? true : false }}" />
        <hmi:localDef name="StatusBarHeight"              type="number"     hmi-bind:value="{{ LocalProps.HasStatusBar ? HmiProps.StatusBar.Height : 0 }}" />
        <hmi:localDef name="StatusBarVisibility"          type="boolean"    hmi-bind:value="{{ LocalProps.HasStatusBar ? HmiProps.StatusBar.Visible : false }}" />
        <hmi:localDef name="HasStatusBarElements"         type="boolean"    hmi-bind:value="{{ LocalProps.HasStatusBar ? LocalProps.TestStatusBarElements : false }}" />
        <hmi:localDef name="StatusBarVisible"             type="boolean"    hmi-bind:value="{{ ( not( and( LocalProps.StatusBarVisibility, LocalProps.HasStatusBarElements ) ) ) ? false : ( or( ( LocalProps.WindowInnerWidth == 0 ), ( LocalProps.StatusBarHeight == 0 ) ) ? false : true ) }}" />
        <hmi:localDef name="StatusBarTop"                 type="number"     hmi-bind:value="{{ LocalProps.HeightPadding - LocalProps.StatusBarHeight }}" />

        <!-- Definition of ToolBar properties -->
        <hmi:localDef name="HasToolBar"                   type="boolean"    hmi-bind:value="{{ HmiProps.ToolBar.Height ? true : false }}" />
        <hmi:localDef name="TestToolBarElements"          type="boolean"    hmi-bind:value="{{ ( Converter.CountItems( HmiProps.ToolBar.Elements ) ) ? true : false }}" />
        <hmi:localDef name="ToolBarHeight"                type="number"     hmi-bind:value="{{ LocalProps.HasToolBar ? HmiProps.ToolBar.Height + LocalProps.ScrollBarPart.Thickness : 0 }}" />
        <hmi:localDef name="ToolBarVisibility"            type="boolean"    hmi-bind:value="{{ LocalProps.HasToolBar ? HmiProps.ToolBar.Visible : false }}" />
        <hmi:localDef name="HasToolBarElements"           type="boolean"    hmi-bind:value="{{ LocalProps.HasToolBar ? LocalProps.TestToolBarElements : false }}" />
        <hmi:localDef name="ToolBarVisible"               type="boolean"    hmi-bind:value="{{ ( not( and( LocalProps.ToolBarVisibility, LocalProps.HasToolBarElements ) ) ) ? false : ( or ( ( LocalProps.WindowInnerWidth == 0 ), ( LocalProps.ToolBarHeight == 0 ) ) ? false : true ) }}" />

        <!-- Position and Extent related properties of the content -->
        <hmi:localDef name="ContentOffsetHeight"          type="number"     hmi-bind:value="{{ ( LocalProps.ToolBarVisible ? LocalProps.ToolBarHeight : 0 ) + ( LocalProps.StatusBarVisible ? LocalProps.StatusBarHeight : 0 ) }}" />

        <hmi:localDef name="FocusColor"                   type="string"     hmi-bind:value="{{ Converter.RGBA( HmiProps.FocusColor ) }}" />

        <clipPath id="WindowClipRect">
            <rect id="ItemRect"
                  hmi-bind:width="{ HmiProps.Width   }"
                  hmi-bind:height="{ HmiProps.Height }" />
        </clipPath>

    </defs>

    <g id="ElementsGroup" clip-path="url(#WindowClipRect)">

        <!-- Background -->
        <rect id="BackGroundRect"
              hmi-bind:width="{ HmiProps.Width }"
              hmi-bind:height="{ HmiProps.Height }"
              hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}" />

        <!-- ToolBar -->
        <g hmi:if="{ LocalProps.HasToolBar }" id="ToolBar">
            <hmi:include template="include.style.flat.toolbar.default.svghmi" hmi-bind:for="{ HmiProps.ToolBar }"
                         hmi-bind:x="{ LocalProps.WindowBorderWidth }"
                         hmi-bind:y="{{ LocalProps.HeightPadding - LocalProps.ToolBarHeight - ( LocalProps.StatusBarVisibility ? LocalProps.StatusBarHeight : 0 ) }}"
                         hmi-bind:width="{ LocalProps.WindowInnerWidth }"
                         hmi-bind:height="{ LocalProps.ToolBarHeight }">

                <hmi:param name="Width"           type="number"   hmi-bind:value="{ LocalProps.WindowInnerWidth }"    />
                <hmi:param name="Height"          type="number"   hmi-bind:value="{ LocalProps.ToolBarHeight }"       />
                <hmi:param name="ItemOperable"    type="boolean"  hmi-bind:value="{ HmiProps.Enabled }"               />
                <hmi:param name="FocusColor"      type="string"   hmi-bind:value="{ LocalProps.FocusColor }"          />
                <hmi:param name="ShowFocusVisual" type="boolean"  hmi-bind:value="{ HmiProps.ShowFocusVisual }"   />

            </hmi:include>
        </g>

        <!-- StatusBar -->
        <g hmi:if="{ LocalProps.HasStatusBar }" id="StatusBar">
            <hmi:include template="include.style.flat.statusbar.default.svghmi" hmi-bind:for="{ HmiProps.StatusBar }"
                         hmi-bind:x="{ LocalProps.WindowBorderWidth }"
                         hmi-bind:y="{ LocalProps.StatusBarTop }"
                         hmi-bind:width="{ LocalProps.WindowInnerWidth }"
                         hmi-bind:height="{ LocalProps.StatusBarHeight }">

                <hmi:param name="Width"           type="number"   hmi-bind:value="{ LocalProps.WindowInnerWidth }"  />
                <hmi:param name="Height"          type="number"   hmi-bind:value="{ LocalProps.StatusBarHeight }" />
                <hmi:param name="ItemOperable"    type="boolean"  hmi-bind:value="{ HmiProps.Enabled }"           />
                <hmi:param name="FocusColor"      type="string"   hmi-bind:value="{ LocalProps.FocusColor }"      />
                <hmi:param name="ShowFocusVisual" type="boolean"  hmi-bind:value="{ HmiProps.ShowFocusVisual }"   />

            </hmi:include>
        </g>

        <!-- Content as include subtemplate -->
        <g hmi-bind:pointer-events="{{ HmiProps.Enabled ? 'auto' : 'none' }}" hmi-bind:transform="translate(0, {{LocalProps.LegendTextPadding}})">
          <hmi:include template="include.style.flat.functiontrendarea.svghmi" hmi-bind:forEach="{ HmiProps.FunctionTrendAreas }"
                      hmi-bind:x="{{ LocalProps.WindowBorderWidth + LocalProps.StartX }}"
                      hmi-bind:y="{ LocalProps.CaptionHeightPadding }"
                      hmi-flex:width="{{ LocalProps.WindowInnerWidth - ( 2 * LocalProps.StartX ) }}"
                      hmi-flex:height="{{ HmiProps.Height - LocalProps.PaddedWindowBorderWidth - LocalProps.CaptionHeight - LocalProps.ContentOffsetHeight - LocalProps.LegendTextPadding }}"
                      hmi-flex:alignContent="stretch" hmi-flex:direction="{{ HmiProps.ShiftAxes ? 'row' : 'column' }}" hmi-flex:justifyContent="center" >
              <hmi:param name="HasFocus"            type="boolean"      hmi-bind:value="{ HmiProps.HasFocus }"          />
              <hmi:param name="BackColor"           type="HmiColor"     hmi-bind:value="{ HmiProps.BackColor }"         />
              <hmi:param name="AreaSpacing"         type="number"       hmi-bind:value="{ HmiProps.AreaSpacing }"       />
              <hmi:param name="ShiftAxes"           type="boolean"      hmi-bind:value="{ HmiProps.ShiftAxes }"         />
              <hmi:param name="Online"              type="boolean"      hmi-bind:value="{ HmiProps.Online }"            />
              <hmi:param name="ShowRuler"           type="boolean"      hmi-bind:value="{ HmiProps.ShowRuler }"         />
              <hmi:param name="ExtendRulerToAxis"   type="boolean"      hmi-bind:value="{ HmiProps.ExtendRulerToAxis }" />
              <hmi:param name="LegendFont"          type="HmiFontPart"  hmi-bind:value="{ HmiProps.Legend.Font }"       />
              <hmi:param name="LegendForeColor"     type="HmiColor"     hmi-bind:value="{ HmiProps.Legend.ForeColor }"  />
              <hmi:param name="LegendVisibilty"     type="boolean"      hmi-bind:value="{ HmiProps.Legend.Visible }"    />

          </hmi:include>
        </g>
    </g>

    <!-- Frame -->
    <hmi:include template="include.style.flat.hmiwindowframe.default.svghmi"
                 hmi-bind:width="{ HmiProps.Width }"
                 hmi-bind:height="{ HmiProps.Height }" >

        <hmi:param name="Top"               type="number"           hmi-bind:value="{ HmiProps.Top }"                 />
        <hmi:param name="Left"              type="number"           hmi-bind:value="{ HmiProps.Left }"                />
        <hmi:param name="Width"             type="number"           hmi-bind:value="{ HmiProps.Width }"               />
        <hmi:param name="Height"            type="number"           hmi-bind:value="{ HmiProps.Height }"              />
        <hmi:param name="WindowFlags"       type="HmiWindowFlag"    hmi-bind:value="{ HmiProps.WindowFlags }"         />
        <hmi:param name="MinimumWidth"      type="number"           hmi-bind:value="{ LocalProps.MinimumWidth }"      />
        <hmi:param name="MinimumHeight"     type="number"           hmi-bind:value="{ LocalProps.MinimumHeight }"     />
        <hmi:param name="Icon"              type="HmiGraphic"       hmi-bind:value="{ HmiProps.Icon }"                />
        <hmi:param name="Caption"           type="HmiTextPart"      hmi-bind:value="{ HmiProps.Caption }"             />
        <hmi:param name="CaptionColor"      type="HmiColor"         hmi-bind:value="{ LocalProps.CaptionColor }"      />
        <hmi:param name="ShowCaption"       type="boolean"          hmi-bind:value="{ LocalProps.ShowCaption }"       />
        <hmi:param name="CaptionHeight"     type="number"           hmi-bind:value="{ LocalProps.CaptionHeight }"     />
        <hmi:param name="WindowBorderWidth" type="number"           hmi-bind:value="{ LocalProps.WindowBorderWidth }" />
        <hmi:param name="WindowBorderColor" type="HmiColor"         hmi-bind:value="{ LocalProps.WindowBorderColor }" />
        <hmi:param name="ItemOperable"      type="boolean"          hmi-bind:value="{ HmiProps.Enabled }"             />
        <hmi:param name="WindowState"       type="number"           hmi-bind:value="{ HmiProps.WindowState }" />

    </hmi:include>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     preserveAspectRatio="none">

    <hmi:self type="item:HmiGauge" displayName="Flat Gauge" name="style.flat.gauge" version="2.9" performanceClass="L" >
        <hmi:focus focusVisual="local" />
    </hmi:self>

    <defs>
        <hmi:localDef name="IsMultilineTitle"               type="boolean"  hmi-bind:value="{{ Converter.IsMultiline( HmiProps.Title.Text ) }}" />
        <hmi:localDef name="TitleFontHeight"                type="number"   hmi-bind:value="{{ Converter.TextHeight( HmiProps.Title.Text, HmiProps.Title.Font )  }}" />

        <hmi:localDef name="MinWidthHeight"                 type="number"   hmi-bind:value="{{ Converter.Min( HmiProps.Width, HmiProps.Height ) }}" />
        <hmi:localDef name="IsCompactMode"                  type="boolean"  hmi-bind:value="{{ lt( LocalProps.MinWidthHeight, 180 ) }}" />

        <hmi:localDef name="TitleHeight"                    type="number"   hmi-bind:value="{{ HmiProps.Title.Visible ? ( LocalProps.IsMultilineTitle ? ( LocalProps.TitleFontHeight * 2 ) : ( LocalProps.TitleFontHeight ) ) : 0 }}" />
        <hmi:localDef name="LabelHeight"                    type="number"   hmi-bind:value="{{ HmiProps.Label.Visible ? HmiProps.Label.Font.Size  : 0 }}" />
        
        <hmi:localDef name="Padding"                        type="number"   hmi-bind:value="{{ le( HmiProps.Width, HmiProps.Height ) ? 40 : 30 }}" />
        <hmi:localDef name="Radius"                         type="number"   hmi-bind:value="{{ LocalProps.IsCompactMode ? Converter.Min( HmiProps.Width, HmiProps.Height - 2 * LocalProps.TitleHeight ) / 2 - 5 : ( LocalProps.MinWidthHeight * 0.4 - LocalProps.Padding / 1.55 ) }}" />
        <hmi:localDef name="InnerCircleRadius"              type="number"   hmi-bind:value="{{ LocalProps.IsCompactMode ? LocalProps.Radius - 5 : ( LocalProps.MinWidthHeight * 0.3 - LocalProps.Padding / 2 ) }}" />
        <hmi:localDef name="ScaleWidth"                     type="number"   hmi-bind:value="{{ LocalProps.IsCompactMode ? 10 : LocalProps.Radius / 2 }}" />
        <hmi:localDef name="LabelOffset"                    type="number"   hmi-bind:value="{{ LocalProps.ScaleWidth / 2 + 5 }}" />
        <hmi:localDef name="PeakValueIndicatorOffset"       type="number"   hmi-bind:value="{{ LocalProps.ScaleWidth / 2 - 5 }}" />
        <hmi:localDef name="ShowFocus"                      type="boolean"  hmi-bind:value="{{ and( HmiProps.ShowFocusVisual, SysProps.HasFocus ) }}" />
        <hmi:localDef name="CenterX"                        type="number"   hmi-bind:value="{{ HmiProps.Width / 2 }}" />
        <hmi:localDef name="CenterY"                        type="number"   hmi-bind:value="{{ HmiProps.Height / 2 + LocalProps.TitleHeight }}" />

        <hmi:localDef name="TextWidthMinimum"               type="number"   hmi-bind:value="{{ Converter.TextWidth( Converter.FormatPattern( HmiProps.CurvedScale.BeginValue, HmiProps.OutputFormat ), HmiProps.Font ) }}" />
        <hmi:localDef name="TextWidthMaximum"               type="number"   hmi-bind:value="{{ Converter.TextWidth( Converter.FormatPattern( HmiProps.CurvedScale.EndValue,   HmiProps.OutputFormat ), HmiProps.Font ) }}" />
        <hmi:localDef name="MaxTextWidth"                   type="number"   hmi-bind:value="{{ Converter.Max( LocalProps.TextWidthMinimum, LocalProps.TextWidthMaximum ) }}" />
        
        <hmi:localDef name="OriginValue"                    type="number"   hmi-bind:value="{{ HmiProps.RelativeToOrigin ? Converter.Min( HmiProps.CurvedScale.BeginValue, HmiProps.CurvedScale.EndValue ) + HmiProps.OriginValue / 100 * abs( HmiProps.CurvedScale.EndValue - HmiProps.CurvedScale.BeginValue ) : HmiProps.OriginValue }}" />
        
        <hmi:localDef name="ThresholdFallbackColor"         type="number"   hmi-bind:value="{ HmiProps.NormalRangeColor }" />
        <hmi:localDef name="ProcessValueColorRaw"           type="number"   hmi-bind:value="{{ Converter.ThresholdColorForValue( HmiProps.ProcessValue, HmiProps.Thresholds, LocalProps.ThresholdFallbackColor ) }}" />
        <hmi:localDef name="ProcessValueColor"              type="string"   hmi-bind:value="{{ Converter.RGBA( LocalProps.ProcessValueColorRaw ) }}" />
        <hmi:localDef name="AlternateBorderWidth"           type="number"   value="2" />
        <hmi:localDef name="ItemOperable"                   type="boolean"  hmi-bind:value="{{ HmiProps.Operability == HmiOperability.Operable }}" />

    </defs>

    <g id="ElementsGroup" hmi-bind:opacity="{{ LocalProps.ItemOperable ? 1.0 : 0.5 }}">
        <g id="Background" hmi:if="{{ or( (Converter.Alpha( HmiProps.BackColor ) != 0), (Converter.Alpha( HmiProps.BorderColor ) != 0) ) }}" >
            <rect id="ItemBGRect"
                  hmi-bind:x="{{ HmiProps.BorderWidth / 2 }}"
                  hmi-bind:y="{{ HmiProps.BorderWidth / 2 }}"
                  hmi-bind:width="{{ HmiProps.Width - HmiProps.BorderWidth }}"
                  hmi-bind:height="{{ HmiProps.Height - HmiProps.BorderWidth }}"
                  hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}"
                  hmi-bind:stroke="{{ Converter.RGBA( HmiProps.BorderColor ) }}"
                  hmi-bind:stroke-width="{ HmiProps.BorderWidth }" />
        </g>
        
        <!-- Arc Dial -->
        <g id="ArcDialNVE">
            <hmi-element:arcDial hmi-bind:center-x="{ LocalProps.CenterX }"
                                 hmi-bind:center-y="{ LocalProps.CenterY }"
                                 hmi-bind:radius="{ LocalProps.Radius }"
                                 hmi-bind:begin-angle="{ HmiProps.CurvedScale.StartAngle }"
                                 hmi-bind:angle-range="{ HmiProps.CurvedScale.AngleRange }" >
                <!-- Attention: begin-value and end-value are interchanged to position CurvedScale.BeginValue at begin-angle and CurvedScale.EndValue at angle-range -->
                <hmi-feature:scale hmi-bind:type="{ HmiProps.CurvedScale.ScalingType }"
                                   hmi-bind:begin-value="{HmiProps.CurvedScale.BeginValue}"
                                   hmi-bind:end-value="{HmiProps.CurvedScale.EndValue}"
                                   hmi-bind:maximum-sections="{{ Converter.Max( 5, HmiProps.CurvedScale.DivisionCount ) }}"
                                   hmi-bind:extend="{{ HmiProps.CurvedScale.AutoScaling ? 'both' : 'none' }}">
                    <hmi-feature:range begin-value="begin-surcharge" end-value="end-surcharge">
                        <hmi-feature:ribbons hmi-bind:stroke-width="{ LocalProps.ScaleWidth }" 
                                             hmi-bind:stroke="{{ Converter.RGBA( HmiProps.ScaleBackColor ) }}" />
                    </hmi-feature:range>

                    <!-- forward scale e.g. BeginValue lt EndValue -->
                    <hmi-feature:range hmi-bind:condition="{{ and( or( HmiProps.ProcessValueIndicatorMode == HmiProcessIndicatorMode.Bar, HmiProps.ProcessValueIndicatorMode == HmiProcessIndicatorMode.BarWithDetailedIndicator ) , lt( HmiProps.CurvedScale.BeginValue, HmiProps.CurvedScale.EndValue ) ) }}"
                                       hmi-bind:begin-value="{{ le( LocalProps.OriginValue, HmiProps.CurvedScale.BeginValue ) ? 'begin-surcharge' : ge( LocalProps.OriginValue, HmiProps.CurvedScale.EndValue ) ? 'end-surcharge' : LocalProps.OriginValue }}"
                                       hmi-bind:end-value="{HmiProps.ProcessValue}">
                        <hmi-feature:ribbons hmi-bind:stroke-width="{ LocalProps.ScaleWidth }"
                                             hmi-bind:stroke="{ LocalProps.ProcessValueColor }" />
                    </hmi-feature:range>

                    <!-- revers scale e.g. BeginValue gt EndValue -->
                    <hmi-feature:range hmi-bind:condition="{{ and( or( HmiProps.ProcessValueIndicatorMode == HmiProcessIndicatorMode.Bar, HmiProps.ProcessValueIndicatorMode == HmiProcessIndicatorMode.BarWithDetailedIndicator ) , gt( HmiProps.CurvedScale.BeginValue, HmiProps.CurvedScale.EndValue ) ) }}"
                                       hmi-bind:begin-value="{{ ge( LocalProps.OriginValue, HmiProps.CurvedScale.BeginValue ) ? 'begin-surcharge' : le( LocalProps.OriginValue, HmiProps.CurvedScale.EndValue ) ? 'end-surcharge' : LocalProps.OriginValue }}"
                                       hmi-bind:end-value="{HmiProps.ProcessValue}">
                        <hmi-feature:ribbons hmi-bind:stroke-width="{ LocalProps.ScaleWidth }"
                                             hmi-bind:stroke="{ LocalProps.ProcessValueColor }" />
                    </hmi-feature:range>
                    
                    <!-- inner border line -->
                    <hmi-feature:range hmi-bind:condition="{{ not( LocalProps.IsCompactMode ) }}" begin-value="begin-surcharge" end-value="end-surcharge">
                        <hmi-feature:ribbons hmi-bind:stroke-width="{ LocalProps.AlternateBorderWidth }"
                                             hmi-bind:stroke="{{ Converter.RGBA( HmiProps.ProcessValueIndicatorForeColor ) }}"
                                             hmi-bind:offset="{{ - LocalProps.ScaleWidth / 2 }}" />
                    </hmi-feature:range>
                    
                    <!-- Scale -->
                    <!-- AutoScaling true -->
                    <hmi-feature:autoMeasure hmi-bind:condition="{ HmiProps.CurvedScale.AutoScaling }">

                        <!-- Ticks -->
                        <hmi-feature:division hmi-bind:condition="{{ and( not( LocalProps.IsCompactMode ), has( HmiProps.CurvedScale.ScaleMode, HmiScaleMode.Ticks ) ) }}"
                                              hmi-bind:count="{ HmiProps.CurvedScale.SubDivisionCount }">
                            <hmi-feature:ticks hmi-bind:position-filter="{{ has( HmiProps.CurvedScale.ScaleMode, HmiScaleMode.Labels ) ? 'inner' : 'regular' }}"
                                               hmi-bind:length="{{ LocalProps.ScaleWidth / 4 }}"
                                               hmi-bind:offset="{{ LocalProps.ScaleWidth / 4 }}"
                                               hmi-bind:stroke="{{ Converter.RGBA( HmiProps.CurvedScale.TickColor ) }}"
                                               stroke-width="1" />
                            <hmi-feature:ticks hmi-bind:condition="{{ has( HmiProps.CurvedScale.ScaleMode, HmiScaleMode.Labels ) }}"
                                               position-filter="begin end"
                                               hmi-bind:length="{{ LocalProps.ScaleWidth / 2 }}"
                                               hmi-bind:stroke="{{ Converter.RGBA( HmiProps.CurvedScale.TickColor ) }}"
                                               stroke-width="2" />
                        </hmi-feature:division>

                        <!-- Labels -->
                        <hmi-feature:labels hmi-bind:condition="{{ and( not( LocalProps.IsCompactMode ), has( HmiProps.CurvedScale.ScaleMode, HmiScaleMode.Labels ) ) }}"
                                            hmi-bind:offset="{ LocalProps.LabelOffset }"
                                            hmi-bind:fill="{{ Converter.RGBA( HmiProps.CurvedScale.LabelColor ) }}"
                                            hmi-bind:output-format="{ HmiProps.CurvedScale.OutputFormat }">

                            <hmi-feature:font hmi-bind:scope="{ HmiProps.CurvedScale.LabelFont }" />

                        </hmi-feature:labels>
                    </hmi-feature:autoMeasure>
                    <!-- AutoScaling false -->
                    <hmi-feature:division hmi-bind:condition="{{ not( HmiProps.CurvedScale.AutoScaling ) }}"
                                          hmi-bind:count="{ HmiProps.CurvedScale.DivisionCount }">

                        <!-- Ticks -->
                        <hmi-feature:division hmi-bind:condition="{{ has( HmiProps.CurvedScale.ScaleMode, HmiScaleMode.Ticks ) }}"
                                              hmi-bind:count="{ HmiProps.CurvedScale.SubDivisionCount }">
                            <hmi-feature:ticks hmi-bind:position-filter="{{ has( HmiProps.CurvedScale.ScaleMode, HmiScaleMode.Labels ) ? 'inner' : 'regular' }}"
                                               hmi-bind:length="{{ LocalProps.ScaleWidth / 4 }}"
                                               hmi-bind:offset="{{ LocalProps.ScaleWidth / 4 }}"
                                               hmi-bind:stroke="{{ Converter.RGBA( HmiProps.CurvedScale.TickColor ) }}"
                                               stroke-width="1" />
                            <hmi-feature:ticks hmi-bind:condition="{{ has( HmiProps.CurvedScale.ScaleMode, HmiScaleMode.Labels ) }}"
                                               position-filter="begin end"
                                               hmi-bind:length="{{ LocalProps.ScaleWidth / 2 }}"
                                               hmi-bind:stroke="{{ Converter.RGBA( HmiProps.CurvedScale.TickColor ) }}"
                                               stroke-width="2" />
                        </hmi-feature:division>

                        <!-- Labels -->
                        <hmi-feature:labels hmi-bind:condition="{{ has( HmiProps.CurvedScale.ScaleMode, HmiScaleMode.Labels ) }}"
                                            hmi-bind:offset="{ LocalProps.LabelOffset }"
                                            hmi-bind:fill="{{ Converter.RGBA( HmiProps.CurvedScale.LabelColor ) }}"
                                            hmi-bind:output-format="{ HmiProps.CurvedScale.OutputFormat }">

                            <hmi-feature:font hmi-bind:scope="{ HmiProps.CurvedScale.LabelFont }" />

                        </hmi-feature:labels>
                    </hmi-feature:division>

                    <!-- Min peak value indicator -->
                    <hmi-feature:marker hmi-bind:value="{ HmiProps.ComputedMinPeakValue }" hmi-bind:condition="{{ has( HmiProps.PeakIndicators, HmiPeakIndicator.Low ) }}">
                        <hmi-feature:poleMarkers content-width="9" content-height="11"
                                                 hmi-bind:offset="{ LocalProps.PeakValueIndicatorOffset }">
                            <hmi:master-include template="include.style.flat.peakindicator.svghmi">
                                <hmi:param name="ScaleOrientation"   type="HmiOrientation" hmi-bind:value="{{ HmiOrientation.Horizontal }}"             />
                                <hmi:param name="IndicatorForeColor" type="HmiColor"       hmi-bind:value="{ HmiProps.ProcessValueIndicatorForeColor }" />
                            </hmi:master-include>
                        </hmi-feature:poleMarkers>
                    </hmi-feature:marker>

                    <!-- Max peak value indicator -->
                    <hmi-feature:marker hmi-bind:value="{ HmiProps.ComputedMaxPeakValue }" hmi-bind:condition="{{ has( HmiProps.PeakIndicators, HmiPeakIndicator.High ) }}">
                        <hmi-feature:poleMarkers content-width="9" content-height="11"
                                                 hmi-bind:offset="{ LocalProps.PeakValueIndicatorOffset }">
                            <hmi:master-include template="include.style.flat.peakindicator.svghmi">
                                <hmi:param name="ScaleOrientation"   type="HmiOrientation" hmi-bind:value="{{ HmiOrientation.Horizontal }}"             />
                                <hmi:param name="IndicatorForeColor" type="HmiColor"       hmi-bind:value="{ HmiProps.ProcessValueIndicatorForeColor }" />
                            </hmi:master-include>
                        </hmi-feature:poleMarkers>
                    </hmi-feature:marker>
                    
                    <!-- ProcessValueIndicator (pointer) -->
                    <hmi-feature:marker hmi-bind:value="{ HmiProps.ProcessValue }">
                        <hmi-feature:poleMarkers hmi-bind:condition="{{ not( LocalProps.IsCompactMode ) }}"
                                                 hmi-bind:content-width="{{ LocalProps.Radius * 0.2 }}"
                                                 hmi-bind:content-height="{{ LocalProps.ScaleWidth + LocalProps.AlternateBorderWidth / 2 }}"
                                                 hmi-bind:offset="{{ - LocalProps.AlternateBorderWidth / 2 }}">
                            <hmi:master-inline>
                            
                                <hmi:param name="Width"            type="number"       hmi-bind:value="{{ LocalProps.Radius * 0.2 }}"                                   />
                                <hmi:param name="Height"           type="number"       hmi-bind:value="{{ LocalProps.ScaleWidth + LocalProps.AlternateBorderWidth }}"   />
                                <hmi:param name="StrokeWidth"      type="number"       hmi-bind:value="{ LocalProps.AlternateBorderWidth }"                             />
                                <hmi:param name="FillColor"        type="string"       hmi-bind:value="{{ Converter.RGBA( HmiProps.ProcessValueIndicatorBackColor ) }}"             />
                                <hmi:param name="StrokeColor"      type="string"       hmi-bind:value="{{ Converter.RGBA( HmiProps.ProcessValueIndicatorForeColor ) }}"           />
                                
                                <hmi:template>
                                    <svg xmlns="http://www.w3.org/2000/svg"
                                         xmlns:xlink="http://www.w3.org/1999/xlink"
                                         xmlns:hmi="http://svg.siemens.com/hmi/"
                                         xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                                         xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
                                         xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
                                         xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
                                         xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
                                         overflow="visible">

                                        <hmi:self type="custom" displayName="PVIndicator" name="extended.pvindicator" version="1.0.0" performanceClass="s">
                                            <hmi:paramDef name="Height"                     type="number"  />
                                            <hmi:paramDef name="Width"                      type="number"  />
                                            <hmi:paramDef name="StrokeWidth"                type="number"  />
                                            <hmi:paramDef name="FillColor"                  type="string"  />
                                            <hmi:paramDef name="StrokeColor"                type="string"  />
                                        </hmi:self>
                                        
                                        <defs></defs>
                                        
                                        <path hmi-bind:d="M 0,{ ParamProps.Height } L {{ ParamProps.Width / 2 }},0 L { ParamProps.Width },{ ParamProps.Height }"
                                              hmi-bind:fill="{ ParamProps.FillColor }"
                                              hmi-bind:stroke="{ ParamProps.StrokeColor }"
                                              hmi-bind:stroke-width="{ ParamProps.StrokeWidth }" />
                                    </svg>
                                </hmi:template>
                            </hmi:master-inline >
                        </hmi-feature:poleMarkers>
                        <hmi-feature:ticks hmi-bind:condition="{ LocalProps.IsCompactMode }"
                                           position-filter="begin"
                                           hmi-bind:offset="{{ - LocalProps.ScaleWidth / 2 }}"
                                           hmi-bind:length="{{ LocalProps.ScaleWidth }}"
                                           hmi-bind:stroke="{{ Converter.RGBA( HmiProps.CurvedScale.TickColor ) }}"
                                           stroke-width="2"
                        >
                        </hmi-feature:ticks>
                    </hmi-feature:marker>
                </hmi-feature:scale>
            </hmi-element:arcDial>
        </g>
        
        <!-- ProcessValueIndicator -->
        <g id="ProcessValueIndicator">
            <!-- Inner circle -->
            <circle hmi-bind:r="{ LocalProps.InnerCircleRadius }"
                    hmi-bind:cx="{ LocalProps.CenterX }"
                    hmi-bind:cy="{ LocalProps.CenterY }"
                    hmi-bind:fill="{{ Converter.RGBA( HmiProps.ProcessValueIndicatorBackColor ) }}" />
        </g>

        <g id="TitleGroup" hmi:if="{{ LocalProps.TitleHeight != 0 }}">
            <g id="SingleLineTitle" hmi:if="{{ not( LocalProps.IsMultilineTitle ) }}">
                <text text-anchor="middle"
                    hmi-bind:x="{ LocalProps.CenterX }"
                    hmi-bind:y="{{ HmiProps.Font.Size / 2 }}"
                    hmi-bind:fill="{{ Converter.RGBA( HmiProps.Title.ForeColor ) }}"
                    hmi-bind:font-size="{ HmiProps.Title.Font.Size }"
                    hmi-bind:font-style="{{ HmiProps.Title.Font.Italic ? 'italic' : 'normal' }}"
                    hmi-bind:font-weight="{ HmiProps.Title.Font.Weight }"
                    hmi-bind:font-family="{ HmiProps.Title.Font.Name }"
                    hmi-bind:text-decoration="{{ Converter.TextDecoration( HmiProps.Title.Font ) }}">
                    <hmi:text hmi-bind:value="{ HmiProps.Title.Text }" />
                </text>
            </g>
            <g id="MultiLineTitle" hmi:if="{ LocalProps.IsMultilineTitle }">
                <hmi:inline x="0"
                            y="0"
                            hmi-bind:width="{ HmiProps.Width }"
                            hmi-bind:height="{ LocalProps.TitleHeight }">

                    <hmi:param name="Width"                    	type="number"                 	hmi-bind:value="{ HmiProps.Width }"                             />
                    <hmi:param name="Height"                   	type="number"                 	hmi-bind:value="{ LocalProps.TitleHeight }"                     />

                    <hmi:param name="Text"                    	type="string"                 	hmi-bind:value="{ HmiProps.Title.Text }"                        />
                    <hmi:param name="Font"                    	type="HmiFontPart"            	hmi-bind:value="{ HmiProps.Title.Font }"                        />
                    <hmi:param name="TextColor"               	type="string"                   hmi-bind:value="{{ Converter.RGBA( HmiProps.Title.ForeColor ) }}"               />
                    
                    <hmi:template>
                    <svg xmlns="http://www.w3.org/2000/svg"
                        xmlns:xlink="http://www.w3.org/1999/xlink"
                        xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
                        xmlns:hmi="http://svg.siemens.com/hmi/"
                        xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                        xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
                        xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
                        xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
                        preserveAspectRatio="none">

                        <hmi:self type="custom" displayName="Custom Flat Text Field" name="custom.flat.text.field" version="1.0.1" performanceClass="L">

                        <hmi:paramDef name="Width"                      type="number"                                   />
                        <hmi:paramDef name="Height"                     type="number"                                   />

                        <hmi:paramDef name="Text"                       type="string"                   two-way="false" />
                        <hmi:paramDef name="Font"                       type="HmiFontPart"                              />
                        <hmi:paramDef name="TextColor"                  type="HmiColor"                                 />
                        
                        </hmi:self>

                        <defs></defs>
                        <hmi-element:textField
                                    start-x="0"
                                    start-y="0"
                                    hmi-bind:width="{ ParamProps.Width }"
                                    hmi-bind:height="{ ParamProps.Height }"

                                    hmi-bind:value="{ ParamProps.Text }"
                                    hmi-bind:fore-color="{ ParamProps.TextColor }"
                                    horizontal-text-alignment="center"
                                    vertical-text-alignment="top"
                                    read-only="true"
                                    output-format="{S}"

                                    horizontal-scrollbar-visibility="collapsed"
                                    vertical-scrollbar-visibility="collapsed"
                                    text-trimming="character-ellipsis"               
                                    text-wrapping="no-wrap"
                                    multi-line="true">

                        <hmi-feature:inputBehavior clear-on-activate="false" />
                        <hmi-feature:font hmi-bind:scope="{ ParamProps.Font }" />

                        </hmi-element:textField>
                    </svg>
                    </hmi:template>
                </hmi:inline>
            </g>
        </g>

        <!-- all graphics which is aligned to CenterX / CenterY -->
        <g hmi:if="{{ or( HmiProps.ProcessValueIndicatorMode == HmiProcessIndicatorMode.DetailedIndicator, HmiProps.ProcessValueIndicatorMode == HmiProcessIndicatorMode.BarWithDetailedIndicator ) }}"
           hmi-bind:transform="translate({ LocalProps.CenterX },{ LocalProps.CenterY })">

            <text id="ProcessIndicatorValue" text-anchor="middle"
                  hmi-bind:y="{{ ( HmiProps.Font.Size * 0.65 ) / 2 }}"
                  hmi-bind:fill="{ LocalProps.ProcessValueColor }"
                  hmi-bind:font-size="{ HmiProps.Font.Size }"
                  hmi-bind:font-style="{{ HmiProps.Font.Italic ? 'italic' : 'normal' }}"
                  hmi-bind:font-weight="{ HmiProps.Font.Weight }"
                  hmi-bind:font-family="{ HmiProps.Font.Name }"
                  hmi-bind:text-decoration="{{ Converter.TextDecoration( HmiProps.Font ) }}">
                <hmi:text hmi-bind:value="{{ Converter.FormatPattern( HmiProps.ProcessValue, HmiProps.OutputFormat ) }}" />
            </text>

        <g id="LabelGroup" hmi:if="{{ LocalProps.LabelHeight != 0 }}">
            <text text-anchor="middle"
                  hmi-bind:y="{{ LocalProps.MaxTextWidth * 0.5 + HmiProps.Label.Font.Size }}"
                  hmi-bind:fill="{{ Converter.RGBA( HmiProps.Label.ForeColor ) }}"
                  hmi-bind:font-size="{ HmiProps.Label.Font.Size }"
                  hmi-bind:font-style="{{ HmiProps.Label.Font.Italic ? 'italic' : 'normal' }}"
                  hmi-bind:font-weight="{ HmiProps.Label.Font.Weight }"
                  hmi-bind:font-family="{ HmiProps.Label.Font.Name }"
                  hmi-bind:text-decoration="{{ Converter.TextDecoration( HmiProps.Label.Font ) }}">
                <hmi:text hmi-bind:value="{ HmiProps.Label.Text }" />
            </text>
        </g>

            <!--Trend indicator -->
            <g hmi:if="{{ and( HmiProps.ShowTrendIndicator, HmiProps.ComputedValueTendency != HmiValueTendency.Steady ) }}"
               hmi-bind:transform="translate({{ LocalProps.MaxTextWidth / 2 + 4 }},-13)">

                <path d="M 7,0 l -7,15 h 4 v 7 h 6 v -7 h 4 z"
                      hmi-bind:transform="rotate({{ HmiProps.ComputedValueTendency == HmiValueTendency.Downwards ? 180 : 0 }},5.5,6)"
                      hmi-bind:fill="{{ Converter.RGBA( HmiProps.TrendIndicatorColor ) }}" />

            </g>
        </g>
      <rect id="ItemRect_Used"
          hmi:if="{ LocalProps.ShowFocus }"
                fill-opacity="0"
                hmi-bind:stroke="{{ Converter.RGBA( HmiProps.FocusColor ) }}"
                x="1"
                y="1"
                hmi-bind:width="{{ HmiProps.Width - 2 }}"
                hmi-bind:height="{{ HmiProps.Height - 2 }}"
                stroke-width="2" />
    </g>
</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2016. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:hmi="http://svg.siemens.com/hmi/"
    xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
    xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
    xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
    xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
    xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"

    preserveAspectRatio="none"
    overflow="visible" >

    <hmi:self type="item:Hmi___AddYourTypeHere___" displayName="Extended ___AddYourTypeHere___" name="extended.___addyourtypehere___" version="2.8" performanceClass="L" >
        <hmi:focus focusVisual="local" />
    </hmi:self>

    <defs>
        <!-- System definitions of this template -->
		<hmi:localDef name="ScrollBarPart"                type="HmiScrollBarSystemPart"       hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiScrollBarSystemPart' ) }}" />
        
		<hmi:localDef name="WindowFramePart"              type="HmiWindowFrameSystemPart"     hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiWindowFrameSystemPart' ) }}" />

        <hmi:localDef name="MinimumWidth"                 type="number"     value="100" />
        <hmi:localDef name="MinimumHeight"                type="number"     value="50"  />

        <hmi:localDef name="ShowFocus"                    type="boolean"    hmi-bind:value="{{ and( HmiProps.ShowFocusVisual, SysProps.HasFocus ) }}" />
        <hmi:localDef name="ShowCaption"                  type="boolean"    hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowCaption ) }}" />        
        <hmi:localDef name="CaptionHeight"                type="number"     hmi-bind:value="{{ LocalProps.ShowCaption ? LocalProps.WindowFramePart.CaptionHeight : 0 }}" />
        <hmi:localDef name="CaptionColor"                 type="number"     hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : HmiProps.CaptionColor }}" />
        <hmi:localDef name="WindowBorderColor"            type="number"     hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : LocalProps.WindowFramePart.BorderColor }}" />
        <hmi:localDef name="WindowBorderWidth"            type="number"     hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowBorder ) ? LocalProps.WindowFramePart.BorderWidth : 0 }}" />
        <hmi:localDef name="WindowInnerWidth"             type="number"     hmi-bind:value="{{ HmiProps.Width - 2 * LocalProps.WindowBorderWidth }}" />

        <!-- Properties of the Hmi Window -->
        <hmi:localDef name="TestToolBar"                  type="number"     hmi-bind:value="{ HmiProps.ToolBar.Height }" />
        <hmi:localDef name="TestToolBarHeight"            type="number"     hmi-bind:value="{{ ( LocalProps.TestToolBar == null ) ? 0 : HmiProps.ToolBar.Height + LocalProps.ScrollBarPart.Thickness }}" />
        <hmi:localDef name="TestToolBarVisibility"        type="boolean"    hmi-bind:value="{{ ( LocalProps.TestToolBar == null ) ? false : HmiProps.ToolBar.Visible }}" />
        <hmi:localDef name="TestToolBarElements"          type="boolean"    hmi-bind:value="{{ ( Converter.CountItems( HmiProps.ToolBar.Elements ) ) ? true : false }}" />

        <!-- Definition of StatusBar properties -->
        <hmi:localDef name="TestStatusBar"                type="number"     hmi-bind:value="{ HmiProps.StatusBar.Height }" />
        <hmi:localDef name="TestStatusBarElements"        type="boolean"    hmi-bind:value="{{ ( Converter.CountItems( HmiProps.StatusBar.Elements ) ) ? true : false }}" />
        <hmi:localDef name="TestStatusBarHeight"          type="number"     hmi-bind:value="{{ ( LocalProps.TestStatusBar == null ) ? 0 : HmiProps.StatusBar.Height }}" />
        <hmi:localDef name="HasStatusBar"                 type="boolean"    hmi-bind:value="{{ ( LocalProps.TestStatusBar == null ) ? false : true }}" />
        <hmi:localDef name="StatusBarHeight"              type="number"     hmi-bind:value="{{ ( LocalProps.HasStatusBar ) ? LocalProps.TestStatusBarHeight : 0 }}" />
        <hmi:localDef name="StatusBarVisibility"          type="boolean"    hmi-bind:value="{{ ( LocalProps.TestStatusBar == null ) ? false : HmiProps.StatusBar.Visible }}" />
        <hmi:localDef name="HasStatusBarElements"         type="boolean"    hmi-bind:value="{{ ( LocalProps.HasStatusBar ) ? LocalProps.TestStatusBarElements : false }}" />
        <hmi:localDef name="StatusBarWidth"               type="number"     hmi-bind:value="{ LocalProps.WindowInnerWidth }" />
        <hmi:localDef name="StatusBarVisible"             type="boolean"    hmi-bind:value="{{ ( not( and( LocalProps.StatusBarVisibility, LocalProps.HasStatusBarElements ) ) ) ? false : ( or( ( LocalProps.StatusBarWidth == 0 ), ( LocalProps.StatusBarHeight == 0 ) ) ? false : true ) }}" />
        <hmi:localDef name="StatusBarTop"                 type="number"     hmi-bind:value="{{ HmiProps.Height - LocalProps.WindowBorderWidth - LocalProps.StatusBarHeight }}" />

        <!-- Definition of ToolBar properties -->
        <hmi:localDef name="HasToolBar"                   type="boolean"    hmi-bind:value="{{ ( LocalProps.TestToolBar == null ) ? false : true }}" />
        <hmi:localDef name="ToolBarHeight"                type="number"     hmi-bind:value="{{ ( LocalProps.HasToolBar ) ? LocalProps.TestToolBarHeight : 0 }}" />
        <hmi:localDef name="ToolBarPosition"              type="number"     value="1" />
        <hmi:localDef name="ToolBarVisibility"            type="boolean"    hmi-bind:value="{{ ( LocalProps.HasToolBar ) ? LocalProps.TestToolBarVisibility: false }}" />
        <hmi:localDef name="HasToolBarElements"           type="boolean"    hmi-bind:value="{{ ( LocalProps.HasToolBar ) ? LocalProps.TestToolBarElements : false }}" />
        <hmi:localDef name="ToolBarWidth"                 type="number"     hmi-bind:value="{{ ( or( ( LocalProps.ToolBarPosition == 1 ), ( LocalProps.ToolBarPosition == 0 ) ) ? LocalProps.WindowInnerWidth : LocalProps.ToolBarHeight ) }}"  />
        <hmi:localDef name="ToolBarVisible"               type="boolean"    hmi-bind:value="{{ ( not( and( LocalProps.ToolBarVisibility, LocalProps.HasToolBarElements ) ) ) ? false : ( or ( ( LocalProps.ToolBarWidth == 0 ), ( LocalProps.ToolBarHeight == 0 ) ) ? false : true ) }}" />

        <!-- Position and Extent related properties of the content -->
        <hmi:localDef name="ContentOffsetLeft"            type="number"     hmi-bind:value="{{ and( LocalProps.HasToolBar, ( LocalProps.ToolBarPosition == 2 ) ) ? LocalProps.ToolBarHeight : 0 }}" />
        <hmi:localDef name="ContentOffsetTop"             type="number"     hmi-bind:value="{{ and( LocalProps.HasToolBar, ( LocalProps.ToolBarPosition == 0 ) ) ? LocalProps.ToolBarHeight :  0 }}" />
        <hmi:localDef name="ContentOffsetWidth"           type="number"     hmi-bind:value="{{ ( and( LocalProps.ToolBarVisible, or( ( LocalProps.ToolBarPosition == 2 ), ( LocalProps.ToolBarPosition == 3 ) ) ) ?  LocalProps.ToolBarHeight : 0 ) }}" />
        <hmi:localDef name="ContentOffsetHeight"          type="number"     hmi-bind:value="{{ ( and( LocalProps.ToolBarVisible, or( ( LocalProps.ToolBarPosition == 0 ), ( LocalProps.ToolBarPosition == 1 ) ) ) ? LocalProps.ToolBarHeight : 0 ) + ( LocalProps.StatusBarVisible ? LocalProps.StatusBarHeight : 0 ) }}" />

        <hmi:localDef name="FocusColor"                   type="string"     hmi-bind:value="{{ Converter.RGBA( HmiProps.FocusColor ) }}" />

        <clipPath id="WindowClipRect">
            <rect id="ItemRect"
                  hmi-bind:width="{ HmiProps.Width   }"
                  hmi-bind:height="{ HmiProps.Height }"
                  stroke="none" />
        </clipPath>

    </defs>

    <g id="ElementsGroup" clip-path="url(#WindowClipRect)">

        <!-- Background -->
        <rect id="BackGroundRect"
              hmi-bind:width="{ HmiProps.Width }"
              hmi-bind:height="{ HmiProps.Height }"
              hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}"
              stroke="none" />

        <!-- ToolBar -->
        <g hmi:if="{ LocalProps.HasToolBar }" id="ToolBar">
            <hmi:include template="include.style.flat.toolbar.default.svghmi" hmi-bind:for="{ HmiProps.ToolBar }"
                         hmi-bind:x="{{ ( LocalProps.ToolBarPosition == 3 ) ? ( HmiProps.Width - LocalProps.WindowBorderWidth - LocalProps.ToolBarHeight ) : LocalProps.WindowBorderWidth }}"
                         hmi-bind:y="{{ ( LocalProps.ToolBarPosition == 1 ) ? ( HmiProps.Height - LocalProps.WindowBorderWidth - LocalProps.ToolBarHeight - ( LocalProps.StatusBarVisibility ? LocalProps.StatusBarHeight : 0 ) ) : LocalProps.CaptionHeight + LocalProps.WindowBorderWidth }}"
                         hmi-bind:width="{{ or( ( LocalProps.ToolBarPosition == 1 ), ( LocalProps.ToolBarPosition == 0 ) ) ? LocalProps.WindowInnerWidth : LocalProps.ToolBarHeight }}"
                         hmi-bind:height="{{ or( ( LocalProps.ToolBarPosition == 3 ), ( LocalProps.ToolBarPosition == 2 ) ) ? HmiProps.Height - 2 * LocalProps.WindowBorderWidth - LocalProps.CaptionHeight - ( LocalProps.StatusBarVisibility ? LocalProps.StatusBarHeight : 0 ) : LocalProps.ToolBarHeight }}">

                <hmi:param name="Width"           type="number"   hmi-bind:value="{{ or( ( LocalProps.ToolBarPosition == 0 ), ( LocalProps.ToolBarPosition == 1 ) ) ? LocalProps.WindowInnerWidth : LocalProps.ToolBarHeight }}" />
                <hmi:param name="Height"          type="number"   hmi-bind:value="{{ or( ( LocalProps.ToolBarPosition == 3 ), ( LocalProps.ToolBarPosition == 2 ) ) ? HmiProps.Height - 2 * LocalProps.WindowBorderWidth - LocalProps.CaptionHeight - ( LocalProps.StatusBarVisibility ? LocalProps.StatusBarHeight : 0 ) : LocalProps.ToolBarHeight }}" />
                <hmi:param name="ItemOperable"    type="boolean"  hmi-bind:value="{ HmiProps.Enabled }" />
                <hmi:param name="FocusColor"      type="string"   hmi-bind:value="{ LocalProps.FocusColor }" />
                <hmi:param name="ShowFocusVisual" type="boolean"  hmi-bind:value="{ HmiProps.ShowFocusVisual }"   />

            </hmi:include>
        </g>

        <!-- StatusBar -->
        <g hmi:if="{ LocalProps.HasStatusBar }" id="StatusBar">
            <hmi:include template="include.style.flat.statusbar.default.svghmi" hmi-bind:for="{ HmiProps.StatusBar }"
                         hmi-bind:x="{ LocalProps.WindowBorderWidth }"
                         hmi-bind:y="{ LocalProps.StatusBarTop }"
                         hmi-bind:width="{ LocalProps.StatusBarWidth }"
                         hmi-bind:height="{ LocalProps.StatusBarHeight }">

                <hmi:param name="Width"           type="number"   hmi-bind:value="{ LocalProps.StatusBarWidth }" />
                <hmi:param name="Height"          type="number"   hmi-bind:value="{ LocalProps.StatusBarHeight }" />
                <hmi:param name="Visible"         type="boolean"  hmi-bind:value="{ LocalProps.StatusBarVisibility }" />
                <hmi:param name="ItemOperable"    type="boolean"  hmi-bind:value="{ HmiProps.Enabled }" />
                <hmi:param name="FocusColor"      type="string"   hmi-bind:value="{ LocalProps.FocusColor }" />
                <hmi:param name="ShowFocusVisual" type="boolean"  hmi-bind:value="{ HmiProps.ShowFocusVisual }"   />

            </hmi:include>
        </g>

        <!-- Content as include subtemplate -->
        <g >
          <hmi:include template="style.flat.add your subtemplate name here"
                       hmi-bind:x="{{ LocalProps.WindowBorderWidth + LocalProps.ContentOffsetLeft }}"
                       hmi-bind:y="{{ LocalProps.WindowBorderWidth + LocalProps.CaptionHeight + LocalProps.ContentOffsetTop }}"
                       hmi-bind:width="{{ HmiProps.Width - 2 * LocalProps.WindowBorderWidth - LocalProps.ContentOffsetWidth }}"
                       hmi-bind:height="{{ HmiProps.Height - 2 * LocalProps.WindowBorderWidth - LocalProps.CaptionHeight - LocalProps.ContentOffsetHeight }}" >
          </hmi:include>
        </g>
    </g>

    <!-- Frame -->
    <hmi:include template="include.style.flat.hmiwindowframe.default.svghmi"
                 x="0"
                 y="0"
                 hmi-bind:width="{ HmiProps.Width }"
                 hmi-bind:height="{ HmiProps.Height }" >

        <hmi:param name="Top"               type="number"           hmi-bind:value="{ HmiProps.Top }"                 />
        <hmi:param name="Left"              type="number"           hmi-bind:value="{ HmiProps.Left }"                />
        <hmi:param name="Width"             type="number"           hmi-bind:value="{ HmiProps.Width }"               />
        <hmi:param name="Height"            type="number"           hmi-bind:value="{ HmiProps.Height }"              />
        <hmi:param name="WindowFlags"       type="HmiWindowFlag"    hmi-bind:value="{ HmiProps.WindowFlags }"         />
        <hmi:param name="MinimumWidth"      type="number"           hmi-bind:value="{ LocalProps.MinimumWidth }"      />
        <hmi:param name="MinimumHeight"     type="number"           hmi-bind:value="{ LocalProps.MinimumHeight }"     />
        <hmi:param name="Icon"              type="HmiGraphic"       hmi-bind:value="{ HmiProps.Icon }"                />
        <hmi:param name="Caption"           type="HmiTextPart"      hmi-bind:value="{ HmiProps.Caption }"             />
        <hmi:param name="CaptionColor"      type="HmiColor"         hmi-bind:value="{ LocalProps.CaptionColor }"      />
        <hmi:param name="ShowCaption"       type="boolean"          hmi-bind:value="{ LocalProps.ShowCaption }"       />
        <hmi:param name="CaptionHeight"     type="number"           hmi-bind:value="{ LocalProps.CaptionHeight }"     />
        <hmi:param name="WindowBorderWidth" type="number"           hmi-bind:value="{ LocalProps.WindowBorderWidth }" />
        <hmi:param name="WindowBorderColor" type="HmiColor"         hmi-bind:value="{ LocalProps.WindowBorderColor }" />
        <hmi:param name="ItemOperable"      type="boolean"          hmi-bind:value="{ HmiProps.Enabled }"             />
        <hmi:param name="WindowState"       type="number"           hmi-bind:value="{ HmiProps.WindowState }" />

    </hmi:include>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     preserveAspectRatio="none">

    <hmi:self type="item:HmiIOField" displayName="Flat IOField" name="style.flat.iofield" version="2.9" performanceClass="L" >
        <hmi:focus focusVisual="local" />
    </hmi:self>

    <defs>
        <!-- Local definitions of this template -->
        <hmi:localDef name="ColorAlphaMask"         type="number"   value="0x01000000" />
        <hmi:localDef name="HoverAlpha"             type="number"   value="0xC0000000" />
        <hmi:localDef name="DisabledAlpha"          type="number"   value="0x80000000" />

        <hmi:localDef name="MouseHover"             type="number"   value="0" />
        <hmi:localDef name="ShowFocus"              type="boolean"  hmi-bind:value="{{ and( HmiProps.ShowFocusVisual, SysProps.HasFocus ) }}" />

        <hmi:localDef name="InputAllowed"           type="boolean"  hmi-bind:value="{{ and( HmiProps.Operability == HmiOperability.Operable, HmiProps.IOFieldType == HmiIOFieldType.InputOutput ) }}" />
        <hmi:localDef name="ItemOperable"           type="boolean"  hmi-bind:value="{{ HmiProps.Operability == HmiOperability.Operable }}" />
        <hmi:localDef name="ReadOnly"               type="boolean"  hmi-bind:value="{{ HmiProps.Opacity == 0 }}" />
        <hmi:localDef name="OutputMode"             type="boolean"  hmi-bind:value="{{ or( not( LocalProps.InputAllowed ), LocalProps.ReadOnly ) }}" />

        <hmi:localDef name="BorderColorHover"       type="HmiColor" hmi-bind:value="{{ HmiProps.BorderColor % LocalProps.ColorAlphaMask + LocalProps.HoverAlpha }}" />
        <hmi:localDef name="BorderColorDisabled"    type="HmiColor" hmi-bind:value="{{ HmiProps.BorderColor % LocalProps.ColorAlphaMask + LocalProps.DisabledAlpha }}" />
        <hmi:localDef name="BorderColorAlternate"   type="HmiColor" hmi-bind:value="{{ LocalProps.ItemOperable ? HmiProps.AlternateBorderColor : 0 }}" />
        <hmi:localDef name="BorderColor"            type="string"   hmi-bind:value="{{ Converter.RGBA( LocalProps.ItemOperable ? ( LocalProps.MouseHover ? LocalProps.BorderColorHover : HmiProps.BorderColor) : LocalProps.BorderColorDisabled ) }}" />
        <hmi:localDef name="BorderYAlternate"       type="number"   hmi-bind:value="{{ HmiProps.Height - HmiProps.BorderWidth / 2 }}" />
        <hmi:localDef name="ThresholdColorFallback" type="HmiColor" hmi-bind:value="{{ HmiProps.BackColor }}" />
        <hmi:localDef name="ThresholdColor"         type="HmiColor" hmi-bind:value="{{ Converter.ThresholdColorForValue( HmiProps.ProcessValue, HmiProps.Thresholds, LocalProps.ThresholdColorFallback ) }}" />

        <hmi:localDef name="ForeColor"              type="string"   hmi-bind:value="{{ Converter.RGBA( LocalProps.ItemOperable ? HmiProps.ForeColor : HmiProps.ForeColor % LocalProps.ColorAlphaMask + LocalProps.DisabledAlpha ) }}" />
        <hmi:localDef name="BackColorDisabled"      type="HmiColor" hmi-bind:value="{{ LocalProps.ThresholdColor % LocalProps.ColorAlphaMask + LocalProps.DisabledAlpha }}" />
        <hmi:localDef name="BackColorHover"         type="HmiColor" hmi-bind:value="{{ LocalProps.ThresholdColor % LocalProps.ColorAlphaMask + LocalProps.HoverAlpha }}" />
        <hmi:localDef name="BackColor"              type="string"   hmi-bind:value="{{ Converter.RGBA( LocalProps.ItemOperable ? ( LocalProps.MouseHover ? LocalProps.BackColorHover : LocalProps.ThresholdColor ) : LocalProps.BackColorDisabled ) }}" />

        <hmi:localDef name="ContentWidth"           type="number"   hmi-bind:value="{{ HmiProps.Width  - (2 * HmiProps.BorderWidth) - HmiProps.Padding.Left - HmiProps.Padding.Right }}" />
        <hmi:localDef name="ContentHeight"          type="number"   hmi-bind:value="{{ HmiProps.Height - (2 * HmiProps.BorderWidth) - HmiProps.Padding.Top - HmiProps.Padding.Bottom }}" />
        <hmi:localDef name="ContentPositionX"       type="number"   hmi-bind:value="{{ HmiProps.BorderWidth + HmiProps.Padding.Left }}" />
        <hmi:localDef name="ContentPositionY"       type="number"   hmi-bind:value="{{ HmiProps.BorderWidth + HmiProps.Padding.Top  }}" />

        <!-- Output Mode: variables for OutputText (OT) -->
        <hmi:localDef name="OT_Formatted" type="string" hmi-bind:value="{{ LocalProps.OutputMode ? Converter.FormatPattern( HmiProps.ProcessValue, HmiProps.OutputFormat ) : '' }}" />
        <hmi:localDef name="OT_Content"   type="string" hmi-bind:value="{{ LocalProps.OutputMode ? ( HmiProps.TextTrimming == HmiTextTrimming.None ? LocalProps.OT_Formatted : Converter.TextEllipsis( LocalProps.OT_Formatted, LocalProps.ContentWidth, HmiProps.Font ) ) : '' }}" />
        <hmi:localDef name="OT_AnchorX"   type="string" hmi-bind:value="{{ LocalProps.OutputMode ? ( HmiProps.HorizontalTextAlignment == HmiHorizontalAlignment.Center ? 'middle' : HmiProps.HorizontalTextAlignment == HmiHorizontalAlignment.Left ? 'start' : 'end' ) : '' }}" />
        <hmi:localDef name="OT_AnchorY"   type="string" hmi-bind:value="{{ LocalProps.OutputMode ? ( HmiProps.VerticalTextAlignment == HmiVerticalAlignment.Center ? 'middle' : HmiProps.VerticalTextAlignment == HmiVerticalAlignment.Top ? 'start' : 'end' ) : '' }}" />
        <hmi:localDef name="OT_PositionX" type="number" hmi-bind:value="{{ LocalProps.OutputMode ? ( round( LocalProps.OT_AnchorX == 'start' ? HmiProps.BorderWidth + HmiProps.Padding.Left
                                                                                                                                             : LocalProps.OT_AnchorX == 'middle' ? HmiProps.Width / 2
                                                                                                                                             : HmiProps.Width - HmiProps.BorderWidth - HmiProps.Padding.Right ) )
                                                                                                 : '' }}" />
        <!-- AnchorY in 'middle' with an optical corrector '-2'  -->
        <hmi:localDef name="OT_PositionY" type="number" hmi-bind:value="{{ LocalProps.OutputMode ? ( round( LocalProps.OT_AnchorY == 'start' ? HmiProps.BorderWidth + HmiProps.Padding.Top + HmiProps.Font.Size
                                                                                                                                             : LocalProps.OT_AnchorY == 'middle' ? ( HmiProps.Height + HmiProps.Font.Size ) / 2 - 2
                                                                                                                                             : HmiProps.Height - HmiProps.BorderWidth - HmiProps.Padding.Bottom ) )
                                                                                                 : '' }}" />

        <!-- Actions of this template -->
        <hmi:action id="onMouseHover" hmi-bind:condition="{ LocalProps.InputAllowed }" >
            <hmi:setProperty name="LocalProps.MouseHover" type="number" value="1" />
        </hmi:action>
        <hmi:action id="onMouseDown" hmi-bind:condition="{ LocalProps.InputAllowed }" >
            <hmi:setProperty name="LocalProps.MouseHover" type="number" value="0" />
        </hmi:action>
        <hmi:action id="onMouseUp" hmi-bind:condition="{ LocalProps.InputAllowed }" >
            <hmi:setProperty name="LocalProps.MouseHover" type="number" value="0" />
        </hmi:action>
        <hmi:action id="onMouseLeave" hmi-bind:condition="{ LocalProps.InputAllowed }" >
            <hmi:setProperty name="LocalProps.MouseHover" type="number" value="0" />
        </hmi:action>

        <!-- Graphical elements of this template -->
        <clipPath id="ItemClipRect">
            <rect id="ItemRect"
                  hmi-bind:x="{ LocalProps.ContentPositionX }"
                  hmi-bind:y="{ LocalProps.ContentPositionY }"
                  hmi-bind:width="{ LocalProps.ContentWidth }"
                  hmi-bind:height="{ LocalProps.ContentHeight }" />
        </clipPath>

    </defs>

    <g id="ExtendedIOField"
        hmi-event:mouseHover="url(#onMouseHover)"
        hmi-event:down="url(#onMouseDown)"
        hmi-event:up="url(#onMouseUp)"
        hmi-event:mouseLeave="url(#onMouseLeave)"
        hmi-bind:opacity="{{ LocalProps.ItemOperable ? 1.0 : 0.5}}">

        <rect id="ItemBGRect"
            stroke-width="0"
            hmi-bind:x="{ HmiProps.BorderWidth }"
            hmi-bind:y="{ HmiProps.BorderWidth }"
            hmi-bind:width="{{ HmiProps.Width - 2 * HmiProps.BorderWidth }}"
            hmi-bind:height="{{ HmiProps.Height - 2 * HmiProps.BorderWidth }}"
            hmi-bind:fill="{ LocalProps.BackColor }" />

        <rect id="ItemRect_Used"
            fill-opacity="0"
            hmi-bind:x="{{ HmiProps.BorderWidth / 2 }}"
            hmi-bind:y="{{ HmiProps.BorderWidth / 2 }}"
            hmi-bind:width="{{ HmiProps.Width - HmiProps.BorderWidth }}"
            hmi-bind:height="{{ HmiProps.Height - HmiProps.BorderWidth }}"
            hmi-bind:stroke="{{ LocalProps.BorderColor }}"
            hmi-bind:stroke-width="{ HmiProps.BorderWidth }" />

        <line id="ItemBorder"
            x1="0"
            hmi-bind:y1="{ LocalProps.BorderYAlternate }"
            hmi-bind:x2="{ HmiProps.Width }"
            hmi-bind:y2="{ LocalProps.BorderYAlternate }"
            hmi-bind:stroke="{{ Converter.RGBA( LocalProps.BorderColorAlternate ) }}"
            hmi-bind:stroke-width="{ HmiProps.BorderWidth }" />

        <rect id="ItemFocusRect"
            x="0"
            y="0"
            fill-opacity="0"
            stroke-width="2"
            hmi-bind:width="{ HmiProps.Width }"
            hmi-bind:height="{ HmiProps.Height }"
            hmi-bind:stroke="{{ Converter.RGBA( HmiProps.FocusColor ) }}"
            hmi-bind:visibility="{{ LocalProps.ShowFocus ? 'visible' : 'hidden' }}" />

        <!-- Output Mode: <text> only  -->
        <g id="OutputModeText" clip-path="url(#ItemClipRect)" hmi:if="{ LocalProps.OutputMode }">
            <text
                hmi-bind:x="{ LocalProps.OT_PositionX }"
                hmi-bind:y="{ LocalProps.OT_PositionY }"
                hmi-bind:width="{ LocalProps.ContentWidth }"
                hmi-bind:height="{ LocalProps.ContentHeight }"
                hmi-bind:fill="{ LocalProps.ForeColor }"
                hmi-bind:font-size="{ HmiProps.Font.Size }"
                hmi-bind:font-style="{{ HmiProps.Font.Italic ? 'italic' : 'normal' }}"
                hmi-bind:font-weight="{ HmiProps.Font.Weight }"
                hmi-bind:font-family="{ HmiProps.Font.Name }"
                hmi-bind:text-decoration="{{ Converter.TextDecoration( HmiProps.Font ) }}"
                hmi-bind:text-anchor="{ LocalProps.OT_AnchorX }" >

                <hmi:text hmi-bind:value="{ LocalProps.OT_Content }" />
            </text>
        </g>
        <!-- Output/Input Mode: TextFieldNVE -->
        <!--Used double curly braces for Hmi.ProcessValue as it needs to be evaluated as a string for Native RTPU.-->
        <g id="TIFID_TextFieldNVE" clip-path="url(#ItemClipRect)" hmi:if="{{ not( LocalProps.OutputMode ) }}">
            <hmi-element:textField
                        target="HmiProps.ProcessValue"
                        text-trimming="none"
                        text-wrapping="no-wrap"
                        multi-line="false"
                        vertical-scrollbar-visibility="collapsed"
                        horizontal-scrollbar-visibility="collapsed"
                        hmi-bind:start-x="{ LocalProps.ContentPositionX }"
                        hmi-bind:start-y="{ LocalProps.ContentPositionY }"
                        hmi-bind:width="{ LocalProps.ContentWidth }"
                        hmi-bind:height="{ LocalProps.ContentHeight }"
                        hmi-bind:vertical-text-alignment="{ HmiProps.VerticalTextAlignment }"
                        hmi-bind:horizontal-text-alignment="{ HmiProps.HorizontalTextAlignment }"
                        hmi-bind:value="{{ HmiProps.ProcessValue }}"
                        hmi-bind:fore-color="{ LocalProps.ForeColor }"
                        hmi-bind:output-format="{ HmiProps.OutputFormat }"
                        hmi-bind:enabled="{ LocalProps.InputAllowed }"
                        hmi-bind:read-only="{ LocalProps.ReadOnly }">

                <hmi-feature:inputBehavior hmi-bind:scope="{ HmiProps.InputBehavior }" />
                <hmi-feature:font hmi-bind:scope="{ HmiProps.Font }" />
            </hmi-element:textField>
        </g>
    </g>
</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     preserveAspectRatio="none">

    <hmi:self type="item:HmiLabel" displayName="Flat Label" name="style.flat.label" version="2.9" performanceClass="L" >
        <hmi:focus focusVisual="local" />
    </hmi:self>

    <defs>
        <!-- Local definitions of this template -->
        <hmi:localDef name="BorderColorAlphaMask"   type="number" value="0x01000000" />
        <hmi:localDef name="BorderPressedAlpha"     type="number" value="0x80000000" />

        <hmi:localDef name="Pressed"                type="number" value="0" />
		
        <hmi:localDef name="ShowFocus"              type="boolean"    hmi-bind:value="{{ and( HmiProps.ShowFocusVisual, SysProps.HasFocus ) }}" />

        <hmi:localDef name="BorderWidth"            type="number" hmi-bind:value="{{ LocalProps.ShowFocus ? ( HmiProps.BorderWidth + 2 ) : HmiProps.BorderWidth }}" />
        <hmi:localDef name="BorderColor"            type="number" hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : HmiProps.BorderColor }}" />
        <hmi:localDef name="BorderColorPressed"     type="number" hmi-bind:value="{{ LocalProps.BorderColor % LocalProps.BorderColorAlphaMask + LocalProps.BorderPressedAlpha }}" />

        <hmi:localDef name="ContentPositionX"       type="number" hmi-bind:value="{{ HmiProps.BorderWidth + HmiProps.Padding.Left }}" />
        <hmi:localDef name="ContentPositionY"       type="number" hmi-bind:value="{{ HmiProps.BorderWidth + HmiProps.Padding.Top  }}" />

        <hmi:localDef name="ContentWidth"           type="number" hmi-bind:value="{{ HmiProps.Width  - (2 * HmiProps.BorderWidth) - HmiProps.Padding.Left - HmiProps.Padding.Right }}" />
        <hmi:localDef name="ContentHeight"          type="number" hmi-bind:value="{{ HmiProps.Height - (2 * HmiProps.BorderWidth) - HmiProps.Padding.Top  - HmiProps.Padding.Bottom }}" />

        <hmi:localDef name="ItemOperable"           type="boolean" hmi-bind:value="{{ and( HmiProps.Enabled, HmiProps.Operability == HmiOperability.Operable ) }}" />

            <!-- Actions of this template -->
        <hmi:action id="onMouseDown" hmi-bind:condition="{ LocalProps.ItemOperable }" >
            <hmi:setProperty name="LocalProps.Pressed" type="number" value="1" hmi-bind:condition="{{ or( EventArgs.Trigger==HmiEventTrigger.Left, EventArgs.Trigger==HmiEventTrigger.Touch ) }}" />
        </hmi:action>
        <hmi:action id="onMouseUp" hmi-bind:condition="{ LocalProps.ItemOperable }" >
            <hmi:setProperty name="LocalProps.Pressed" type="number" value="0" hmi-bind:condition="{{ or( EventArgs.Trigger==HmiEventTrigger.Left, EventArgs.Trigger==HmiEventTrigger.Touch ) }}" />
        </hmi:action>
        <hmi:action id="onMouseLeave" hmi-bind:condition="{ LocalProps.ItemOperable }" >
            <hmi:setProperty name="LocalProps.Pressed" type="number" value="0" />
        </hmi:action>

        <clipPath id="ItemClipRect">
            <rect id="ItemRect"
                  hmi-bind:x="{{ HmiProps.BorderWidth / 2 }}"
                  hmi-bind:y="{{ HmiProps.BorderWidth / 2 }}"
                  hmi-bind:width="{{ HmiProps.Width - HmiProps.BorderWidth }}"
                  hmi-bind:height="{{ HmiProps.Height - HmiProps.BorderWidth }}"
                  hmi-bind:stroke-width="{ LocalProps.BorderWidth }"
                  rx="5" />
        </clipPath>

    </defs>

    <g id="FlatLabel">

        <rect id="ItemBGRect"
              hmi-bind:x="{ HmiProps.BorderWidth }"
              hmi-bind:y="{ HmiProps.BorderWidth }"
              hmi-bind:width="{{ HmiProps.Width - 2 * HmiProps.BorderWidth }}"
              hmi-bind:height="{{ HmiProps.Height - 2 * HmiProps.BorderWidth }}"
              hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}"
              stroke-width="0"
              hmi-bind:rx="{{ Converter.Max( 1, 5 - LocalProps.BorderWidth ) }}" />

        <g clip-path="url(#ItemClipRect)">
            <hmi:include template="include.style.flat.text.svghmi"
                         hmi-bind:x="{ LocalProps.ContentPositionX }"
                         hmi-bind:y="{ LocalProps.ContentPositionY }"
                         hmi-bind:width="{ LocalProps.ContentWidth }"
                         hmi-bind:height="{ LocalProps.ContentHeight }">

                <hmi:param name="Text"                    type="string"                 hmi-bind:value="{{ HmiProps.TextTrimming == HmiTextTrimming.None ? HmiProps.Text : Converter.TextEllipsis( HmiProps.Text, LocalProps.ContentWidth, HmiProps.Font ) }}" />
                <hmi:param name="Font"                    type="HmiFontPart"            hmi-bind:value="{ HmiProps.Font }" />
                <hmi:param name="TextColor"               type="HmiColor"               hmi-bind:value="{ HmiProps.ForeColor }" />
                <hmi:param name="HorizontalTextAlignment" type="HmiHorizontalAlignment" hmi-bind:value="{ HmiProps.HorizontalTextAlignment }" />
                <hmi:param name="VerticalTextAlignment"   type="HmiVerticalAlignment"   hmi-bind:value="{ HmiProps.VerticalTextAlignment   }" />

            </hmi:include>
        </g>

        <rect id="ItemRect_Used"
              fill-opacity="0"
              hmi-bind:stroke="{{ Converter.RGBA( LocalProps.Pressed ? LocalProps.BorderColorPressed : LocalProps.BorderColor ) }}"
              hmi-bind:x="{{ HmiProps.BorderWidth / 2 }}"
              hmi-bind:y="{{ HmiProps.BorderWidth / 2 }}"
              hmi-bind:width="{{ HmiProps.Width - HmiProps.BorderWidth }}"
              hmi-bind:height="{{ HmiProps.Height - HmiProps.BorderWidth }}"
              hmi-bind:stroke-width="{ LocalProps.BorderWidth }"
              rx="5" />

    </g>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     preserveAspectRatio="none">

  <hmi:self type="item:HmiListBox" displayName="Flat ListBox" name="style.flat.listbox" version="2.8" performanceClass="L" >
    <hmi:focus focusVisual="local" />
  </hmi:self>

  <defs>
    <!-- Local definitions of this template -->
    <hmi:localDef name="ScrollBarPart"              type="HmiScrollBarSystemPart"   hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiScrollBarSystemPart' ) }}" />

    <hmi:localDef name="ScrollBarPosition"          type="number"   value="0" />
    <hmi:localDef name="ShowFocus"                  type="boolean"  hmi-bind:value="{{ and( HmiProps.ShowFocusVisual, SysProps.HasFocus ) }}" />
    <hmi:localDef name="BorderWidth"                type="number"   hmi-bind:value="{{ LocalProps.ShowFocus ? ( HmiProps.BorderWidth + 2 ) : HmiProps.BorderWidth }}" />

    <hmi:localDef name="CheckBoxCount"              type="number"   hmi-bind:value="{{ Converter.CountItems(HmiProps.SelectionItems) }}" />
    <hmi:localDef name="SelectionAutoFactor"        type="number"   hmi-bind:value="{{ and( ( HmiProps.Content.ContentMode == HmiContentMode.GraphicAndText ), or( HmiProps.Content.TextPosition == HmiTextPosition.Top, HmiProps.Content.TextPosition == HmiTextPosition.Bottom ) ) ? 1 - HmiProps.Content.SplitRatio : 1 }}" />
    <hmi:localDef name="SelectionAutoHeight"        type="number"   hmi-bind:value="{{ HmiProps.Font.Size * 2.0 / LocalProps.SelectionAutoFactor }}" />
    <hmi:localDef name="SelectionItemHeight"        type="number"   hmi-bind:value="{{ HmiProps.SelectionItemHeight == 0 ? LocalProps.SelectionAutoHeight : HmiProps.SelectionItemHeight }}" />

    <hmi:localDef name="ContentPositionX"           type="number"   hmi-bind:value="{{ HmiProps.BorderWidth + HmiProps.Padding.Left }}" />
    <hmi:localDef name="ContentPositionY"           type="number"   hmi-bind:value="{{ HmiProps.BorderWidth + HmiProps.Padding.Top  }}" />

    <hmi:localDef name="ViewHeight"                 type="number"   hmi-bind:value="{{ HmiProps.Height - (2 * HmiProps.BorderWidth) - HmiProps.Padding.Top  - HmiProps.Padding.Bottom }}" />
    <hmi:localDef name="ContentHeight"              type="number"   hmi-bind:value="{{ LocalProps.CheckBoxCount * LocalProps.SelectionItemHeight }}" />
    <hmi:localDef name="ScrollBarWidth"             type="number"   hmi-bind:value="{{ gt( LocalProps.ContentHeight, LocalProps.ViewHeight ) ? LocalProps.ScrollBarPart.Thickness : 0 }}" />
    <hmi:localDef name="ContentWidth"               type="number"   hmi-bind:value="{{ HmiProps.Width  - 2 * HmiProps.BorderWidth - HmiProps.Padding.Left - HmiProps.Padding.Right - LocalProps.ScrollBarWidth }}" />
    <hmi:localDef name="ScrollBarContentHeight"     type="number"   hmi-bind:value="{{ HmiProps.Height - ( 2 * HmiProps.BorderWidth + HmiProps.Padding.Top + HmiProps.Padding.Bottom ) }}" />
    <hmi:localDef name="ScrollBarContentPositionX"  type="number"   hmi-bind:value="{{ HmiProps.Width - HmiProps.BorderWidth - HmiProps.Padding.Right - LocalProps.ScrollBarWidth }}" />

    <hmi:localDef name="ItemOperable"               type="boolean"  hmi-bind:value="{{ HmiProps.Operability == HmiOperability.Operable }}" />

    <clipPath id="ExtendedListBoxClipRect">
      <rect id="rectTemp"
            hmi-bind:x="{{ HmiProps.BorderWidth / 2 }}"
            hmi-bind:y="{{ HmiProps.BorderWidth + HmiProps.Padding.Top }}"
            hmi-bind:width="{{ HmiProps.Width - HmiProps.BorderWidth }}"
            hmi-bind:height="{{ HmiProps.Height - 2 * HmiProps.BorderWidth - HmiProps.Padding.Bottom - HmiProps.Padding.Top }}"
            fill="none"
            hmi-bind:stroke="{{ Converter.RGBA(HmiProps.BorderColor) }}"
            hmi-bind:stroke-width="{ HmiProps.BorderWidth }"/>
    </clipPath>

  </defs>

  <g id="ElementsGroup">

    <g id="ExtendedListBox">

      <rect id="ItemRect"
            hmi-bind:x="{{ HmiProps.BorderWidth / 2 }}"
            hmi-bind:y="{{ HmiProps.BorderWidth / 2 }}"
            hmi-bind:width="{{ HmiProps.Width - HmiProps.BorderWidth }}"
            hmi-bind:height="{{ HmiProps.Height - HmiProps.BorderWidth }}"
            hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}"
            stroke-width="0" />

      <g clip-path="url(#ExtendedListBoxClipRect)">
        <g hmi:if="{{ LocalProps.CheckBoxCount != 0 }}" id="SelectionItem_0"
           hmi-bind:transform="translate(0, {{ LocalProps.ScrollBarPosition * -1.0 }} )">
          <hmi:include template="include.style.flat.listbox.svghmi" hmi-bind:forEach="{ HmiProps.SelectionItems }"
                       hmi-bind:x="{ LocalProps.ContentPositionX }"
                       hmi-bind:y="{ LocalProps.ContentPositionY }"
                       hmi-bind:width="{{ HmiProps.Width - HmiProps.BorderWidth*2 }}"
                       hmi-bind:height="{ LocalProps.ContentHeight }">

            <hmi:param name="ItemOperable"          type="boolean"          hmi-bind:value="{ LocalProps.ItemOperable }" />
            <hmi:param name="ForeColor"              type="HmiColor"        hmi-bind:value="{ HmiProps.ForeColor }" />
            <hmi:param name="BackColor"              type="HmiColor"        hmi-bind:value="{ HmiProps.BackColor }" />
            <hmi:param name="AlternateBackColor"     type="HmiColor"        hmi-bind:value="{ HmiProps.AlternateBackColor }" />
            <hmi:param name="BorderColor"            type="HmiColor"        hmi-bind:value="{ HmiProps.BorderColor }" />
            <hmi:param name="FocusColor"             type="HmiColor"        hmi-bind:value="{ HmiProps.FocusColor }" />
            <hmi:param name="BorderWidth"            type="number"          hmi-bind:value="{ HmiProps.BorderWidth }" />
            <hmi:param name="Content"                type="HmiContentPart"  hmi-bind:value="{ HmiProps.Content }" />
            <hmi:param name="Font"                   type="HmiFontPart"     hmi-bind:value="{ HmiProps.Font }" />
            <hmi:param name="SelectionItemHeight"    type="number"          hmi-bind:value="{ LocalProps.SelectionItemHeight }" />
            <hmi:param name="PaddingLeftPlusRight"   type="number"          hmi-bind:value="{{ HmiProps.Padding.Left + HmiProps.Padding.Right }}" />
            <hmi:param name="TextPaddingLeft"        type="number"         value="5" />

          </hmi:include>
        </g>
      </g>

      <rect id="ItemRect_Used"
            hmi-bind:x="{{ HmiProps.BorderWidth / 2 }}"
            hmi-bind:y="{{ HmiProps.BorderWidth / 2 }}"
            hmi-bind:width="{{ HmiProps.Width - HmiProps.BorderWidth }}"
            hmi-bind:height="{{ HmiProps.Height - HmiProps.BorderWidth }}"
            fill="none"
            hmi-bind:stroke="{{ Converter.RGBA( LocalProps.ShowFocus ? HmiProps.FocusColor : HmiProps.BorderColor ) }}"
            hmi-bind:stroke-width="{ LocalProps.BorderWidth }" />
    </g>

    <g hmi:if="{{ gt( LocalProps.ContentHeight, LocalProps.ViewHeight ) }}" id="ScrollBarForExpandedListBox">

      <hmi:include template="include.style.flat.scrollbarstandalone.svghmi"
          hmi-bind:width="{ HmiProps.Width }"
          hmi-bind:height="{ HmiProps.Height }" >

        <hmi:param name="BackColor"           type="HmiColor"         hmi-bind:value="{ LocalProps.ScrollBarPart.BackColor }" />
        <hmi:param name="ThumbBackColor"      type="HmiColor"         hmi-bind:value="{ LocalProps.ScrollBarPart.ThumbBackColor }" />
        <hmi:param name="Orientation"         type="HmiOrientation"   hmi-bind:value="{{ HmiOrientation.Vertical }}" />
        <hmi:param name="Width"               type="number"           hmi-bind:value="{ LocalProps.ScrollBarWidth }" />
        <hmi:param name="Height"              type="number"           hmi-bind:value="{ LocalProps.ScrollBarContentHeight }" />
        <hmi:param name="BeginValue"          type="number"           value="0" />
        <hmi:param name="EndValue"            type="number"           hmi-bind:value="{ LocalProps.ContentHeight }" />
        <hmi:param name="CurrentValue"        type="number"           hmi-bind:value="{ LocalProps.ScrollBarPosition }" />
        <hmi:param name="VisibleValueRange"   type="number"           hmi-bind:value="{ LocalProps.ViewHeight }" />
        <hmi:param name="Thickness"           type="number"           hmi-bind:value="{ LocalProps.ScrollBarWidth }" />
        <hmi:param name="SmallStepValueRange" type="number"           hmi-bind:value="{ LocalProps.CheckBoxCount }" />
        <hmi:param name="BorderWidth"         type="number"           value="0" />
        <hmi:param name="OffsetX"             type="number"           hmi-bind:value="{ LocalProps.ScrollBarContentPositionX }" />
        <hmi:param name="OffsetY"             type="number"           hmi-bind:value="{ LocalProps.ContentPositionY }" />

      </hmi:include>
    </g>
  </g>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2016. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:hmi="http://svg.siemens.com/hmi/"
    xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
    xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
    xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
    xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
    xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"

    preserveAspectRatio="none"
    overflow="visible" >

    <hmi:self type="item:HmiMediaControl" displayName="Flat MediaControl" name="style.flat.mediacontrol" version="2.8" performanceClass="L">
        <hmi:focus focusVisual="local" />
    </hmi:self>

    <defs>
        <!-- System definitions of this template -->
        <hmi:localDef name="ScrollBarPart"                type="HmiScrollBarSystemPart"     hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiScrollBarSystemPart' ) }}" />
        
        <hmi:localDef name="WindowFramePart"              type="HmiWindowFrameSystemPart"   hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiWindowFrameSystemPart' ) }}" />

        <hmi:localDef name="MinimumWidth"                 type="number"     value="100" />
        <hmi:localDef name="MinimumHeight"                type="number"     value="50"  />

        <hmi:localDef name="ShowFocus"                    type="boolean"    hmi-bind:value="{{ and( HmiProps.ShowFocusVisual, SysProps.HasFocus ) }}" />
        <hmi:localDef name="ShowCaption"                  type="boolean"    hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowCaption ) }}" />
        <hmi:localDef name="CaptionHeight"                type="number"     hmi-bind:value="{{ LocalProps.ShowCaption ? LocalProps.WindowFramePart.CaptionHeight : 0 }}" />
        <hmi:localDef name="CaptionColor"                 type="number"     hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : HmiProps.CaptionColor }}" />
        <hmi:localDef name="WindowBorderColor"            type="number"     hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : LocalProps.WindowFramePart.BorderColor }}" />
        <hmi:localDef name="WindowBorderWidth"            type="number"     hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowBorder ) ? LocalProps.WindowFramePart.BorderWidth : 0 }}" />
        <hmi:localDef name="WindowInnerWidth"             type="number"     hmi-bind:value="{{ HmiProps.Width - 2 * LocalProps.WindowBorderWidth }}" />

        <!-- Properties of the Hmi Window -->
        <hmi:localDef name="TestToolBar"                  type="number"     hmi-bind:value="{ HmiProps.ToolBar.Height }" />
        <hmi:localDef name="TestToolBarHeight"            type="number"     hmi-bind:value="{{ ( LocalProps.TestToolBar == null ) ? 0 : HmiProps.ToolBar.Height + LocalProps.ScrollBarPart.Thickness }}" />
        <hmi:localDef name="TestToolBarVisibility"        type="boolean"    hmi-bind:value="{{ ( LocalProps.TestToolBar == null ) ? false : HmiProps.ToolBar.Visible }}" />
        <hmi:localDef name="TestToolBarElements"          type="boolean"    hmi-bind:value="{{ ( Converter.CountItems( HmiProps.ToolBar.Elements ) ) ? true : false }}" />

        <!-- Definition of StatusBar properties -->
        <hmi:localDef name="TestStatusBar"                type="number"     hmi-bind:value="{ HmiProps.StatusBar.Height }" />
        <hmi:localDef name="TestStatusBarElements"        type="boolean"    hmi-bind:value="{{ ( Converter.CountItems( HmiProps.StatusBar.Elements ) ) ? true : false }}" />
        <hmi:localDef name="TestStatusBarHeight"          type="number"     hmi-bind:value="{{ ( LocalProps.TestStatusBar == null ) ? 0 : HmiProps.StatusBar.Height }}" />
        <hmi:localDef name="HasStatusBar"                 type="boolean"    hmi-bind:value="{{ ( LocalProps.TestStatusBar == null ) ? false : true }}" />
        <hmi:localDef name="StatusBarHeight"              type="number"     hmi-bind:value="{{ ( LocalProps.HasStatusBar ) ? LocalProps.TestStatusBarHeight : 0 }}" />
        <hmi:localDef name="StatusBarVisibility"          type="boolean"    hmi-bind:value="{{ ( LocalProps.TestStatusBar == null ) ? false : HmiProps.StatusBar.Visible }}" />
        <hmi:localDef name="HasStatusBarElements"         type="boolean"    hmi-bind:value="{{ ( LocalProps.HasStatusBar ) ? LocalProps.TestStatusBarElements : false }}" />
        <hmi:localDef name="StatusBarWidth"               type="number"     hmi-bind:value="{ LocalProps.WindowInnerWidth }" />
        <hmi:localDef name="StatusBarVisible"             type="boolean"    hmi-bind:value="{{ ( not( and( LocalProps.StatusBarVisibility, LocalProps.HasStatusBarElements ) ) ) ? false : ( or( ( LocalProps.StatusBarWidth == 0 ), ( LocalProps.StatusBarHeight == 0 ) ) ? false : true ) }}" />
        <hmi:localDef name="StatusBarTop"                 type="number"     hmi-bind:value="{{ HmiProps.Height - LocalProps.WindowBorderWidth - LocalProps.StatusBarHeight }}" />

        <!-- Definition of ToolBar properties -->
        <hmi:localDef name="HasToolBar"                   type="boolean"    hmi-bind:value="{{ ( LocalProps.TestToolBar == null ) ? false : true }}" />
        <hmi:localDef name="ToolBarHeight"                type="number"     hmi-bind:value="{{ ( LocalProps.HasToolBar ) ? LocalProps.TestToolBarHeight : 0 }}" />
        <hmi:localDef name="ToolBarPosition"              type="number"     value="1" />
        <hmi:localDef name="ToolBarVisibility"            type="boolean"    hmi-bind:value="{{ ( LocalProps.HasToolBar ) ? LocalProps.TestToolBarVisibility: false }}" />
        <hmi:localDef name="HasToolBarElements"           type="boolean"    hmi-bind:value="{{ ( LocalProps.HasToolBar ) ? LocalProps.TestToolBarElements : false }}" />
        <hmi:localDef name="ToolBarWidth"                 type="number"     hmi-bind:value="{{ ( or( ( LocalProps.ToolBarPosition == 1 ), ( LocalProps.ToolBarPosition == 0 ) ) ? LocalProps.WindowInnerWidth : LocalProps.ToolBarHeight ) }}"  />
        <hmi:localDef name="ToolBarVisible"               type="boolean"    hmi-bind:value="{{ ( not( and( LocalProps.ToolBarVisibility, LocalProps.HasToolBarElements ) ) ) ? false : ( or ( ( LocalProps.ToolBarWidth == 0 ), ( LocalProps.ToolBarHeight == 0 ) ) ? false : true ) }}" />

        <!-- Position and Extent related properties of the content -->
        <hmi:localDef name="ContentOffsetLeft"            type="number"     hmi-bind:value="{{ and( LocalProps.HasToolBar, ( LocalProps.ToolBarPosition == 2 ) ) ? LocalProps.ToolBarHeight : 0 }}" />
        <hmi:localDef name="ContentOffsetTop"             type="number"     hmi-bind:value="{{ and( LocalProps.HasToolBar, ( LocalProps.ToolBarPosition == 0 ) ) ? LocalProps.ToolBarHeight :  0 }}" />
        <hmi:localDef name="ContentOffsetWidth"           type="number"     hmi-bind:value="{{ ( and( LocalProps.ToolBarVisible, or( ( LocalProps.ToolBarPosition == 2 ), ( LocalProps.ToolBarPosition == 3 ) ) ) ?  LocalProps.ToolBarHeight : 0 ) }}" />
        <hmi:localDef name="ContentOffsetHeight"          type="number"     hmi-bind:value="{{ ( and( LocalProps.ToolBarVisible, or( ( LocalProps.ToolBarPosition == 0 ), ( LocalProps.ToolBarPosition == 1 ) ) ) ? LocalProps.ToolBarHeight : 0 ) + ( LocalProps.StatusBarVisible ? LocalProps.StatusBarHeight : 0 ) }}" />
        <hmi:localDef name="SeparationLineHeight"         type="number"     value="2" />
      
        <hmi:localDef name="FocusColor"                   type="string"     hmi-bind:value="{{ Converter.RGBA( HmiProps.FocusColor ) }}" />

        <clipPath id="WindowClipRect">
            <rect id="ItemRect"
                hmi-bind:width="{ HmiProps.Width   }"
                hmi-bind:height="{ HmiProps.Height }"
                stroke="none" />
        </clipPath>

    </defs>

    <g id="ElementsGroup" clip-path="url(#WindowClipRect)">

        <!-- Background -->
        <rect id="BackGroundRect"
              hmi-bind:width="{ HmiProps.Width }"
              hmi-bind:height="{ HmiProps.Height }"
              hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}"
              stroke="none" />

        <!-- ToolBar -->
        <g hmi:if="{ LocalProps.HasToolBar }" id="ToolBar">
            <hmi:include template="include.style.flat.toolbar.default.svghmi" hmi-bind:for="{ HmiProps.ToolBar }"
                         hmi-bind:x="{{ ( LocalProps.ToolBarPosition == 3 ) ? ( HmiProps.Width - LocalProps.WindowBorderWidth - LocalProps.ToolBarHeight ) : LocalProps.WindowBorderWidth }}"
                         hmi-bind:y="{{ ( LocalProps.ToolBarPosition == 1 ) ? ( HmiProps.Height - LocalProps.WindowBorderWidth - LocalProps.ToolBarHeight - ( LocalProps.StatusBarVisibility ? LocalProps.StatusBarHeight : 0 ) ) : LocalProps.CaptionHeight + LocalProps.WindowBorderWidth }}"
                         hmi-bind:width="{{ or( ( LocalProps.ToolBarPosition == 1 ), ( LocalProps.ToolBarPosition == 0 ) ) ? LocalProps.WindowInnerWidth : LocalProps.ToolBarHeight }}"
                         hmi-bind:height="{{ or( ( LocalProps.ToolBarPosition == 3 ), ( LocalProps.ToolBarPosition == 2 ) ) ? HmiProps.Height - 2 * LocalProps.WindowBorderWidth - LocalProps.CaptionHeight - ( LocalProps.StatusBarVisibility ? LocalProps.StatusBarHeight : 0 ) : LocalProps.ToolBarHeight }}">

                <hmi:param name="Width"           type="number"   hmi-bind:value="{{ or( ( LocalProps.ToolBarPosition == 0 ), ( LocalProps.ToolBarPosition == 1 ) ) ? LocalProps.WindowInnerWidth : LocalProps.ToolBarHeight }}" />
                <hmi:param name="Height"          type="number"   hmi-bind:value="{{ or( ( LocalProps.ToolBarPosition == 3 ), ( LocalProps.ToolBarPosition == 2 ) ) ? HmiProps.Height - 2 * LocalProps.WindowBorderWidth - LocalProps.CaptionHeight - ( LocalProps.StatusBarVisibility ? LocalProps.StatusBarHeight : 0 ) : LocalProps.ToolBarHeight }}" />
                <hmi:param name="ItemOperable"    type="boolean"  hmi-bind:value="{ HmiProps.Enabled }" />
                <hmi:param name="FocusColor"      type="string"   hmi-bind:value="{ LocalProps.FocusColor }" />
                <hmi:param name="ShowFocusVisual" type="boolean"  hmi-bind:value="{ HmiProps.ShowFocusVisual }"   />

            </hmi:include>
        </g>

        <!-- StatusBar -->
        <g hmi:if="{ LocalProps.HasStatusBar }" id="StatusBar">
            <hmi:include template="include.style.flat.statusbar.default.svghmi" hmi-bind:for="{ HmiProps.StatusBar }"
                         hmi-bind:x="{ LocalProps.WindowBorderWidth }"
                         hmi-bind:y="{ LocalProps.StatusBarTop }"
                         hmi-bind:width="{ LocalProps.StatusBarWidth }"
                         hmi-bind:height="{ LocalProps.StatusBarHeight }">

                <hmi:param name="Width"           type="number"   hmi-bind:value="{ LocalProps.StatusBarWidth }"  />
                <hmi:param name="Height"          type="number"   hmi-bind:value="{ LocalProps.StatusBarHeight }" />
                <hmi:param name="ItemOperable"    type="boolean"  hmi-bind:value="{ HmiProps.Enabled }"           />
                <hmi:param name="FocusColor"      type="string"   hmi-bind:value="{ LocalProps.FocusColor }"      />
                <hmi:param name="ShowFocusVisual" type="boolean"  hmi-bind:value="{ HmiProps.ShowFocusVisual }"   />

            </hmi:include>
        </g>

        <!-- Content -->
        <g >
          <hmi-element:content
                       hmi-bind:left="{{ LocalProps.WindowBorderWidth + LocalProps.ContentOffsetLeft }}"
                       hmi-bind:top="{{ LocalProps.WindowBorderWidth + LocalProps.CaptionHeight + LocalProps.ContentOffsetTop }}"
                       hmi-bind:width="{{ HmiProps.Width - 2 * LocalProps.WindowBorderWidth - LocalProps.ContentOffsetWidth }}"
                       hmi-bind:height="{{ HmiProps.Height - 2 * LocalProps.WindowBorderWidth - LocalProps.CaptionHeight - LocalProps.ContentOffsetHeight - LocalProps.SeparationLineHeight }}" />
        </g>
    </g>

    <!-- Frame -->
   <hmi:include template="include.style.flat.hmiwindowframe.default.svghmi"
                x="0"
                y="0"
                hmi-bind:width="{ HmiProps.Width }"
                hmi-bind:height="{ HmiProps.Height }" >

       <hmi:param name="Top"               type="number"           hmi-bind:value="{ HmiProps.Top }"                 />
       <hmi:param name="Left"              type="number"           hmi-bind:value="{ HmiProps.Left }"                />
       <hmi:param name="Width"             type="number"           hmi-bind:value="{ HmiProps.Width }"               />
       <hmi:param name="Height"            type="number"           hmi-bind:value="{ HmiProps.Height }"              />
       <hmi:param name="WindowFlags"       type="HmiWindowFlag"    hmi-bind:value="{ HmiProps.WindowFlags }"         />
       <hmi:param name="MinimumWidth"      type="number"           hmi-bind:value="{ LocalProps.MinimumWidth }"      />
       <hmi:param name="MinimumHeight"     type="number"           hmi-bind:value="{ LocalProps.MinimumHeight }"     />
       <hmi:param name="Icon"              type="HmiGraphic"       hmi-bind:value="{ HmiProps.Icon }"                />
       <hmi:param name="Caption"           type="HmiTextPart"      hmi-bind:value="{ HmiProps.Caption }"             />
       <hmi:param name="CaptionColor"      type="HmiColor"         hmi-bind:value="{ LocalProps.CaptionColor }"      />
       <hmi:param name="ShowCaption"       type="boolean"          hmi-bind:value="{ LocalProps.ShowCaption }"       />
       <hmi:param name="CaptionHeight"     type="number"           hmi-bind:value="{ LocalProps.CaptionHeight }"     />
       <hmi:param name="WindowBorderWidth" type="number"           hmi-bind:value="{ LocalProps.WindowBorderWidth }" />
       <hmi:param name="WindowBorderColor" type="HmiColor"         hmi-bind:value="{ LocalProps.WindowBorderColor }" />
       <hmi:param name="ItemOperable"      type="boolean"          hmi-bind:value="{ HmiProps.Enabled }"             />
       <hmi:param name="WindowState"       type="number"           hmi-bind:value="{ HmiProps.WindowState }" />

   </hmi:include>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2016. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:hmi="http://svg.siemens.com/hmi/"
    xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
    xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
    preserveAspectRatio="none"
    overflow="visible" >

    <hmi:self type="item:HmiObjectExplorerControl" displayName="ObjectExplorer Control" name="style.flat.objectexplorercontrol" version="1.0" performanceClass="L" >
        <hmi:focus focusVisual="local" />
    </hmi:self>

    <defs>
        <!-- System definitions of this template -->     
        <hmi:localDef name="WindowFramePart"              type="HmiWindowFrameSystemPart"   hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiWindowFrameSystemPart' ) }}" />

        <hmi:localDef name="MinimumWidth"                 type="number"     value="100" />
        <hmi:localDef name="MinimumHeight"                type="number"     value="50"  />

        <hmi:localDef name="ShowFocus"                    type="boolean"    hmi-bind:value="{{ and( HmiProps.ShowFocusVisual, SysProps.HasFocus ) }}" />
        <hmi:localDef name="ShowCaption"                  type="boolean"    hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowCaption ) }}" />
        <hmi:localDef name="CaptionHeight"                type="number"     hmi-bind:value="{{ LocalProps.ShowCaption ? LocalProps.WindowFramePart.CaptionHeight : 0 }}" />
        <hmi:localDef name="CaptionColor"                 type="number"     hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : HmiProps.CaptionColor }}" />
        <hmi:localDef name="WindowBorderColor"            type="number"     hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : LocalProps.WindowFramePart.BorderColor }}" />
        <hmi:localDef name="WindowBorderWidth"            type="number"     value="0" />
        <hmi:localDef name="WindowInnerWidth"             type="number"     hmi-bind:value="{{ HmiProps.Width - 2 * LocalProps.WindowBorderWidth }}" />

        <!-- Properties of the Hmi Window -->
        <hmi:localDef name="TestToolBar"                  type="number"     hmi-bind:value="{ HmiProps.ToolBar.Height }" />
        <hmi:localDef name="TestToolBarHeight"            type="number"     hmi-bind:value="{{ ( LocalProps.TestToolBar == null ) ? 0 : HmiProps.ToolBar.Height }}" />
        <hmi:localDef name="TestToolBarVisibility"        type="boolean"    hmi-bind:value="{{ ( LocalProps.TestToolBar == null ) ? false : HmiProps.ToolBar.Visible }}" />
        <hmi:localDef name="TestToolBarElements"          type="boolean"    hmi-bind:value="{{ ( Converter.CountItems( HmiProps.ToolBar.Elements ) ) ? true : false }}" />

        <!-- Definition of ToolBar properties -->
        <hmi:localDef name="HasToolBar"                   type="boolean"    hmi-bind:value="{{ ( LocalProps.TestToolBar == null ) ? false : true }}" />
        <hmi:localDef name="ToolBarHeight"                type="number"     hmi-bind:value="{{ ( LocalProps.HasToolBar ) ? LocalProps.TestToolBarHeight : 0 }}" />
        <hmi:localDef name="ToolBarPosition"              type="number"     value="1" />
        <hmi:localDef name="ToolBarVisibility"            type="boolean"    hmi-bind:value="{{ ( LocalProps.HasToolBar ) ? LocalProps.TestToolBarVisibility: false }}" />
        <hmi:localDef name="HasToolBarElements"           type="boolean"    hmi-bind:value="{{ ( LocalProps.HasToolBar ) ? LocalProps.TestToolBarElements : false }}" />
        <hmi:localDef name="ToolBarWidth"                 type="number"     hmi-bind:value="{{ ( or( ( LocalProps.ToolBarPosition == 1 ), ( LocalProps.ToolBarPosition == 0 ) ) ? LocalProps.WindowInnerWidth : LocalProps.ToolBarHeight ) }}"  />
        <hmi:localDef name="ToolBarVisible"               type="boolean"    hmi-bind:value="{{ ( not( and( LocalProps.ToolBarVisibility, LocalProps.HasToolBarElements ) ) ) ? false : ( or ( ( LocalProps.ToolBarWidth == 0 ), ( LocalProps.ToolBarHeight == 0 ) ) ? false : true ) }}" />

        <!-- Position and Extent related properties of the content -->
        <hmi:localDef name="ContentOffsetLeft"            type="number"     hmi-bind:value="{{ and( LocalProps.HasToolBar, ( LocalProps.ToolBarPosition == 2 ) ) ? LocalProps.ToolBarHeight : 0 }}" />
        <hmi:localDef name="ContentOffsetTop"             type="number"     hmi-bind:value="{{ and( LocalProps.HasToolBar, ( LocalProps.ToolBarPosition == 0 ) ) ? LocalProps.ToolBarHeight :  0 }}" />
        <hmi:localDef name="ContentOffsetWidth"           type="number"     hmi-bind:value="{{ ( and( LocalProps.ToolBarVisible, or( ( LocalProps.ToolBarPosition == 2 ), ( LocalProps.ToolBarPosition == 3 ) ) ) ?  LocalProps.ToolBarHeight : 0 ) }}" />
        <hmi:localDef name="ContentOffsetHeight"          type="number"     hmi-bind:value="{{ ( and( LocalProps.ToolBarVisible, or( ( LocalProps.ToolBarPosition == 0 ), ( LocalProps.ToolBarPosition == 1 ) ) ) ? LocalProps.ToolBarHeight : 0 ) }}" />
        <hmi:localDef name="SeparationLineHeight"         type="number"     value="2" />
      
        <hmi:localDef name="FocusColor"                   type="string"     hmi-bind:value="{{ Converter.RGBA( HmiProps.FocusColor ) }}" />

        <clipPath id="WindowClipRect">
            <rect id="ItemRect"
                  hmi-bind:width="{ HmiProps.Width   }"
                  hmi-bind:height="{ HmiProps.Height }"
                  stroke="none" />
        </clipPath>

    </defs>

    <g id="ElementsGroup" clip-path="url(#WindowClipRect)">

        <!-- Background -->
        <rect id="BackGroundRect"
              hmi-bind:width="{ HmiProps.Width }"
              hmi-bind:height="{ HmiProps.Height }"
              hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}"
              stroke="none" />

        <!-- ToolBar -->
        <g hmi:if="{ LocalProps.HasToolBar }" id="ToolBar">
            <hmi:include template="include.style.flat.toolbar.default.svghmi" hmi-bind:for="{ HmiProps.ToolBar }"
                         hmi-bind:x="{{ ( LocalProps.ToolBarPosition == 3 ) ? ( HmiProps.Width - LocalProps.WindowBorderWidth - LocalProps.ToolBarHeight ) : LocalProps.WindowBorderWidth }}"
                         hmi-bind:y="{{ ( LocalProps.ToolBarPosition == 1 ) ? ( HmiProps.Height - LocalProps.WindowBorderWidth - LocalProps.ToolBarHeight ) : LocalProps.CaptionHeight + LocalProps.WindowBorderWidth }}"
                         hmi-bind:width="{{ or( ( LocalProps.ToolBarPosition == 1 ), ( LocalProps.ToolBarPosition == 0 ) ) ? LocalProps.WindowInnerWidth : LocalProps.ToolBarHeight }}"
                         hmi-bind:height="{{ or( ( LocalProps.ToolBarPosition == 3 ), ( LocalProps.ToolBarPosition == 2 ) ) ? HmiProps.Height - 2 * LocalProps.WindowBorderWidth - LocalProps.CaptionHeight : LocalProps.ToolBarHeight }}">

                <hmi:param name="Width"           type="number"   hmi-bind:value="{{ or( ( LocalProps.ToolBarPosition == 0 ), ( LocalProps.ToolBarPosition == 1 ) ) ? LocalProps.WindowInnerWidth : LocalProps.ToolBarHeight }}" />
                <hmi:param name="Height"          type="number"   hmi-bind:value="{{ or( ( LocalProps.ToolBarPosition == 3 ), ( LocalProps.ToolBarPosition == 2 ) ) ? HmiProps.Height - 2 * LocalProps.WindowBorderWidth - LocalProps.CaptionHeight : LocalProps.ToolBarHeight }}" />
                <hmi:param name="ItemOperable"    type="boolean"  hmi-bind:value="{ HmiProps.Enabled }" />
                <hmi:param name="FocusColor"      type="string"   hmi-bind:value="{ LocalProps.FocusColor }" />
                <hmi:param name="ShowFocusVisual" type="boolean"  hmi-bind:value="{ HmiProps.ShowFocusVisual }"   />

            </hmi:include>
        </g>

        <!-- Content -->
        <g >
            <hmi-element:content
                       hmi-bind:left="{{ LocalProps.WindowBorderWidth + LocalProps.ContentOffsetLeft }}"
                       hmi-bind:top="{{ LocalProps.WindowBorderWidth + LocalProps.CaptionHeight + LocalProps.ContentOffsetTop + LocalProps.SeparationLineHeight }}"
                       hmi-bind:width="{{ HmiProps.Width - 2 * LocalProps.WindowBorderWidth - LocalProps.ContentOffsetWidth }}"
                       hmi-bind:height="{{ HmiProps.Height - 2 * LocalProps.WindowBorderWidth - LocalProps.CaptionHeight - LocalProps.ContentOffsetHeight - LocalProps.SeparationLineHeight }}" />
        </g>
    </g>

    <!-- Frame -->
    <hmi:include template="include.style.flat.hmiwindowframe.default.svghmi"
                 x="0"
                 y="0"
                 hmi-bind:width="{ HmiProps.Width }"
                 hmi-bind:height="{ HmiProps.Height }" >

        <hmi:param name="Top"               type="number"           hmi-bind:value="{ HmiProps.Top }"                 />
        <hmi:param name="Left"              type="number"           hmi-bind:value="{ HmiProps.Left }"                />
        <hmi:param name="Width"             type="number"           hmi-bind:value="{ HmiProps.Width }"               />
        <hmi:param name="Height"            type="number"           hmi-bind:value="{ HmiProps.Height }"              />
        <hmi:param name="WindowFlags"       type="HmiWindowFlag"    hmi-bind:value="{ HmiProps.WindowFlags }"         />
        <hmi:param name="MinimumWidth"      type="number"           hmi-bind:value="{ LocalProps.MinimumWidth }"      />
        <hmi:param name="MinimumHeight"     type="number"           hmi-bind:value="{ LocalProps.MinimumHeight }"     />
        <hmi:param name="Icon"              type="HmiGraphic"       hmi-bind:value="{ HmiProps.Icon }"                />
        <hmi:param name="Caption"           type="HmiTextPart"      hmi-bind:value="{ HmiProps.Caption }"             />
        <hmi:param name="CaptionColor"      type="HmiColor"         hmi-bind:value="{ LocalProps.CaptionColor }"      />
        <hmi:param name="ShowCaption"       type="boolean"          hmi-bind:value="{ LocalProps.ShowCaption }"       />
        <hmi:param name="CaptionHeight"     type="number"           hmi-bind:value="{ LocalProps.CaptionHeight }"     />
        <hmi:param name="WindowBorderWidth" type="number"           hmi-bind:value="{ LocalProps.WindowBorderWidth }" />
        <hmi:param name="WindowBorderColor" type="HmiColor"         hmi-bind:value="{ LocalProps.WindowBorderColor }" />
        <hmi:param name="ItemOperable"      type="boolean"          hmi-bind:value="{ HmiProps.Enabled }"             />

    </hmi:include>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2016. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:hmi="http://svg.siemens.com/hmi/"
    xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
    xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
    xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
    xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
    xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"

    preserveAspectRatio="none"
    overflow="visible" >

    <hmi:self type="item:HmiScreenWindow" displayName="Flat PopupScreenWindow" name="style.flat.popupscreenwindow" version="2.8" performanceClass="L" >
        <hmi:focus focusVisual="local" />
    </hmi:self>

    <defs>
        <!-- System definitions of this template -->
        <hmi:localDef name="WindowFramePart"              type="HmiWindowFrameSystemPart"   hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiWindowFrameSystemPart' ) }}" />

        <hmi:localDef name="MinimumWidth"                 type="number"     value="100" />
        <hmi:localDef name="MinimumHeight"                type="number"     value="50"  />

        <hmi:localDef name="ShowFocus"                    type="boolean"    hmi-bind:value="{{ and( HmiProps.ShowFocusVisual, SysProps.HasFocus ) }}" />
        <hmi:localDef name="ShowCaption"                  type="boolean"    hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowCaption ) }}" />
        <hmi:localDef name="CaptionHeight"                type="number"     hmi-bind:value="{{ LocalProps.ShowCaption ? LocalProps.WindowFramePart.CaptionHeight : 0 }}" />
        <hmi:localDef name="CaptionColor"                 type="number"     hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : HmiProps.CaptionColor }}" />
        <hmi:localDef name="WindowBorderColor"            type="number"     hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : LocalProps.WindowFramePart.BorderColor }}" />
        <hmi:localDef name="WindowBorderWidth"            type="number"     hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowBorder ) ? LocalProps.WindowFramePart.BorderWidth : 0 }}" />

        <clipPath id="WindowClipRect">
            <rect id="ItemRect"
                  hmi-bind:width="{ HmiProps.Width   }"
                  hmi-bind:height="{ HmiProps.Height }"
                  stroke="none" />
        </clipPath>
    </defs>

    <g id="ElementsGroup" clip-path="url(#WindowClipRect)">

        <!-- Engineering Background / missing screen -->
        <g id="ESBackground">
            <!-- Always show background if DesignMode or no screen -->
            <rect id="BackGroundRect" hmi:if="{{ or( SysProps.IsDesignMode, HmiProps.Screen == '' ) }}"
                    hmi-bind:width="{{ HmiProps.Width }}"
                    hmi-bind:height="{{ HmiProps.Height }}"
                    fill="#FFFFFF"
                    stroke="none" />

            <!-- On ES show screen name  -->
            <text hmi:if="{ SysProps.IsDesignMode }"
                  text-anchor="middle" font-family="Siemens Sans" font-size="14px" font-weight="normal" fill="black"
                  hmi-bind:x="{{ HmiProps.Width / 2 }}"
                  hmi-bind:y="{{ ( HmiProps.Height + LocalProps.CaptionHeight ) / 2 }}">
                <hmi:text hmi-bind:value="{{ HmiProps.Screen }}" />
            </text>

        </g>

        <!-- HmiScreenWindow Content -->
        <g >
            <hmi-element:content
                 hmi-bind:left="{ LocalProps.WindowBorderWidth }"
                 hmi-bind:top="{{ LocalProps.WindowBorderWidth + LocalProps.CaptionHeight }}"
                 hmi-bind:width="{{ HmiProps.Width - 2 * LocalProps.WindowBorderWidth }}"
                 hmi-bind:height="{{ HmiProps.Height - 2 * LocalProps.WindowBorderWidth - LocalProps.CaptionHeight }}" />
        </g>
    </g>

    <!-- Frame -->
    <hmi:include template="include.style.flat.hmiwindowframe.default.svghmi"
                 x="0"
                 y="0"
                 hmi-bind:width="{ HmiProps.Width }"
                 hmi-bind:height="{ HmiProps.Height }">

        <hmi:param name="Top"               type="number"           hmi-bind:value="{ HmiProps.Top }"                 />
        <hmi:param name="Left"              type="number"           hmi-bind:value="{ HmiProps.Left }"                />
        <hmi:param name="Width"             type="number"           hmi-bind:value="{ HmiProps.Width }"               />
        <hmi:param name="Height"            type="number"           hmi-bind:value="{ HmiProps.Height }"              />
        <hmi:param name="WindowFlags"       type="HmiWindowFlag"    hmi-bind:value="{ HmiProps.WindowFlags }"         />
        <hmi:param name="MinimumWidth"      type="number"           hmi-bind:value="{ LocalProps.MinimumWidth }"      />
        <hmi:param name="MinimumHeight"     type="number"           hmi-bind:value="{ LocalProps.MinimumHeight }"     />
        <hmi:param name="Icon"              type="HmiGraphic"       hmi-bind:value="{ HmiProps.Icon }"                />
        <hmi:param name="Caption"           type="HmiTextPart"      hmi-bind:value="{ HmiProps.Caption }"             />
        <hmi:param name="CaptionColor"      type="HmiColor"         hmi-bind:value="{ LocalProps.CaptionColor }"      />
        <hmi:param name="ShowCaption"       type="boolean"          hmi-bind:value="{ LocalProps.ShowCaption }"       />
        <hmi:param name="CaptionHeight"     type="number"           hmi-bind:value="{ LocalProps.CaptionHeight }"     />
        <hmi:param name="WindowBorderWidth" type="number"           hmi-bind:value="{ LocalProps.WindowBorderWidth }" />
        <hmi:param name="WindowBorderColor" type="HmiColor"         hmi-bind:value="{ LocalProps.WindowBorderColor }" />
        <hmi:param name="ItemOperable"      type="boolean"          hmi-bind:value="{ HmiProps.Enabled }"             />
        <hmi:param name="WindowState"       type="number"           hmi-bind:value="{ HmiProps.WindowState }" />

    </hmi:include>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2016. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:hmi="http://svg.siemens.com/hmi/"
    xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
    xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
    xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
    xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
    xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"

    preserveAspectRatio="none"
    overflow="visible" >

    <hmi:self type="item:HmiProcessControl" displayName="Flat ProcessControl" name="style.flat.processcontrol" version="2.8" performanceClass="L" >
        <hmi:focus focusVisual="local" />
    </hmi:self>

    <defs>
        <!-- System definitions of this template -->
        <hmi:localDef name="ScrollBarPart"                type="HmiScrollBarSystemPart"     hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiScrollBarSystemPart' ) }}" />
        
        <hmi:localDef name="WindowFramePart"              type="HmiWindowFrameSystemPart"   hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiWindowFrameSystemPart' ) }}" />

        <hmi:localDef name="MinimumWidth"                 type="number"     value="100" />
        <hmi:localDef name="MinimumHeight"                type="number"     value="50"  />
        <hmi:localDef name="SeparatorHeight"              type="number"     value="2"   />

        <hmi:localDef name="ShowFocus"                    type="boolean"    hmi-bind:value="{{ and( HmiProps.ShowFocusVisual, SysProps.HasFocus ) }}" />
        <hmi:localDef name="ShowCaption"                  type="boolean"    hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowCaption ) }}" />
        <hmi:localDef name="CaptionHeight"                type="number"     hmi-bind:value="{{ LocalProps.ShowCaption ? LocalProps.WindowFramePart.CaptionHeight : 0 }}" />
        <hmi:localDef name="CaptionColor"                 type="number"     hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : HmiProps.CaptionColor }}" />
        <hmi:localDef name="WindowBorderColor"            type="number"     hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : LocalProps.WindowFramePart.BorderColor }}" />
        <hmi:localDef name="WindowBorderWidth"            type="number"     hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowBorder ) ? LocalProps.WindowFramePart.BorderWidth : 0 }}" />
        <hmi:localDef name="WindowInnerWidth"             type="number"     hmi-bind:value="{{ HmiProps.Width - 2 * LocalProps.WindowBorderWidth }}" />

        <!-- Properties of the Hmi Window -->
        <hmi:localDef name="TestToolBar"                  type="number"     hmi-bind:value="{ HmiProps.ToolBar.Height }" />
        <hmi:localDef name="TestToolBarHeight"            type="number"     hmi-bind:value="{{ ( LocalProps.TestToolBar == null ) ? 0 : HmiProps.ToolBar.Height + LocalProps.ScrollBarPart.Thickness  }}" />
        <hmi:localDef name="TestToolBarVisibility"        type="boolean"    hmi-bind:value="{{ ( LocalProps.TestToolBar == null ) ? false : HmiProps.ToolBar.Visible }}" />
        <hmi:localDef name="TestToolBarElements"          type="boolean"    hmi-bind:value="{{ ( Converter.CountItems( HmiProps.ToolBar.Elements ) ) ? true : false }}" />

        <!-- Definition of StatusBar properties -->
        <hmi:localDef name="TestStatusBar"                type="number"     hmi-bind:value="{ HmiProps.StatusBar.Height }" />
        <hmi:localDef name="TestStatusBarElements"        type="boolean"    hmi-bind:value="{{ ( Converter.CountItems( HmiProps.StatusBar.Elements ) ) ? true : false }}" />
        <hmi:localDef name="TestStatusBarHeight"          type="number"     hmi-bind:value="{{ ( LocalProps.TestStatusBar == null ) ? 0 : HmiProps.StatusBar.Height }}" />
        <hmi:localDef name="HasStatusBar"                 type="boolean"    hmi-bind:value="{{ ( LocalProps.TestStatusBar == null ) ? false : true }}" />
        <hmi:localDef name="StatusBarHeight"              type="number"     hmi-bind:value="{{ ( LocalProps.HasStatusBar ) ? LocalProps.TestStatusBarHeight : 0 }}" />
        <hmi:localDef name="StatusBarVisibility"          type="boolean"    hmi-bind:value="{{ ( LocalProps.TestStatusBar == null ) ? false : HmiProps.StatusBar.Visible }}" />
        <hmi:localDef name="HasStatusBarElements"         type="boolean"    hmi-bind:value="{{ ( LocalProps.HasStatusBar ) ? LocalProps.TestStatusBarElements : false }}" />
        <hmi:localDef name="StatusBarWidth"               type="number"     hmi-bind:value="{ LocalProps.WindowInnerWidth }" />
        <hmi:localDef name="StatusBarVisible"             type="boolean"    hmi-bind:value="{{ ( not( and( LocalProps.StatusBarVisibility, LocalProps.HasStatusBarElements ) ) ) ? false : ( or( ( LocalProps.StatusBarWidth == 0 ), ( LocalProps.StatusBarHeight == 0 ) ) ? false : true ) }}" />
        <hmi:localDef name="StatusBarTop"                 type="number"     hmi-bind:value="{{ HmiProps.Height - LocalProps.WindowBorderWidth - LocalProps.StatusBarHeight }}" />

        <!-- Definition of ToolBar properties -->
        <hmi:localDef name="HasToolBar"                   type="boolean"    hmi-bind:value="{{ ( LocalProps.TestToolBar == null ) ? false : true }}" />
        <hmi:localDef name="ToolBarHeight"                type="number"     hmi-bind:value="{{ ( LocalProps.HasToolBar ) ? LocalProps.TestToolBarHeight : 0 }}" />
        <hmi:localDef name="ToolBarPosition"              type="number"     value="1" />
        <hmi:localDef name="ToolBarVisibility"            type="boolean"    hmi-bind:value="{{ ( LocalProps.HasToolBar ) ? LocalProps.TestToolBarVisibility: false }}" />
        <hmi:localDef name="HasToolBarElements"           type="boolean"    hmi-bind:value="{{ ( LocalProps.HasToolBar ) ? LocalProps.TestToolBarElements : false }}" />
        <hmi:localDef name="ToolBarWidth"                 type="number"     hmi-bind:value="{{ ( or( ( LocalProps.ToolBarPosition == 1 ), ( LocalProps.ToolBarPosition == 0 ) ) ? LocalProps.WindowInnerWidth : LocalProps.ToolBarHeight ) }}"  />
        <hmi:localDef name="ToolBarVisible"               type="boolean"    hmi-bind:value="{{ ( not( and( LocalProps.ToolBarVisibility, LocalProps.HasToolBarElements ) ) ) ? false : ( or ( ( LocalProps.ToolBarWidth == 0 ), ( LocalProps.ToolBarHeight == 0 ) ) ? false : true ) }}" />

        <!-- Position and Extent related properties of the content -->
        <hmi:localDef name="ContentOffsetLeft"            type="number"     hmi-bind:value="{{ and( LocalProps.HasToolBar, ( LocalProps.ToolBarPosition == 2 ) ) ? LocalProps.ToolBarHeight : 0 }}" />
        <hmi:localDef name="ContentOffsetTop"             type="number"     hmi-bind:value="{{ and( LocalProps.HasToolBar, ( LocalProps.ToolBarPosition == 0 ) ) ? LocalProps.ToolBarHeight :  0 }}" />
        <hmi:localDef name="ContentOffsetWidth"           type="number"     hmi-bind:value="{{ ( and( LocalProps.ToolBarVisible, or( ( LocalProps.ToolBarPosition == 2 ), ( LocalProps.ToolBarPosition == 3 ) ) ) ?  LocalProps.ToolBarHeight : 0 ) }}" />
        <hmi:localDef name="ContentOffsetHeight"          type="number"     hmi-bind:value="{{ ( and( LocalProps.ToolBarVisible, or( ( LocalProps.ToolBarPosition == 0 ), ( LocalProps.ToolBarPosition == 1 ) ) ) ? LocalProps.ToolBarHeight : 0 ) + ( LocalProps.StatusBarVisible ? LocalProps.StatusBarHeight : 0 ) }}" />

        <hmi:localDef name="FocusColor"                   type="string"     hmi-bind:value="{{ Converter.RGBA( HmiProps.FocusColor ) }}" />

        <clipPath id="WindowClipRect">
            <rect id="ItemRect"
                  hmi-bind:width="{ HmiProps.Width   }"
                  hmi-bind:height="{ HmiProps.Height }"
                  stroke="none" />
        </clipPath>

    </defs>

    <g id="ElementsGroup" clip-path="url(#WindowClipRect)">

        <!-- Background -->
        <rect id="BackGroundRect"
              hmi-bind:width="{ HmiProps.Width }"
              hmi-bind:height="{ HmiProps.Height }"
              hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}"
              stroke="none" />

        <!-- ToolBar -->
        <g hmi:if="{ LocalProps.HasToolBar }" id="ToolBar">
            <hmi:include template="include.style.flat.toolbar.default.svghmi" hmi-bind:for="{ HmiProps.ToolBar }"
                         hmi-bind:x="{{ ( LocalProps.ToolBarPosition == 3 ) ? ( HmiProps.Width - LocalProps.WindowBorderWidth - LocalProps.ToolBarHeight ) : LocalProps.WindowBorderWidth }}"
                         hmi-bind:y="{{ ( LocalProps.ToolBarPosition == 1 ) ? ( HmiProps.Height - LocalProps.WindowBorderWidth - LocalProps.ToolBarHeight - ( LocalProps.StatusBarVisibility ? LocalProps.StatusBarHeight : 0 ) ) : LocalProps.CaptionHeight + LocalProps.WindowBorderWidth }}"
                         hmi-bind:width="{{ or( ( LocalProps.ToolBarPosition == 1 ), ( LocalProps.ToolBarPosition == 0 ) ) ? LocalProps.WindowInnerWidth : LocalProps.ToolBarHeight }}"
                         hmi-bind:height="{{ or( ( LocalProps.ToolBarPosition == 3 ), ( LocalProps.ToolBarPosition == 2 ) ) ? HmiProps.Height - 2 * LocalProps.WindowBorderWidth - LocalProps.CaptionHeight - ( LocalProps.StatusBarVisibility ? LocalProps.StatusBarHeight : 0 ) : LocalProps.ToolBarHeight }}">

                <hmi:param name="Width"           type="number"   hmi-bind:value="{{ or( ( LocalProps.ToolBarPosition == 0 ), ( LocalProps.ToolBarPosition == 1 ) ) ? LocalProps.WindowInnerWidth : LocalProps.ToolBarHeight }}" />
                <hmi:param name="Height"          type="number"   hmi-bind:value="{{ or( ( LocalProps.ToolBarPosition == 3 ), ( LocalProps.ToolBarPosition == 2 ) ) ? HmiProps.Height - 2 * LocalProps.WindowBorderWidth - LocalProps.CaptionHeight - ( LocalProps.StatusBarVisibility ? LocalProps.StatusBarHeight : 0 ) : LocalProps.ToolBarHeight }}" />
                <hmi:param name="ItemOperable"    type="boolean"  hmi-bind:value="{ HmiProps.Enabled }" />
                <hmi:param name="FocusColor"      type="string"   hmi-bind:value="{ LocalProps.FocusColor }" />
                <hmi:param name="ShowFocusVisual" type="boolean"  hmi-bind:value="{ HmiProps.ShowFocusVisual }"   />

            </hmi:include>
        </g>

        <!-- StatusBar -->
        <g hmi:if="{ LocalProps.HasStatusBar }" id="StatusBar">
            <hmi:include template="include.style.flat.statusbar.default.svghmi" hmi-bind:for="{ HmiProps.StatusBar }"
                         hmi-bind:x="{ LocalProps.WindowBorderWidth }"
                         hmi-bind:y="{ LocalProps.StatusBarTop }"
                         hmi-bind:width="{ LocalProps.StatusBarWidth }"
                         hmi-bind:height="{ LocalProps.StatusBarHeight }">

                <hmi:param name="Width"           type="number"   hmi-bind:value="{ LocalProps.StatusBarWidth }"  />
                <hmi:param name="Height"          type="number"   hmi-bind:value="{ LocalProps.StatusBarHeight }" />
                <hmi:param name="ItemOperable"    type="boolean"  hmi-bind:value="{ HmiProps.Enabled }"           />
                <hmi:param name="FocusColor"      type="string"   hmi-bind:value="{ LocalProps.FocusColor }"      />
                <hmi:param name="ShowFocusVisual" type="boolean"  hmi-bind:value="{ HmiProps.ShowFocusVisual }"   />

            </hmi:include>
        </g>

        <g>
          <!-- Separator between grid and toolbar -->
          <rect
                hmi-bind:y="{{ HmiProps.Height - LocalProps.WindowBorderWidth - LocalProps.ContentOffsetHeight - LocalProps.SeparatorHeight }}"
                hmi-bind:width="{ HmiProps.Width }"
                hmi-bind:height="{ LocalProps.SeparatorHeight }"
                hmi-bind:fill="{{ Converter.RGBA( HmiProps.StatusBar.BackColor ) }}"
                stroke="none"/>
        </g>

        <!-- Content as include subtemplate -->
        <g >
          <hmi:include template="style.flat.processcontrolcontent.default.svghmi"  hmi-bind:for="{ HmiProps.ProcessView }"
                       hmi-bind:x="{{ LocalProps.WindowBorderWidth + LocalProps.ContentOffsetLeft }}"
                       hmi-bind:y="{{ LocalProps.WindowBorderWidth + LocalProps.CaptionHeight + LocalProps.ContentOffsetTop }}"
                       hmi-bind:width="{{ HmiProps.Width - 2 * LocalProps.WindowBorderWidth - LocalProps.ContentOffsetWidth }}"
                       hmi-bind:height="{{ HmiProps.Height - 2 * LocalProps.WindowBorderWidth - LocalProps.CaptionHeight - LocalProps.ContentOffsetHeight - LocalProps.SeparatorHeight }}" >

            <hmi:param name="AlwaysShowRecent"  type="boolean"      hmi-bind:value="{ HmiProps.Online }"        />
            <hmi:param name="FocusColor"        type="string"       hmi-bind:value="{ LocalProps.FocusColor }"  />
            <hmi:param name="ShowFocusVisual"   type="boolean"      hmi-bind:value="{ HmiProps.ShowFocusVisual }"      />

          </hmi:include>
        </g>
    </g>

    <!-- Frame -->
    <hmi:include template="include.style.flat.hmiwindowframe.default.svghmi"
                 x="0"
                 y="0"
                 hmi-bind:width="{ HmiProps.Width }"
                 hmi-bind:height="{ HmiProps.Height }" >

        <hmi:param name="Top"               type="number"           hmi-bind:value="{ HmiProps.Top }"                 />
        <hmi:param name="Left"              type="number"           hmi-bind:value="{ HmiProps.Left }"                />
        <hmi:param name="Width"             type="number"           hmi-bind:value="{ HmiProps.Width }"               />
        <hmi:param name="Height"            type="number"           hmi-bind:value="{ HmiProps.Height }"              />
        <hmi:param name="WindowFlags"       type="HmiWindowFlag"    hmi-bind:value="{ HmiProps.WindowFlags }"         />
        <hmi:param name="MinimumWidth"      type="number"           hmi-bind:value="{ LocalProps.MinimumWidth }"      />
        <hmi:param name="MinimumHeight"     type="number"           hmi-bind:value="{ LocalProps.MinimumHeight }"     />
        <hmi:param name="Icon"              type="HmiGraphic"       hmi-bind:value="{ HmiProps.Icon }"                />
        <hmi:param name="Caption"           type="HmiTextPart"      hmi-bind:value="{ HmiProps.Caption }"             />
        <hmi:param name="CaptionColor"      type="HmiColor"         hmi-bind:value="{ LocalProps.CaptionColor }"      />
        <hmi:param name="ShowCaption"       type="boolean"          hmi-bind:value="{ LocalProps.ShowCaption }"       />
        <hmi:param name="CaptionHeight"     type="number"           hmi-bind:value="{ LocalProps.CaptionHeight }"     />
        <hmi:param name="WindowBorderWidth" type="number"           hmi-bind:value="{ LocalProps.WindowBorderWidth }" />
        <hmi:param name="WindowBorderColor" type="HmiColor"         hmi-bind:value="{ LocalProps.WindowBorderColor }" />
        <hmi:param name="ItemOperable"      type="boolean"          hmi-bind:value="{ HmiProps.Enabled }"             />
        <hmi:param name="WindowState"       type="number"           hmi-bind:value="{ HmiProps.WindowState }" />

    </hmi:include>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     preserveAspectRatio="none"
     id="custom_ProcessControlContent"
     data-tif-type="WSI:SvgGrid">

  <hmi:self type="part:HmiDataGridViewPart" displayName="Flat ProcessControlContent" name="style.flat.processcontrolcontent">
    <hmi:paramDef name="AlwaysShowRecent"   type="boolean"  />
    <hmi:paramDef name="FocusColor"         type="string"   />
    <hmi:paramDef name="ShowFocusVisual"    type="boolean"  />
  </hmi:self>

  <defs>
    <hmi:localDef name="BorderWidth"        type="number"   value="1" />
    <hmi:localDef name="ShowFocus"          type="boolean"  hmi-bind:value="{{ and( ParamProps.ShowFocusVisual, SysProps.HasFocus ) }}" />
  </defs>

  <g id="Background">

    <hmi-element:table hmi-bind:auto-scroll="{ParamProps.AlwaysShowRecent}" hmi-bind:config="{ HmiProps }" hmi-bind:height="{Layout.ActualHeight}" hmi-bind:width="{Layout.ActualWidth}" start-x="0" start-y="0" hmi-bind:horizontal-scrollbar-visibility="{HmiProps.HorizontalScrollBarVisibility}"
                       hmi-bind:vertical-scrollbar-visibility="{HmiProps.VerticalScrollBarVisibility}">

      <!--Column Header-->
      <hmi-feature:header>
        <hmi:master-inline>
          <hmi:param name="Padding"   type="HmiPaddingPart"   hmi-bind:value="{ HmiProps.CellPadding }" />

          <hmi:template>
            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                xmlns:hmi="http://svg.siemens.com/hmi/"
                xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                height="10" width="10" id="ColumnHeaderSVG" >

              <hmi:self type="system:HmiHeaderCellSystemPart" displayName="ColumnHeader" name="columnheader" version="1.0.0" performanceClass="s">
                <hmi:paramDef name="Padding"          type="HmiPaddingPart" />
              </hmi:self>

              <defs>
                <hmi:localDef name="PaddingLeftRight"     type="number"     hmi-bind:value="{{ ( ParamProps.Padding.Left + ParamProps.Padding.Right ) }}" />
                <hmi:localDef name="ReducedWidth"         type="number"     hmi-bind:value="{{ ( HmiProps.Width - 30 ) }}"                                />
                <hmi:localDef name="ReducedHeight"        type="number"     hmi-bind:value="{{ ( HmiProps.Height / 2 ) }}"                                />
                <hmi:localDef name="PadLessWidth"         type="number"     hmi-bind:value="{{ HmiProps.Width - LocalProps.PaddingLeftRight }}"           />
              </defs>

              <g id="TIFID_ColumnHeaderGroup" opacity="1">
                <rect id="ColumnHeaderRect"
                               x="0"
                               y="0"
                               hmi-bind:width="{ HmiProps.Width }"
                               hmi-bind:height="{ HmiProps.Height }"
                               hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}"/>
                <hmi:include template="include.style.flat.content.svghmi" hmi-bind:for="{ HmiProps.Content }"
                             hmi-bind:x="{ ParamProps.Padding.Left }"
                             hmi-bind:y="{ ParamProps.Padding.Top }"
                             hmi-bind:width="{{ gt( HmiProps.SortDirection, 0 ) ? (lt( ( LocalProps.PadLessWidth - 40 ), 0 ) ? 0 : ( LocalProps.PadLessWidth - 40 )) : (lt( LocalProps.PadLessWidth, 0 ) ? 0 : LocalProps.PadLessWidth) }}"
                             hmi-bind:height="{{ HmiProps.Height - ParamProps.Padding.Bottom }}">
                  <hmi:param name="Graphic"         type="HmiGraphic"   hmi-bind:value="{ HmiProps.Graphic }"                                                                                         />
                  <hmi:param name="Text"            type="string"       hmi-bind:value="{{ Converter.IsNumber(HmiProps.Text) ? HmiProps.Text : ( HmiProps.Text ? HmiProps.Text : HmiProps.Name ) }}"  />
                  <hmi:param name="Font"            type="HmiFontPart"  hmi-bind:value="{ HmiProps.Font }"                                                                                            />
                  <hmi:param name="TextColor"       type="HmiColor"     hmi-bind:value="{ HmiProps.ForeColor }"                                                                                       />
                  <hmi:param name="GraphicWidth"    type="number"       hmi-bind:value="{ HmiProps.GraphicWidth }"                                                                                    />
                  <hmi:param name="GraphicHeight"   type="number"       hmi-bind:value="{ HmiProps.GraphicHeight }"                                                                                   />
                </hmi:include>
                <svg hmi-bind:x="{{ gt( LocalProps.ReducedWidth, 0 ) ? LocalProps.ReducedWidth : HmiProps.Width }}" hmi-bind:y="{ LocalProps.ReducedHeight }" hmi:if="{{ and( and( gt( HmiProps.SortOrder, 0 ), gt( HmiProps.SortDirection, 0 )), eq( HmiProps.AllowSort, true )) }}">
                  <path d="M 5 0 L0 10 L 10 10 z" hmi-bind:transform="rotate( {{eq( HmiProps.SortDirection, 2 ) ? 180 : 0}}, 5, 5)"></path>
                  <text   x="11" y="10" font-size="14" font-style="normal" font-weight="400" font-family="Siemens Sans"  >
                    <hmi:text hmi-bind:value="{ HmiProps.SortOrder }"/>
                  </text>
                </svg>
              </g>
            </svg>
          </hmi:template>
        </hmi:master-inline>

      </hmi-feature:header>

      <!--Row Headers-->
      <hmi-feature:recordHeader >
        <hmi:master-inline >
          <hmi:param name="Padding"   type="HmiPaddingPart"   hmi-bind:value="{ HmiProps.CellPadding }" />
          <hmi:template>
            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                xmlns:hmi="http://svg.siemens.com/hmi/"
                xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                xmlns:hmi-data-bind="http://svg.siemens.com/hmi/data/bind/"
                height="10" width="10" >
              <hmi:self type="system:HmiHeaderCellSystemPart" displayName="RowHeader" name="rowheader" version="1.0.0" performanceClass="s">
                <hmi:data type="header-view"></hmi:data>
                <hmi:paramDef name="Padding"      type="HmiPaddingPart" />
              </hmi:self>

              <g id="TIFID_RowHeaderGroup" opacity="1">
                <rect id="RowHeaderRect"
                               x="0"
                               y="0"
                               hmi-bind:width="{ HmiProps.Width }"
                               hmi-bind:height="{ HmiProps.Height }"
                               hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}"
                               />
                <hmi:include template="include.style.flat.text.svghmi"
                             hmi-bind:x="{ ParamProps.Padding.Left }"
                             hmi-bind:y="{ ParamProps.Padding.Top }"
                             hmi-bind:width="{{ HmiProps.Width - ( ParamProps.Padding.Right + ParamProps.Padding.Left ) }}"
                             hmi-bind:height="{{ HmiProps.Height - ParamProps.Padding.Bottom }}">
                  <hmi:param name="Text"                      type="string"                   hmi-data-bind:value="{ Content.Index }"                       />
                  <hmi:param name="Font"                      type="HmiFontPart"              hmi-bind:value="{ HmiProps.Font }"                            />
                  <hmi:param name="TextColor"                 type="HmiColor"                 hmi-bind:value="{ HmiProps.ForeColor }"                       />
                  <hmi:param name="HorizontalTextAlignment"   type="HmiHorizontalAlignment"   hmi-bind:value="{ HmiProps.Content.HorizontalTextAlignment }" />
                  <hmi:param name="VerticalTextAlignment"     type="HmiVerticalAlignment"     value="1"                                                     />


                </hmi:include>
              </g>
            </svg>
          </hmi:template>
        </hmi:master-inline>
      </hmi-feature:recordHeader>

      <hmi-feature:dataTemplates>
        <hmi:master-include template="include.style.flat.editabledatacell.svghmi">
          <hmi:param name="Padding"   type="HmiPaddingPart"   hmi-bind:value="{ HmiProps.CellPadding }" />
        </hmi:master-include>
      </hmi-feature:dataTemplates>

      <hmi-feature:rowBackground >
        <hmi:master-include template="include.style.flat.rowbackground.svghmi">
        </hmi:master-include>
      </hmi-feature:rowBackground>

      <hmi-feature:columnBackground >
        <hmi:master-include template="include.style.flat.columnbackground.svghmi">
        </hmi:master-include>
      </hmi-feature:columnBackground>

      <!--Grid lines-->
      <hmi-feature:gridlines>
        <hmi-feature:gridline
          position-filter="header" expansion="header inner"
          hmi-bind:stroke-width="{ HmiProps.GridLineWidth }"
          hmi-bind:stroke="{{ Converter.RGBA(  HmiProps.HeaderSettings.HeaderGridLineColor ) }}"
          orientation="row column">
        </hmi-feature:gridline>
        <hmi-feature:gridline
          position-filter="inner" expansion="header"
          hmi-bind:stroke-width="{ HmiProps.GridLineWidth }"
          hmi-bind:stroke="{{ Converter.RGBA(  HmiProps.HeaderSettings.HeaderGridLineColor ) }}"
          orientation="row column">
        </hmi-feature:gridline>
        <hmi-feature:gridline
          position-filter="inner" expansion="inner"
          hmi-bind:stroke-width="{ HmiProps.GridLineWidth }"
           hmi-bind:stroke="{{ HmiProps.GridLineVisibility == 0 ? 'rgba(0,0,0,0)' : Converter.RGBA(  HmiProps.GridLineColor ) }}"
          hmi-bind:orientation="{{ HmiProps.GridLineVisibility == 3 ? 'row column' : ( HmiProps.GridLineVisibility == 2 ? 'column':'row') }}">
        </hmi-feature:gridline>
      </hmi-feature:gridlines>

      <hmi-feature:selection>
        <hmi:master-inline >
          <hmi:template>
            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                xmlns:hmi="http://svg.siemens.com/hmi/"
                xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                height="10" width="10" >
              <hmi:self type="system:HmiSelectionSystemPart" displayName="SelectionBorder" name="selectionborder" version="1.0.0" performanceClass="s">
              </hmi:self>

              <g id="TIFID_SelectionRect" opacity="1">
                <rect id="ItemBGRect3"
                    hmi-bind:x="{{ HmiProps.BorderWidth / 2 }}"
                    hmi-bind:y="{{ HmiProps.BorderWidth / 2 }}"
                    hmi-bind:width="{ HmiProps.Width}"
                    hmi-bind:height="{ HmiProps.Height }"
                    fill="none"
                    hmi-bind:stroke-width="{ HmiProps.BorderWidth }"
                    hmi-bind:stroke="{{Converter.RGBA(HmiProps.BorderColor)}}"/>
              </g>
            </svg>
          </hmi:template>
        </hmi:master-inline>
      </hmi-feature:selection>
    </hmi-element:table>

    <rect id="ItemBGRect"
          hmi-bind:x="{{ LocalProps.BorderWidth / 2 }}"
          hmi-bind:y="{{ LocalProps.BorderWidth / 2 }}"
          hmi-bind:width="{{ Layout.ActualWidth - LocalProps.BorderWidth }}"
          hmi-bind:height="{{ Layout.ActualHeight - LocalProps.BorderWidth }}"
          fill="none"
          hmi-bind:stroke-width="{{ LocalProps.ShowFocus ? 4 : 0 }}"
          hmi-bind:stroke="{{ LocalProps.ShowFocus ? ParamProps.FocusColor : 'black' }}"/>
  </g>
</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2023. All Rights Reserved. -->
<svg xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:hmi="http://svg.siemens.com/hmi/"
    xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
    xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
    preserveAspectRatio="none"
    overflow="visible" >
    <hmi:self type="item:HmiProcessDiagnosisCriteriaAnalysisControl" displayName="CriteriaAnalysisControl" name="style.flat.processdiagnosiscriteriaanalysiscontrol" version="2.9" performanceClass="L"  >
        <hmi:focus focusVisual="local" />
    </hmi:self>
    <defs>
        
        <hmi:localDef name="SYS_WindowBorderColor"          type="number"       value="0xFF91939A" />
        <hmi:localDef name="SYS_WindowBorderWidth"          type="number"       value="2"   />
        <hmi:localDef name="SYS_RX"                         type="number"       value="0"   />
        <hmi:localDef name="SYS_CaptionHeight"              type="number"       value="30"  />
        <hmi:localDef name="ShowFocus"                      type="boolean"      hmi-bind:value="{{ and( HmiProps.ShowFocusVisual, SysProps.HasFocus ) }}" />
        <hmi:localDef name="CaptionColor"                   type="number"       hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : HmiProps.CaptionColor }}" />
        <hmi:localDef name="ShowCaption"                    type="boolean"      hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowCaption ) }}" />
        <hmi:localDef name="CaptionHeight"                  type="number"       hmi-bind:value="{{ LocalProps.ShowCaption ? LocalProps.SYS_CaptionHeight : 0 }}" />
        <hmi:localDef name="WindowBorderColor"              type="number"       hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : LocalProps.SYS_WindowBorderColor }}" />
        <hmi:localDef name="WindowBorderWidth"              type="number"       hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowBorder ) ? LocalProps.SYS_WindowBorderWidth : 0 }}" />
        <hmi:localDef name="FocusColor"                     type="string"       hmi-bind:value="{{ Converter.RGBA( HmiProps.FocusColor ) }}" />
        <hmi:localDef name="MinimumWidth"                   type="number"       value="100" />
        <hmi:localDef name="MinimumHeight"                  type="number"       value="60"  />
        <clipPath id="WindowClipRect">
            <rect id="ItemRect"
                  hmi-bind:width="{ HmiProps.Width }"
                  hmi-bind:height="{ HmiProps.Height }"
                  stroke="none"
                  hmi-bind:rx="{ LocalProps.SYS_RX }" />
        </clipPath>
    </defs>
    <g id="ElementsGroup" clip-path="url(#WindowClipRect)">
        <!-- Background -->
        <rect id="BackGroundRect"
              hmi-bind:width="{ HmiProps.Width }"
              hmi-bind:height="{ HmiProps.Height }"
              hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}"
              stroke="none"
              hmi-bind:rx="{ LocalProps.SYS_RX }" />
		
		<g id ="SubTemplate"  >
            <hmi:include template ="include.style.flat.criteriaanalysiscontent.default.svghmi" hmi-bind:for="{ HmiProps.CriteriaAnalysisView }"
                          hmi-bind:x="{ LocalProps.WindowBorderWidth }"
                          hmi-bind:y="{{ LocalProps.WindowBorderWidth + LocalProps.CaptionHeight }}"
                          hmi-bind:width="{{ HmiProps.Width - 2 * LocalProps.WindowBorderWidth }}"
                          hmi-bind:height="{{ HmiProps.Height - 2 * LocalProps.WindowBorderWidth - LocalProps.CaptionHeight  }}" >
                <hmi:param name="AlwaysShowRecent"  type="boolean"      value="false"                               />
                <hmi:param name="FocusColor"        type="string"       hmi-bind:value="{ LocalProps.FocusColor }"  />
                <hmi:param name="ShowFocusVisual"   type="boolean"      hmi-bind:value="{ HmiProps.ShowFocusVisual }"    />
            </hmi:include>
        </g> 
    </g>
	
	
	  <!-- Frame -->
	  <g id="frame" >
    <hmi:include template="include.style.flat.hmiwindowframe.default.svghmi"
                 x="0"
                 y="0"
                 hmi-bind:width="{ HmiProps.Width }"
                 hmi-bind:height="{ HmiProps.Height }" >

        <hmi:param name="Top"               type="number"           hmi-bind:value="{ HmiProps.Top }"                 />
        <hmi:param name="Left"              type="number"           hmi-bind:value="{ HmiProps.Left }"                />
        <hmi:param name="Width"             type="number"           hmi-bind:value="{ HmiProps.Width }"               />
        <hmi:param name="Height"            type="number"           hmi-bind:value="{ HmiProps.Height }"              />
        <hmi:param name="WindowFlags"       type="HmiWindowFlag"    hmi-bind:value="{ HmiProps.WindowFlags }"         />
        <hmi:param name="MinimumWidth"      type="number"           hmi-bind:value="{ LocalProps.MinimumWidth }"      />
        <hmi:param name="MinimumHeight"     type="number"           hmi-bind:value="{ LocalProps.MinimumHeight }"     />
        <hmi:param name="Icon"              type="HmiGraphic"       hmi-bind:value="{ HmiProps.Icon }"                />
        <hmi:param name="Caption"           type="HmiTextPart"      hmi-bind:value="{ HmiProps.Caption }"             />
        <hmi:param name="CaptionColor"      type="HmiColor"         hmi-bind:value="{ LocalProps.CaptionColor }"      />
        <hmi:param name="ShowCaption"       type="boolean"          hmi-bind:value="{ LocalProps.ShowCaption }"       />
        <hmi:param name="CaptionHeight"     type="number"           hmi-bind:value="{ LocalProps.CaptionHeight }"     />
        <hmi:param name="WindowBorderWidth" type="number"           hmi-bind:value="{ LocalProps.WindowBorderWidth }" />
        <hmi:param name="WindowBorderColor" type="HmiColor"         hmi-bind:value="{ LocalProps.WindowBorderColor }" />
        <hmi:param name="RX"                type="number"           hmi-bind:value="{ LocalProps.SYS_RX }"            />
        <hmi:param name="ItemOperable"      type="boolean"          hmi-bind:value="{ HmiProps.Enabled }"             />
        <hmi:param name="WindowState"       type="number"           hmi-bind:value="{ HmiProps.WindowState }"         />

    </hmi:include>
	</g>
</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2022. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:hmi="http://svg.siemens.com/hmi/"
    xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
    xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
    preserveAspectRatio="none"
    overflow="visible" >

    <hmi:self type="item:HmiProcessDiagnosisGraphOverviewControl" displayName="Flat GraphOverviewControl" name="style.flat.processdiagnosisgraphoverviewcontrol" version="2.8" performanceClass="L"  >
        <hmi:focus focusVisual="local" />
    </hmi:self>

    <defs>
        <!-- System definitions of this template -->
        <hmi:localDef name="SYS_WindowBorderColor"          type="number"       value="0xFF91939A" />
        <hmi:localDef name="SYS_WindowBorderWidth"          type="number"       value="2"   />
        <hmi:localDef name="SYS_RX"                         type="number"       value="5"   />
        <hmi:localDef name="SYS_CaptionHeight"              type="number"       value="30"  />
        
        <hmi:localDef name="MinimumWidth"                   type="number"       value="100" />
        <hmi:localDef name="MinimumHeight"                  type="number"       value="60"  />

        <hmi:localDef name="ShowFocus"                      type="boolean"      hmi-bind:value="{{ and( HmiProps.ShowFocusVisual, SysProps.HasFocus ) }}" />
        <hmi:localDef name="ShowCaption"                    type="boolean"      hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowCaption ) }}" />
        <hmi:localDef name="CaptionHeight"                  type="number"       hmi-bind:value="{{ LocalProps.ShowCaption ? LocalProps.SYS_CaptionHeight : 0 }}" />
        <hmi:localDef name="CaptionColor"                   type="number"       hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : HmiProps.CaptionColor}}" />
        <hmi:localDef name="WindowBorderColor"              type="number"       hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : LocalProps.SYS_WindowBorderColor }}" />
        <hmi:localDef name="WindowBorderWidth"              type="number"       hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowBorder ) ? LocalProps.SYS_WindowBorderWidth : 0 }}" />
        <hmi:localDef name="WindowInnerWidth"               type="number"       hmi-bind:value="{{ HmiProps.Width - 2 * LocalProps.WindowBorderWidth }}" />
        <hmi:localDef name="CaptionHeightPadding"           type="number"       hmi-bind:value="{{ LocalProps.WindowBorderWidth + LocalProps.CaptionHeight }}" />
        <hmi:localDef name="PaddedWindowBorderWidth"        type="number"       hmi-bind:value="{{ 2 * LocalProps.WindowBorderWidth }}" />
        <hmi:localDef name="WindowHeightWithoutCaption"     type="number"       hmi-bind:value="{{ HmiProps.Height - LocalProps.CaptionHeightPadding }}" />
        
       <!-- Definition of ToolBar properties -->
        <hmi:localDef name="TestToolBar"                    type="number"       hmi-bind:value="{ HmiProps.ToolBar.Height }" />
        <hmi:localDef name="TestToolBarHeight"              type="number"       hmi-bind:value="{{ ( LocalProps.TestToolBar == null ) ? 0 : HmiProps.ToolBar.Height }}" />
        <hmi:localDef name="HasToolBar"                     type="boolean"      hmi-bind:value="{{ ( LocalProps.TestToolBar == null ) ? false : true }}" />
        <hmi:localDef name="ToolBarHeight"                  type="number"       hmi-bind:value="{{ ( LocalProps.HasToolBar ) ? LocalProps.TestToolBarHeight : 0 }}" />
        <hmi:localDef name="ToolBarPosition"                type="number"       value="1" />
        <hmi:localDef name="ToolBarVisibility"              type="boolean"      hmi-bind:value="{{ LocalProps.HasToolBar ? HmiProps.ToolBar.Visible : false }}" />
        <hmi:localDef name="ToolBarElementsCount"           type="number"       hmi-bind:value="{{ Converter.CountVisibleItems( HmiProps.ToolBar.Elements )}}" />
        <hmi:localDef name="HasToolBarElements"             type="boolean"      hmi-bind:value="{{ LocalProps.HasToolBar ? ( LocalProps.ToolBarElementsCount ? true : false ) : false }}" />
        <hmi:localDef name="ToolBarVisible"                 type="boolean"      hmi-bind:value="{{ ( not( and( LocalProps.ToolBarVisibility, LocalProps.HasToolBarElements ) ) ) ? false : ( or ( ( LocalProps.WindowInnerWidth == 0 ), ( LocalProps.ToolBarHeight == 0 ) ) ? false : true ) }}" />
        <hmi:localDef name="ActualToolBarWidth"             type="number"       hmi-bind:value="{{ LocalProps.ToolBarVisible ? ( (LocalProps.ToolBarElementsCount * 42) + (le(LocalProps.ToolBarElementsCount, 2) ? 20 : (LocalProps.ToolBarElementsCount * 7))) : 0 }}" />

        <!-- Definition of StatusBar properties -->
        <hmi:localDef name="HasStatusBar"                   type="boolean"      hmi-bind:value="{{ HmiProps.StatusBar.Visible }}" />
        <hmi:localDef name="StatusBarHeight"                type="number"       hmi-bind:value="{{ LocalProps.HasStatusBar ? HmiProps.StatusBar.Height : 0 }}" />
        <hmi:localDef name="StatusBarWidth"                 type="number"       hmi-bind:value="{{ HmiProps.Width - 2 * LocalProps.WindowBorderWidth }}" />
        <hmi:localDef name="StatusBarTop"                   type="number"       hmi-bind:value="{{ HmiProps.Height - LocalProps.StatusBarHeight - LocalProps.WindowBorderWidth }}" />
        <hmi:localDef name="StatusBarLeft"                  type="number"       hmi-bind:value="{{ LocalProps.WindowBorderWidth }}" />
        <hmi:localDef name="StatusBarFont"                  type="HmiFontPart"  hmi-bind:value="{{ HmiProps.StatusBar.Font }}" />
        <hmi:localDef name="StatusBarTextX"                 type="number"       value="15" />
        <hmi:localDef name="StatusBarTextY"                 type="number"       hmi-bind:value="{{ LocalProps.StatusBarTop + (LocalProps.StatusBarHeight - LocalProps.StatusBarFont.Size) / 2 + LocalProps.StatusBarFont.Size / 2  }}" />

        <!-- Position and Extent related properties of the content -->
        <hmi:localDef name="SmallHeight"                    type="number"       value = "77" />
        <hmi:localDef name="MediumHeight"                   type="number"       value = "120" />
        <hmi:localDef name="ErrorIcon"                      type="string"       hmi-bind:value="{ HmiProps.Icon }" />
        <hmi:localDef name="SingleLineViewer"               type="boolean"      hmi-bind:value="{{ le(LocalProps.WindowHeightWithoutCaption, LocalProps.SmallHeight ) ? true : false }}" />
        <hmi:localDef name="ListcontainerHeight"            type="number"       hmi-bind:value="{{ lt(LocalProps.WindowHeightWithoutCaption, LocalProps.MediumHeight ) ? ( LocalProps.WindowHeightWithoutCaption/2 ): 60 }} " />
        <hmi:localDef name="FocusColor"                     type="string"       hmi-bind:value="{{ Converter.RGBA( HmiProps.FocusColor ) }}" />
        <hmi:localDef name="BackColor"                      type="string"       hmi-bind:value="{{ Converter.RGBA( HmiProps.BackColor ) }}" />
        <hmi:localDef name="ForeColor"                      type="string"       hmi-bind:value="{{ Converter.RGBA( HmiProps.ForeColor ) }}" />
        <hmi:localDef name="GridLineColor"                  type="string"       hmi-bind:value="{{ Converter.RGBA( HmiProps.GridLineColor ) }}" />
        <hmi:localDef name="StepListWidth"                  type="number"       hmi-bind:value="{{ LocalProps.WindowInnerWidth - LocalProps.ActualToolBarWidth }}" />
        <hmi:localDef name="Grid_Y"                         type="number"       hmi-bind:value="{{ le(LocalProps.WindowHeightWithoutCaption, LocalProps.SmallHeight ) ? (LocalProps.CaptionHeightPadding - LocalProps.SYS_WindowBorderWidth): (LocalProps.CaptionHeightPadding + LocalProps.ListcontainerHeight - LocalProps.SYS_WindowBorderWidth) }}"  />
        <hmi:localDef name="Grid_Width"                     type="number"       hmi-bind:value="{{ or(LocalProps.SingleLineViewer, ge(LocalProps.WindowHeightWithoutCaption, LocalProps.MediumHeight ) ) ? (LocalProps.WindowInnerWidth) : (LocalProps.StepListWidth) }}"  />
        <hmi:localDef name="GridHeight"                     type="number"       hmi-bind:value="{{ (le(LocalProps.WindowHeightWithoutCaption, LocalProps.SmallHeight ) ? LocalProps.WindowHeightWithoutCaption : (LocalProps.WindowHeightWithoutCaption - LocalProps.ListcontainerHeight)) - LocalProps.StatusBarHeight }}"/>

        <clipPath id="WindowClipRect">
            <rect id="ItemRect"
                  hmi-bind:width="{ HmiProps.Width }"
                  hmi-bind:height="{ HmiProps.Height }"
                  stroke="none"
                  hmi-bind:rx="{ LocalProps.SYS_RX }" />
        </clipPath>
        <clipPath id="StepClipRect">
            <rect id="StepRect" hmi-bind:width="{LocalProps.StepListWidth}" height="67"
                hmi-bind:fill="{ LocalProps.BackColor }" hmi-bind:x="{ LocalProps.WindowBorderWidth }"
                hmi-bind:y="{ LocalProps.CaptionHeightPadding }"
                stroke="none"/>
        </clipPath>
    </defs>

    <g id="ElementsGroup" clip-path="url(#WindowClipRect)">
        <!-- Background -->
        <rect id="BackGroundRect"
              hmi-bind:width="{ HmiProps.Width }"
              hmi-bind:height="{ HmiProps.Height }"
              hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}"
              stroke="none"
              hmi-bind:rx="{ LocalProps.SYS_RX }" />
        
        <!-- StepData -->
        <g id="StepsGroup" clip-path="url(#StepClipRect)" hmi:if="{{ not(LocalProps.SingleLineViewer) }}">
            <hmi:include template="include.style.flat.graphoverviewstep.svghmi" hmi-bind:for="{{ HmiProps.GraphOverview }}"
                        hmi-bind:x="{ LocalProps.WindowBorderWidth }" hmi-bind:y="{ LocalProps.CaptionHeightPadding }"
                        hmi-bind:width="{LocalProps.StepListWidth}" hmi-bind:height="{{LocalProps.ListcontainerHeight}}">

                <hmi:param name="FocusColor"                type="HmiColor"     hmi-bind:value="{ LocalProps.FocusColor }" />
                <hmi:param name="ForeColor"                 type="HmiColor"     hmi-bind:value="{ LocalProps.ForeColor }" />
                <hmi:param name="BackColor"                 type="HmiColor"     hmi-bind:value="{ HmiProps.BackColor }" />
                <hmi:param name="Font"                      type="HmiFontPart"  hmi-bind:value="{ HmiProps.Font }" />
                <hmi:param name="GridLineColor"             type="HmiColor"     hmi-bind:value="{ LocalProps.GridLineColor }" />
                <hmi:param name="OperationMode"             type="boolean"      hmi-bind:value="{ HmiProps.OperationMode }" />
                <hmi:param name="Width"                     type="number"       hmi-bind:value="{ LocalProps.StepListWidth }" />
                <hmi:param name="Height"                    type="number"       hmi-bind:value="{{ LocalProps.ListcontainerHeight}}" />
            </hmi:include>
        </g>

        <!-- ToolBar -->
        <g hmi:if="{{ and(LocalProps.HasToolBar, not(LocalProps.SingleLineViewer)) }}" id="ToolBar">
            <hmi:include template="include.style.flat.graphoverviewtoolbar.svghmi" hmi-bind:for="{ HmiProps.ToolBar }"
                            hmi-bind:x="{{LocalProps.StepListWidth + 2}}"
                            hmi-bind:y="{{lt(LocalProps.WindowHeightWithoutCaption, 120 ) ? (((LocalProps.WindowHeightWithoutCaption/2) - 35) + LocalProps.SYS_CaptionHeight) : (LocalProps.CaptionHeightPadding - 4) }}"
                            hmi-bind:width="{ LocalProps.ActualToolBarWidth }"
                            hmi-bind:height="{{ LocalProps.ToolBarHeight }}">

                <hmi:param name="Width"             type="number"       hmi-bind:value="{{ LocalProps.ActualToolBarWidth + 18}}"/>
                <hmi:param name="Height"            type="number"       hmi-bind:value="{{ LocalProps.ToolBarHeight }}" />
                <hmi:param name="BarPosition"       type="number"       hmi-bind:value="{ LocalProps.ToolBarPosition }" />
                <hmi:param name="ItemOperable"      type="boolean"      hmi-bind:value="{ HmiProps.Enabled }" />
                <hmi:param name="FocusColor"        type="string"       hmi-bind:value="{ LocalProps.FocusColor }" />
                <hmi:param name="ShowFocusVisual"   type="boolean"      hmi-bind:value="{ HmiProps.ShowFocusVisual }"   />
            </hmi:include>
        </g>

        <!-- Grid Content -->
        <g>
            <hmi:include template="include.style.flat.graphoverviewcontent.svghmi"  hmi-bind:for="{{ HmiProps.GraphOverview }}"
                        hmi-bind:x="{ LocalProps.WindowBorderWidth }"
                        hmi-bind:y="{{ LocalProps.Grid_Y }}"
                        hmi-bind:width ="{{ LocalProps.Grid_Width }}"
                        hmi-bind:height="{{ LocalProps.GridHeight }}" >

                <hmi:param name="FocusColor"                type="string"       hmi-bind:value="{ LocalProps.FocusColor }" />
                <hmi:param name="ShowFocusVisual"           type="boolean"      hmi-bind:value="{ HmiProps.ShowFocusVisual }" />
                <hmi:param name="WindowInnerWidth"          type="number"       hmi-bind:value="{ LocalProps.Grid_Width }" />
                <hmi:param name="CaptionColor"              type="string"       hmi-bind:value="{ HmiProps.CaptionColor }" />
                <hmi:param name="Font"                      type="HmiFontPart"  hmi-bind:value="{ HmiProps.Font }" />
                <hmi:param name="ResourceList"              type="string"       value="" />
                <hmi:param name="PropNameText"              type="string"       value="Name" />
                <hmi:param name="HeightValue"              	type="number"       hmi-bind:value="{{ LocalProps.GridHeight }}" />
            </hmi:include>
        </g>

        <!-- Status Bar -->
        <g hmi:if="{ LocalProps.HasStatusBar }" id="StatusBarElement">
            <hmi:include template="include.style.flat.statusbar.default.svghmi" hmi-bind:for="{ HmiProps.StatusBar }"
                       hmi-bind:x="{ LocalProps.WindowBorderWidth }"
                       hmi-bind:y="{ LocalProps.StatusBarTop }"
                       hmi-bind:width="{ LocalProps.StatusBarWidth }"
                       hmi-bind:height="{ LocalProps.StatusBarHeight }">

                    <hmi:param name="Width"           type="number"   hmi-bind:value="{ LocalProps.StatusBarWidth }"  />
                    <hmi:param name="Height"          type="number"   hmi-bind:value="{ LocalProps.StatusBarHeight }" />
                    <hmi:param name="ItemOperable"    type="boolean"  hmi-bind:value="{ HmiProps.Enabled }"           />
                    <hmi:param name="FocusColor"      type="string"   hmi-bind:value="{ LocalProps.FocusColor }"      />
                    <hmi:param name="ShowFocusVisual" type="boolean"  hmi-bind:value="{ HmiProps.ShowFocusVisual }"   />

            </hmi:include>
        </g>
    </g>
    <!-- Frame -->
    <hmi:include template="include.style.flat.hmiwindowframe.default.svghmi"
                    x="0"
                    y="0"
                    hmi-bind:width="{ HmiProps.Width }"
                    hmi-bind:height="{ HmiProps.Height }" >

        <hmi:param name="Top"               type="number"           hmi-bind:value="{ HmiProps.Top }"                   />
        <hmi:param name="Left"              type="number"           hmi-bind:value="{ HmiProps.Left }"                  />
        <hmi:param name="Width"             type="number"           hmi-bind:value="{ HmiProps.Width }"                 />
        <hmi:param name="Height"            type="number"           hmi-bind:value="{ HmiProps.Height }"                />
        <hmi:param name="WindowFlags"       type="HmiWindowFlag"    hmi-bind:value="{ HmiProps.WindowFlags }"           />
        <hmi:param name="MinimumWidth"      type="number"           hmi-bind:value="{ LocalProps.MinimumWidth }"        />
        <hmi:param name="MinimumHeight"     type="number"           hmi-bind:value="{ LocalProps.MinimumHeight }"       />
        <hmi:param name="Icon"              type="HmiGraphic"       hmi-bind:value="{ LocalProps.ErrorIcon }"           />
        <hmi:param name="Caption"           type="HmiTextPart"      hmi-bind:value="{ HmiProps.Caption }"               />
        <hmi:param name="CaptionColor"      type="HmiColor"         hmi-bind:value="{ LocalProps.CaptionColor }"        />
        <hmi:param name="ShowCaption"       type="boolean"          hmi-bind:value="{ LocalProps.ShowCaption }"         />
        <hmi:param name="CaptionHeight"     type="number"           hmi-bind:value="{ LocalProps.CaptionHeight }"       />
        <hmi:param name="WindowBorderWidth" type="number"           hmi-bind:value="{ LocalProps.WindowBorderWidth }"   />
        <hmi:param name="WindowBorderColor" type="HmiColor"         hmi-bind:value="{ LocalProps.WindowBorderColor }"   />
        <hmi:param name="RX"                type="number"           hmi-bind:value="{ LocalProps.SYS_RX }"              />
        <hmi:param name="ItemOperable"      type="boolean"          hmi-bind:value="{ HmiProps.Enabled }"               />
        <hmi:param name="WindowState"       type="number"           hmi-bind:value="{ HmiProps.WindowState }" />
    </hmi:include>
</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2022. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:hmi="http://svg.siemens.com/hmi/"
    xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
    xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
    xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
    xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
    xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/"
    xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
    preserveAspectRatio="none"
    overflow="visible" >

    <hmi:self type="item:HmiProcessDiagnosisOverviewControl" displayName="Flat ProcessDiagnosisOverviewControl" name="style.flat.processdiagnosisoverviewcontrol" version="1.0" performanceClass="L"  >
        <hmi:focus focusVisual="local" />
    </hmi:self>
    <defs>
        <!-- System definitions of this template -->
        <hmi:localDef name="SYS_WindowBorderColor"          type="number"       value="0xFF91939A" />
        <hmi:localDef name="SYS_WindowBorderWidth"          type="number"       value="2"   />
        <hmi:localDef name="SYS_RX"                         type="number"       value="0"   />
        <hmi:localDef name="SYS_CaptionHeight"              type="number"       value="30"  />
        <hmi:localDef name="MinimumWidth"                   type="number"       value="100" />
        <hmi:localDef name="MinimumHeight"                  type="number"       value="140" />
		<hmi:localDef name="LineWidth"                      type="number"       value="2"   />
		
        <hmi:localDef name="ErrorIcon"                      type="HmiGraphic"   hmi-bind:value="{ HmiProps.Icon }" />
        <hmi:localDef name="ShowFocus"                      type="boolean"      hmi-bind:value="{{ and( HmiProps.ShowFocusVisual, SysProps.HasFocus ) }}" />
        <hmi:localDef name="ShowCaption"                    type="boolean"      hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowCaption ) }}" />
        <hmi:localDef name="CaptionHeight"                  type="number"       hmi-bind:value="{{ LocalProps.ShowCaption ? LocalProps.SYS_CaptionHeight : 0 }}" />
        <hmi:localDef name="CaptionColor"                   type="number"       hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : HmiProps.CaptionColor }}" />
        <hmi:localDef name="WindowBorderColor"              type="number"       hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : LocalProps.SYS_WindowBorderColor }}" />
        <hmi:localDef name="WindowBorderWidth"              type="number"       hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowBorder ) ? LocalProps.SYS_WindowBorderWidth : 0 }}" />
        <hmi:localDef name="WindowInnerWidth"               type="number"       hmi-bind:value="{{ HmiProps.Width - 2 * LocalProps.WindowBorderWidth }}" />
        <hmi:localDef name="BackColor"                      type="string"       hmi-bind:value="{{ Converter.RGBA( HmiProps.BackColor ) }}" />
        <hmi:localDef name="ForeColor"                      type="string"       hmi-bind:value="{{ Converter.RGBA( HmiProps.ForeColor ) }}" />
        <hmi:localDef name="FocusColor"                     type="string"       hmi-bind:value="{{ Converter.RGBA( HmiProps.FocusColor ) }}" />
        <hmi:localDef name="TileMinHeight"                  type="number"       value="30"  />
        <hmi:localDef name="TileMinWidth"                   type="number"       value="30"  />
        <hmi:localDef name="CatagoriesSource"               type="number"       value="1"   />
        <hmi:localDef name="TypeSource"                     type="number"       value="2"   />
        <hmi:localDef name="ContentWidth"                   type="number"       value="0"   />
        <hmi:localDef name="TileMinimumWidth"               type="number"       value="30"  />
        <hmi:localDef name="MaxLabelWidth"                  type="number"       value="76"  />
        <hmi:localDef name="Defaultpadding"                 type="number"       value="8"   />
		<hmi:localDef name="DefaultControlWidth"            type="number"       value="450" />
		<hmi:localDef name="WindowBorderPadding"            type="number"       value="6"   />
        <hmi:localDef name="ToolBarWidth"                   type="number"       value="60"  />
		

        <!-- Definition of ToolBar properties -->
        <hmi:localDef name="TestToolBar"                    type="number"       hmi-bind:value="{ HmiProps.ToolBar.Height }" />
        <hmi:localDef name="TestToolBarVisibility"          type="boolean"      hmi-bind:value="{{ ( LocalProps.TestToolBar == null ) ? false : HmiProps.ToolBar.Visible }}" />
        <hmi:localDef name="TestToolBarElements"            type="boolean"      hmi-bind:value="{{ ( Converter.CountItems( HmiProps.ToolBar.Elements ) ) ? true : false }}" />
        <hmi:localDef name="TestToolBarHeight"              type="number"       hmi-bind:value="{{ ( LocalProps.TestToolBar == null ) ? 0 : HmiProps.ToolBar.Height }}" />
        <hmi:localDef name="HasToolBar"                     type="boolean"      hmi-bind:value="{{ ( LocalProps.TestToolBar == null ) ? false : true }}" />
        <hmi:localDef name="ToolBarHeight"                  type="number"       hmi-bind:value="{{ ( LocalProps.HasToolBar ) ? LocalProps.TestToolBarHeight : 0 }}" />
        <hmi:localDef name="ToolBarPosition"                type="number"       value="1" />
        <hmi:localDef name="ToolBarVisibility"              type="boolean"      hmi-bind:value="{{ LocalProps.HasToolBar ? HmiProps.ToolBar.Visible : false }}" />
        <hmi:localDef name="ToolBarElementsCount"           type="number"       hmi-bind:value="{{ Converter.CountItems( HmiProps.ToolBar.Elements )}}" />
        <hmi:localDef name="HasToolBarElements"             type="boolean"      hmi-bind:value="{{ LocalProps.HasToolBar ? ( LocalProps.ToolBarElementsCount ? true : false ) : false }}" />
        <hmi:localDef name="ToolBarVisible"                 type="boolean"      hmi-bind:value="{{ ( not( and( LocalProps.ToolBarVisibility, LocalProps.HasToolBarElements ) ) ) ? false : ( or ( ( LocalProps.WindowInnerWidth == 0 ), ( LocalProps.ToolBarHeight == 0 ) ) ? false : true ) }}" />
        <hmi:localDef name="ActualToolBarWidth"             type="number"       hmi-bind:value="{{ LocalProps.ToolBarVisible ? LocalProps.ToolBarWidth : 0 }}" />

        <!-- Definition of StatusBar properties -->
        <hmi:localDef name="TestStatusBar"                  type="number"       hmi-bind:value="{ HmiProps.StatusBar.Height }" />
        <hmi:localDef name="TestStatusBarElements"          type="boolean"      hmi-bind:value="{{ ( Converter.CountItems( HmiProps.StatusBar.Elements ) ) ? true : false }}" />
        <hmi:localDef name="TestStatusBarHeight"            type="number"       hmi-bind:value="{{ ( LocalProps.TestStatusBar == null ) ? 0 : HmiProps.StatusBar.Height }}" />
        <hmi:localDef name="HasStatusBar"                   type="boolean"      hmi-bind:value="{{ ( LocalProps.TestStatusBar == null ) ? false : true }}" />
        <hmi:localDef name="StatusBarHeight"                type="number"       hmi-bind:value="{{ ( LocalProps.HasStatusBar ) ? LocalProps.TestStatusBarHeight : 0 }}" />
        <hmi:localDef name="StatusBarVisibility"            type="boolean"      hmi-bind:value="{{ ( LocalProps.TestStatusBar == null ) ? false : HmiProps.StatusBar.Visible }}" />
        <hmi:localDef name="HasStatusBarElements"           type="boolean"      hmi-bind:value="{{ ( LocalProps.HasStatusBar ) ? LocalProps.TestStatusBarElements : false }}" />
        <hmi:localDef name="StatusBarWidth"                 type="number"       hmi-bind:value="{ LocalProps.WindowInnerWidth }" />
        <hmi:localDef name="StatusBarVisible"               type="boolean"      hmi-bind:value="{{ ( not( and( LocalProps.StatusBarVisibility, LocalProps.HasStatusBarElements ) ) ) ? false : ( or( ( LocalProps.StatusBarWidth == 0 ), ( LocalProps.StatusBarHeight == 0 ) ) ? false : true ) }}" />
        <hmi:localDef name="StatusBarTop"                   type="number"       hmi-bind:value="{{ HmiProps.Height - LocalProps.WindowBorderWidth - LocalProps.StatusBarHeight }}" />

        <hmi:localDef name="CategoryLabel"                  type="boolean"      hmi-bind:value="{{ HmiProps.PDiagCategories.Label.Visible ? true : false }}"/>
        <hmi:localDef name="TypeLabel"                      type="boolean"      hmi-bind:value="{{ HmiProps.PDiagSupervisionTypes.Label.Visible ? true : false }}"/>
        <hmi:localDef name="LabelVisibilty"                 type="boolean"      hmi-bind:value="{{ or(LocalProps.CategoryLabel, LocalProps.TypeLabel ) }}"/>
        <hmi:localDef name="CategoryWidth"                  type="number"       hmi-bind:value="{{ Converter.TextWidth( HmiProps.PDiagCategories.Label.Text , HmiProps.PDiagCategories.Label.Font , true) }}" />
        <hmi:localDef name="TypeWidth"                      type="number"       hmi-bind:value="{{ Converter.TextWidth( HmiProps.PDiagSupervisionTypes.Label.Text , HmiProps.PDiagSupervisionTypes.Label.Font , true) }}" />
        <hmi:localDef name ="CategoryTextWidth"             type="number"       hmi-bind:value="{{ gt( LocalProps.CategoryWidth, 0 ) ? 1 : 0 }}"/>
        <hmi:localDef name ="LabelTextWidth"                type="number"       hmi-bind:value="{{ gt( LocalProps.TypeWidth, 0 ) ? 1 : 0 }}"/>
		<hmi:localDef name ="ControlWidthDifference"        type="number"       hmi-bind:value="{{ lt( HmiProps.Width, LocalProps.DefaultControlWidth ) ? LocalProps.DefaultControlWidth - HmiProps.Width : HmiProps.Width }}"/>
		<hmi:localDef name = "LabelWidthDifference"         type="number"       hmi-bind:value ="{{ ge(HmiProps.Width, LocalProps.DefaultControlWidth) ? LocalProps.MaxLabelWidth : le( LocalProps.ControlWidthDifference , LocalProps.MaxLabelWidth ) ? LocalProps.MaxLabelWidth - LocalProps.ControlWidthDifference : 0 }}" />
        <hmi:localDef name ="TotalCount"                    type="number"       hmi-bind:value="{{ LocalProps.CategoryTextWidth + LocalProps.LabelTextWidth }}"/>
		<hmi:localDef name ="LabelWidth"                    type="number"       hmi-bind:value="{{ gt(LocalProps.TotalCount, 1 ) ? LocalProps.LabelWidthDifference : 0 }}"/>
		
        <hmi:localDef name="ListContainerWidth"             type="number"       hmi-bind:value="{{ HmiProps.Width - LocalProps.LabelWidth - LocalProps.ActualToolBarWidth - LocalProps.Defaultpadding - LocalProps.WindowBorderPadding + 4 }} "/>
        <hmi:localDef name="ListContainerXPosition"         type="number"       hmi-bind:value="{{ LocalProps.LabelWidth + LocalProps.WindowBorderPadding - LocalProps.Defaultpadding }} "/>
        <hmi:localDef name="TextTrim"                       type="boolean"      hmi-bind:value="{{ le( HmiProps.Width , 420 ) ? HmiTextTrimming.CharacterEllipsis : HmiTextTrimming.None }}"/>
        <hmi:localDef name="CategoryText"                   type="string"       hmi-bind:value="{{ HmiProps.PDiagCategories.Label.Text }}" />
        <hmi:localDef name="CategoryForeColor"              type="HmiColor"     hmi-bind:value="{{ HmiProps.PDiagCategories.Label.ForeColor }}" /> 
        <hmi:localDef name="CategoryFont"                   type="HmiFontPart"  hmi-bind:value="{{ HmiProps.PDiagCategories.Label.Font }}" />
        <hmi:localDef name="TypeText"                       type="string"       hmi-bind:value="{{ HmiProps.PDiagSupervisionTypes.Label.Text  }}" />
        <hmi:localDef name="TypeForeColor"                  type="HmiColor"     hmi-bind:value="{{ HmiProps.PDiagSupervisionTypes.Label.ForeColor  }}" />
        <hmi:localDef name="TypeFont"                       type="HmiFontPart"  hmi-bind:value="{{ HmiProps.PDiagSupervisionTypes.Label.Font  }}" />
        <hmi:localDef name="ListContainerHeight"            type="number"       hmi-bind:value="{{ (HmiProps.Height - LocalProps.CaptionHeight - (3* LocalProps.Defaultpadding) )/2 }}" />
        <hmi:localDef name="CentreHeight"                   type="number"       hmi-bind:value="{{ LocalProps.ListContainerHeight/2 }}" />
        <hmi:localDef name="CategoryLabelYPos"              type="number"       hmi-bind:value="{{ LocalProps.CaptionHeight + LocalProps.Defaultpadding }}" />
        <hmi:localDef name="CategoryElement1Visible"        type="number"       hmi-bind:value="{{ HmiProps.PDiagCategories.PDiagElements[0].Visible? 1 : 0 }}" />
        <hmi:localDef name="CategoryElement2Visible"        type="number"       hmi-bind:value="{{ HmiProps.PDiagCategories.PDiagElements[1].Visible? 1 : 0 }}" />
        <hmi:localDef name="CategoryElement3Visible"        type="number"       hmi-bind:value="{{ HmiProps.PDiagCategories.PDiagElements[2].Visible? 1 : 0 }}" />
        <hmi:localDef name="CategoryElement4Visible"        type="number"       hmi-bind:value="{{ HmiProps.PDiagCategories.PDiagElements[3].Visible? 1 : 0 }}" />
        <hmi:localDef name="CategoryElement5Visible"        type="number"       hmi-bind:value="{{ HmiProps.PDiagCategories.PDiagElements[4].Visible? 1 : 0 }}" />
        <hmi:localDef name="CategoryElement6Visible"        type="number"       hmi-bind:value="{{ HmiProps.PDiagCategories.PDiagElements[5].Visible? 1 : 0 }}" />
        <hmi:localDef name="CategoryElement7Visible"        type="number"       hmi-bind:value="{{ HmiProps.PDiagCategories.PDiagElements[6].Visible? 1 : 0 }}" />
        <hmi:localDef name="CategoryElement8Visible"        type="number"       hmi-bind:value="{{ HmiProps.PDiagCategories.PDiagElements[7].Visible? 1 : 0 }}" />
        <hmi:localDef name="CategoryElementCount1"          type="number"       hmi-bind:value="{{ LocalProps.CategoryElement1Visible + LocalProps.CategoryElement2Visible + LocalProps.CategoryElement3Visible + LocalProps.CategoryElement4Visible }}" />
        <hmi:localDef name="CategoryElementCount2"          type="number"       hmi-bind:value="{{ LocalProps.CategoryElement5Visible + LocalProps.CategoryElement6Visible + LocalProps.CategoryElement7Visible + LocalProps.CategoryElement8Visible }} "/>
        <hmi:localDef name="CategoryElementCount"           type="number"       hmi-bind:value="{{ LocalProps.CategoryElementCount1 + LocalProps.CategoryElementCount2 }}" />
        <hmi:localDef name="TypeElement1Visible"            type="number"       hmi-bind:value="{{ HmiProps.PDiagSupervisionTypes.PDiagElements[0].Visible? 1 : 0 }}" />
        <hmi:localDef name="TypeElement2Visible"            type="number"       hmi-bind:value="{{ HmiProps.PDiagSupervisionTypes.PDiagElements[1].Visible? 1 : 0 }}" />
        <hmi:localDef name="TypeElement3Visible"            type="number"       hmi-bind:value="{{ HmiProps.PDiagSupervisionTypes.PDiagElements[2].Visible? 1 : 0 }}" />
        <hmi:localDef name="TypeElement4Visible"            type="number"       hmi-bind:value="{{ HmiProps.PDiagSupervisionTypes.PDiagElements[3].Visible? 1 : 0 }}" />
        <hmi:localDef name="TypeElement5Visible"            type="number"       hmi-bind:value="{{ HmiProps.PDiagSupervisionTypes.PDiagElements[4].Visible? 1 : 0 }}" />
        <hmi:localDef name="TypeElement6Visible"            type="number"       hmi-bind:value="{{ HmiProps.PDiagSupervisionTypes.PDiagElements[5].Visible? 1 : 0 }}" />
        <hmi:localDef name="TypeElementCount"               type="number"       hmi-bind:value="{{ LocalProps.TypeElement1Visible + LocalProps.TypeElement2Visible + LocalProps.TypeElement3Visible + LocalProps.TypeElement4Visible + LocalProps.TypeElement5Visible + LocalProps.TypeElement6Visible }}" />
        <hmi:localDef name="GreaterCount"                   type="number"       hmi-bind:value="{{ gt( LocalProps.CategoryElementCount, LocalProps.TypeElementCount ) ? LocalProps.CategoryElementCount : LocalProps.TypeElementCount }}" />
        <hmi:localDef name="Padding"                        type="number"       hmi-bind:value="{{ LocalProps.GreaterCount * LocalProps.Defaultpadding }}" />
        <hmi:localDef name="WidthWithoutPadding"            type="number"       hmi-bind:value="{{ LocalProps.ListContainerWidth - LocalProps.Padding }}" />
        <hmi:localDef name="ActualTileWidth"                type="number"       hmi-bind:value="{{ LocalProps.WidthWithoutPadding / LocalProps.GreaterCount }}" />
        <hmi:localDef name="TileWidth"                      type="number"       hmi-bind:value="{{ lt( LocalProps.ActualTileWidth, LocalProps.TileMinimumWidth ) ? LocalProps.TileMinimumWidth : LocalProps.ActualTileWidth }}" />
        <hmi:localDef name="PDiagCategoriesCountDiff"       type="number"       hmi-bind:value="{{ ge( LocalProps.GreaterCount, LocalProps.CategoryElementCount ) ? LocalProps.GreaterCount - LocalProps.CategoryElementCount : 0 }} "/>
        <hmi:localDef name="PDiagSupervisionTypesCountDiff" type="number"       hmi-bind:value="{{ ge( LocalProps.GreaterCount, LocalProps.TypeElementCount ) ? LocalProps.GreaterCount - LocalProps.TypeElementCount : 0 }} "/>
        <hmi:localDef name="PDiagSupervisionTypesPaddingDiff" type="number"     hmi-bind:value="{{ LocalProps.PDiagSupervisionTypesCountDiff * LocalProps.Defaultpadding }}" />
        <hmi:localDef name="PDiagCategoriesPaddingDiff"     type="number"       hmi-bind:value="{{ LocalProps.PDiagCategoriesCountDiff * LocalProps.Defaultpadding }}" />
        <hmi:localDef name="PDiagCategoriesWidthDiff"       type="number"       hmi-bind:value="{{ LocalProps.PDiagCategoriesCountDiff * LocalProps.ActualTileWidth }}" />
		<hmi:localDef name="CategoryDisplayText"            type="string"       hmi-bind:value="{{ Converter.TextEllipsis( LocalProps.CategoryText, LocalProps.LabelWidth, LocalProps.CategoryFont ) }}" />
		<hmi:localDef name="TypeDisplayText"                type="string"       hmi-bind:value="{{ Converter.TextEllipsis( LocalProps.TypeText, LocalProps.LabelWidth, LocalProps.TypeFont ) }}" />  
        <hmi:localDef name="PDiagSupervisionTypesWidthDiff" type="number"       hmi-bind:value="{{ LocalProps.PDiagSupervisionTypesCountDiff * LocalProps.ActualTileWidth }}" />
        <hmi:localDef name="PDiagSupervisionTypesWidth"     type="number"       hmi-bind:value="{{ LocalProps.ListContainerWidth - LocalProps.PDiagSupervisionTypesWidthDiff - LocalProps.PDiagSupervisionTypesPaddingDiff }}" />
        <hmi:localDef name="PDiagCategoriesWidth"           type="number"       hmi-bind:value="{{ LocalProps.ListContainerWidth - LocalProps.PDiagCategoriesWidthDiff - LocalProps.PDiagCategoriesPaddingDiff }}" />

        <clipPath id="WindowClipRect">
            <rect id="ItemRect"
                    hmi-bind:width="{ HmiProps.Width }" hmi-bind:height="{ HmiProps.Height }"
                    stroke="none" hmi-bind:rx="{ LocalProps.SYS_RX }" />
        </clipPath>

        <clipPath id="ListClipRect">
            <rect id="ListRect" hmi-bind:width="{ HmiProps.Width }" height="90"
                hmi-bind:fill="{ LocalProps.BackColor }" hmi-bind:x="{ LocalProps.WindowBorderWidth }" y="32"
                stroke="none"/>
        </clipPath>
    </defs>

    <g id="ElementsGroup" clip-path="url(#WindowClipRect)">
        <!-- Background --> 
        <rect id="BackGroundRect"
            hmi-bind:width="{ HmiProps.Width }"
            hmi-bind:height="{ HmiProps.Height }"
            hmi-bind:fill="{ LocalProps.BackColor }"
            stroke="none"
            hmi-bind:rx="{ LocalProps.SYS_RX }" />

        <g id ="CategoryGroup">
            <g id="CategoryLabel" hmi:if="{ LocalProps.CategoryLabel }">
                <hmi-element:textField
                    hmi-bind:width="{ LocalProps.LabelWidth }" hmi-bind:height="{ LocalProps.ListContainerHeight }"
                    hmi-bind:start-x="{ LocalProps.WindowBorderPadding }" hmi-bind:start-y="{ LocalProps.CategoryLabelYPos }"
                    hmi-bind:value="{ LocalProps.CategoryDisplayText }"
                    hmi-bind:fore-color="{{ Converter.RGBA( LocalProps.CategoryForeColor ) }}"
                    enabled="false" read-only="true" multi-line="false"
                    horizontal-scrollbar-visibility="collapsed" vertical-scrollbar-visibility="collapsed"
                    text-wrapping="no-wrap"
                    hmi-bind:text-trimming="{{  HmiTextTrimming.CharacterEllipsis }}" >
                    <hmi-feature:font hmi-bind:scope="{ LocalProps.CategoryFont }" />
                </hmi-element:textField>
            </g>

            <g id ="CategoryTiles"  hmi:if="{ HmiProps.PDiagCategories.Visible }" >
                <hmi:include template="include.style.flat.processdiagnosisoverviewcontroltiles.svghmi" hmi-bind:for="{{ HmiProps.PDiagCategories }}"
                    hmi-bind:x="{ LocalProps.ListContainerXPosition }"  hmi-bind:y="{ LocalProps.CategoryLabelYPos }" hmi-bind:width="{ LocalProps.ListContainerWidth }" hmi-bind:height="{ LocalProps.ListContainerHeight }" >

                    <hmi:param name="ListContainerSource"       type="number"       hmi-bind:value="{ LocalProps.CatagoriesSource }" />
                    <hmi:param name="Font"                      type="HmiFontPart"  hmi-bind:value="{ HmiProps.PDiagCategories.SymbolFont }" />
                    <hmi:param name="Width"                     type="number"       hmi-bind:value="{ LocalProps.PDiagCategoriesWidth }" />
					<hmi:param name="TileWidth"                 type="number"      	hmi-bind:value="{ LocalProps.TileWidth}" />
                </hmi:include>
            </g>
        </g>

        <g id="TypeGroup" >
             <g id="TypeLabel" hmi:if="{ LocalProps.TypeLabel }" >
                <hmi-element:textField
                    hmi-bind:width="{ LocalProps.LabelWidth }" hmi-bind:height="{ LocalProps.ListContainerHeight }"
                    hmi-bind:start-x="{ LocalProps.WindowBorderPadding }" hmi-bind:start-y="{{ LocalProps.ListContainerHeight + LocalProps.Defaultpadding + LocalProps.CaptionHeight }}"
                    hmi-bind:value="{ LocalProps.TypeDisplayText}"
                    hmi-bind:fore-color="{{  Converter.RGBA(LocalProps.TypeForeColor) }}"
                    enabled="false" read-only="true" multi-line="false"
                    horizontal-scrollbar-visibility="collapsed" vertical-scrollbar-visibility="collapsed"
                    text-wrapping="no-wrap"
                    hmi-bind:text-trimming="{{ HmiTextTrimming.CharacterEllipsis }}" >
                    <hmi-feature:font hmi-bind:scope="{ LocalProps.TypeFont }" />
                </hmi-element:textField>
            </g>
            <g id ="TypeTiles" hmi:if="{ HmiProps.PDiagSupervisionTypes.Visible }"  >
                <hmi:include template="include.style.flat.processdiagnosisoverviewcontroltiles.svghmi" hmi-bind:for="{{ HmiProps.PDiagSupervisionTypes }}"
                    hmi-bind:x="{ LocalProps.ListContainerXPosition }" hmi-bind:y="{{ LocalProps.ListContainerHeight + LocalProps.Defaultpadding + LocalProps.CaptionHeight }}"  
                    hmi-bind:width="{ LocalProps.ListContainerWidth}" hmi-bind:height="{ LocalProps.ListContainerHeight }">

                    <hmi:param name="Font"                      type="HmiFontPart"  hmi-bind:value="{ HmiProps.PDiagSupervisionTypes.SymbolFont }" />
                    <hmi:param name="ListContainerSource"       type="number"       hmi-bind:value="{ LocalProps.TypeSource }" />
					<hmi:param name="TileWidth"                 type="number"       hmi-bind:value="{ LocalProps.TileWidth }" />
					<hmi:param name="Width"                     type="number"       hmi-bind:value="{ LocalProps.PDiagSupervisionTypesWidth }" />
                </hmi:include>
            </g>
        </g>

        <g id="Separator"   hmi-bind:Xposition = "{ LocalProps.ListContainerXPosition }" hmi-bind:ListWidth = "{ LocalProps.ListContainerWidth }" hmi:if="{ LocalProps.HasToolBarElements }">
            <line id="VerticalLine"
                hmi-bind:x1="{{ LocalProps.ListContainerXPosition + LocalProps.ListContainerWidth + LocalProps.Defaultpadding }}"
                y1="0"
                hmi-bind:x2="{{ LocalProps.ListContainerXPosition + LocalProps.ListContainerWidth + LocalProps.Defaultpadding }}"
                hmi-bind:y2="{{ HmiProps.Height }}"
                hmi-bind:stroke="{{ Converter.RGBA( HmiProps.LineColor ) }}"
                hmi-bind:stroke-width="{ LocalProps.LineWidth }" />

            <!-- ToolBar-->
            <hmi:include template="include.style.flat.graphoverviewtoolbar.svghmi" hmi-bind:for="{ HmiProps.ToolBar }"
                hmi-bind:x="{{ LocalProps.ListContainerXPosition + LocalProps.ListContainerWidth + LocalProps.Defaultpadding +  LocalProps.LineWidth }}"
                hmi-bind:y="{{ (HmiProps.Height - 40) / 2 }}"
                hmi-bind:width="{ LocalProps.ActualToolBarWidth }"
                hmi-bind:height="{ LocalProps.TestToolBarHeight }">
                <hmi:param name="Width"             type="number"       hmi-bind:value="{ LocalProps.ActualToolBarWidth}" />
                <hmi:param name="Height"            type="number"       hmi-bind:value="{ LocalProps.TestToolBarHeight }" />
                <hmi:param name="BarPosition"       type="number"       hmi-bind:value="{ LocalProps.ToolBarPosition }" />
                <hmi:param name="ItemOperable"      type="boolean"      hmi-bind:value="{ HmiProps.Enabled }" />
                <hmi:param name="FocusColor"        type="string"       hmi-bind:value="{ LocalProps.FocusColor }" />
                <hmi:param name="ShowFocusVisual"   type="boolean"      hmi-bind:value="{ HmiProps.ShowFocusVisual }" />
            </hmi:include>
        </g>
    </g>

  <!-- Frame -->
    <hmi:include template="include.style.flat.hmiwindowframe.default.svghmi"
                    x="0"
                    y="0"
                    hmi-bind:width="{ HmiProps.Width }"
                    hmi-bind:height="{ HmiProps.Height }" >

        <hmi:param name="Top"               type="number"           hmi-bind:value="{ HmiProps.Top }"                   />
        <hmi:param name="Left"              type="number"           hmi-bind:value="{ HmiProps.Left }"                  />
        <hmi:param name="Width"             type="number"           hmi-bind:value="{ HmiProps.Width }"                 />
        <hmi:param name="Height"            type="number"           hmi-bind:value="{ HmiProps.Height }"                />
        <hmi:param name="WindowFlags"       type="HmiWindowFlag"    hmi-bind:value="{ HmiProps.WindowFlags }"           />
        <hmi:param name="MinimumWidth"      type="number"           hmi-bind:value="{ LocalProps.MinimumWidth }"        />
        <hmi:param name="MinimumHeight"     type="number"           hmi-bind:value="{ LocalProps.MinimumHeight }"       />
        <hmi:param name="Icon"              type="HmiGraphic"       hmi-bind:value="{ LocalProps.ErrorIcon }"           />
        <hmi:param name="Caption"           type="HmiTextPart"      hmi-bind:value="{ HmiProps.Caption }"               />
        <hmi:param name="CaptionColor"      type="HmiColor"         hmi-bind:value="{ LocalProps.CaptionColor }"        />
        <hmi:param name="ShowCaption"       type="boolean"          hmi-bind:value="{ LocalProps.ShowCaption }"         />
        <hmi:param name="CaptionHeight"     type="number"           hmi-bind:value="{ LocalProps.CaptionHeight }"       />
        <hmi:param name="WindowBorderWidth" type="number"           hmi-bind:value="{ LocalProps.WindowBorderWidth }"   />
        <hmi:param name="WindowBorderColor" type="HmiColor"         hmi-bind:value="{ LocalProps.WindowBorderColor }"   />
        <hmi:param name="RX"                type="number"           hmi-bind:value="{ LocalProps.SYS_RX }"              />
        <hmi:param name="ItemOperable"      type="boolean"          hmi-bind:value="{ HmiProps.Enabled }"               />
        <hmi:param name="WindowState"       type="number"           hmi-bind:value="{ HmiProps.WindowState }"           />
    </hmi:include>
</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2021. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:hmi="http://svg.siemens.com/hmi/"
    xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
    xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
    xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
    xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/"
    preserveAspectRatio="none"
    overflow="visible" >

    <hmi:self type="item:HmiProcessDiagnosisPlcCodeViewerControl" displayName="Flat ProcessDiagnosisPlcCodeViewerControl" name="style.flat.ProDiagControl" version="2.8" performanceClass="L" >
        <hmi:focus focusVisual="local" />
    </hmi:self>

    <defs>
        <!-- System definitions of this template -->
        <hmi:localDef name="SYS_WindowBorderColor"        type="number"                    value="0xFF91939A" />
        <hmi:localDef name="SYS_WindowBorderWidth"        type="number"                    value="2"   />
        <hmi:localDef name="SYS_CaptionHeight"            type="number"                    value="30"  />
        <hmi:localDef name="SYS_RX"                       type="number"                    value="5"   />
                                                                                           
        <hmi:localDef name="MinimumWidth"                 type="number"                    value="100" />
        <hmi:localDef name="MinimumHeight"                type="number"                    value="50"  />
                                                                                           
        <hmi:localDef name="ShowFocus"                    type="boolean"                   hmi-bind:value="{{ and( HmiProps.ShowFocusVisual, SysProps.HasFocus ) }}" />
        <hmi:localDef name="ShowCaption"                  type="boolean"                   hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowCaption ) }}" />
        <hmi:localDef name="CaptionHeight"                type="number"                    hmi-bind:value="{{ LocalProps.ShowCaption ? LocalProps.SYS_CaptionHeight : 0 }}" />
        <hmi:localDef name="CaptionColor"                 type="number"                    hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : HmiProps.CaptionColor }}" />
        <hmi:localDef name="WindowBorderColor"            type="number"                    hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : LocalProps.SYS_WindowBorderColor }}" />
        <hmi:localDef name="WindowBorderWidth"            type="number"                    hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowBorder ) ? LocalProps.SYS_WindowBorderWidth : 0 }}" />
        <hmi:localDef name="WindowInnerWidth"             type="number"                    hmi-bind:value="{{ HmiProps.Width - 2 * LocalProps.WindowBorderWidth }}" />
        <hmi:localDef name="CaptionHeightPadding"         type="number"                    hmi-bind:value="{{ LocalProps.WindowBorderWidth + LocalProps.CaptionHeight }}" />
        <hmi:localDef name="PaddedWindowBorderWidth"      type="number"                    hmi-bind:value="{{ 2 * LocalProps.WindowBorderWidth }}" />                                                                                                                              
        
        <!-- Definition of StatusBar properties -->                                        
        <hmi:localDef name="TestStatusBar"                type="number"                    hmi-bind:value="{ HmiProps.StatusBar.Height }" />
        <hmi:localDef name="TestStatusBarElements"        type="boolean"                   hmi-bind:value="{{ ( Converter.CountItems( HmiProps.StatusBar.Elements ) ) ? true : false }}" />
        <hmi:localDef name="TestStatusBarHeight"          type="number"                    hmi-bind:value="{{ ( LocalProps.TestStatusBar == null ) ? 0 : HmiProps.StatusBar.Height }}" />
        <hmi:localDef name="HasStatusBar"                 type="boolean"                   hmi-bind:value="{{ ( LocalProps.TestStatusBar == null ) ? false : true }}" />
        <hmi:localDef name="StatusBarHeight"              type="number"                    hmi-bind:value="{{ ( LocalProps.HasStatusBar ) ? LocalProps.TestStatusBarHeight : 0 }}" />
        <hmi:localDef name="StatusBarVisibility"          type="boolean"                   hmi-bind:value="{{ ( LocalProps.TestStatusBar == null ) ? false : HmiProps.StatusBar.Visible }}" />
        <hmi:localDef name="HasStatusBarElements"         type="boolean"                   hmi-bind:value="{{ ( LocalProps.HasStatusBar ) ? LocalProps.TestStatusBarElements : false }}" />
        <hmi:localDef name="StatusBarWidth"               type="number"                    hmi-bind:value="{ LocalProps.WindowInnerWidth }" />
        <hmi:localDef name="StatusBarTop"                 type="number"                    hmi-bind:value="{{ HmiProps.Height - LocalProps.WindowBorderWidth - LocalProps.StatusBarHeight }}" />
        <hmi:localDef name="StatusBarVisible"             type="boolean"                   hmi-bind:value="{{ ( not( and( LocalProps.StatusBarVisibility, LocalProps.HasStatusBarElements ) ) ) ? false : ( or( ( LocalProps.WindowInnerWidth == 0 ), ( LocalProps.StatusBarHeight == 0 ) ) ? false : true ) }}" />


      <!-- Definition of ToolBar properties -->
        <hmi:localDef name="TestToolBar"                  type="number"                    hmi-bind:value="{ HmiProps.ToolBar.Height }" />
        <hmi:localDef name="TestToolBarHeight"            type="number"                    hmi-bind:value="{{ ( LocalProps.TestToolBar == null ) ? 0 : HmiProps.ToolBar.Height }}" />
        <hmi:localDef name="HasToolBar"                   type="boolean"                   hmi-bind:value="{{ ( LocalProps.TestToolBar == null ) ? false : true }}" />
        <hmi:localDef name="ToolBarPosition"              type="number"                    value="1" />
        <hmi:localDef name="ToolBarHeight"                type="number"                    hmi-bind:value="{{ ( LocalProps.HasToolBar ) ? LocalProps.TestToolBarHeight : 0 }}" />
        <hmi:localDef name="ToolBarVisibility"            type="boolean"                   hmi-bind:value="{{ LocalProps.HasToolBar ? HmiProps.ToolBar.Visible : false }}" />
        <hmi:localDef name="HasToolBarElements"           type="boolean"                   hmi-bind:value="{{ LocalProps.HasToolBar ? ( ( Converter.CountItems( HmiProps.ToolBar.Elements ) ) ? true : false ) : false }}" />
        <hmi:localDef name="ToolBarVisible"               type="boolean"                   hmi-bind:value="{{ ( not( and( LocalProps.ToolBarVisibility, LocalProps.HasToolBarElements ) ) ) ? false : ( or ( ( LocalProps.WindowInnerWidth == 0 ), ( LocalProps.ToolBarHeight == 0 ) ) ? false : true ) }}" />
        <hmi:localDef name="ToolBarTop"                   type="number"                    hmi-bind:value="{{ ( LocalProps.ToolBarPosition == 1 ) ? ( HmiProps.Height - LocalProps.WindowBorderWidth - ( LocalProps.ToolBarVisibility ? LocalProps.ToolBarHeight : 0 ) - ( LocalProps.StatusBarVisibility ? LocalProps.StatusBarHeight : 0 ) ) : LocalProps.CaptionHeight + LocalProps.WindowBorderWidth}}" />


      <!-- Position and Extent related properties of the content -->
        <hmi:localDef name="SymbolLineHeight"             type="number"                    value="50" />
        <hmi:localDef name="ShowSymbolLine"               type="boolean"                   hmi-bind:value="{ HmiProps.ShowSymbolLine}" />
        <hmi:localDef name="ContentOffsetHeight"          type="number"                    hmi-bind:value="{{ (LocalProps.ShowSymbolLine ? LocalProps.SymbolLineHeight : 0) + ( LocalProps.ToolBarVisible ? LocalProps.ToolBarHeight : 0 ) + ( LocalProps.StatusBarVisible ? LocalProps.StatusBarHeight : 0 ) }}" />
        <hmi:localDef name="SplitterWidth"                type="number"                    value="10" />
        <hmi:localDef name="ShowStepViewDiagram"          type="boolean"                   hmi-bind:value="{{ HmiProps.ShowOverviewDetail ? false: true }}" />
        <hmi:localDef name="StepViewRatio"                type="number"                    hmi-bind:value="{{ LocalProps.ShowStepViewDiagram ? HmiProps.OverviewDetailRatio : 0 }}" />
        <hmi:localDef name="DetailsViewRatio"             type="number"                    hmi-bind:value="{{ 1 - LocalProps.StepViewRatio }}" />
        <hmi:localDef name="FocusColor"                   type="string"                    hmi-bind:value="{{ Converter.RGBA( HmiProps.FocusColor ) }}" />
        <hmi:localDef name="ContentHeight"                type="number"                    hmi-bind:value="{{ HmiProps.Height - LocalProps.PaddedWindowBorderWidth - LocalProps.CaptionHeight - LocalProps.ContentOffsetHeight }}" />
        <hmi:localDef name="ScrollBarPart"                type="HmiScrollBarSystemPart"    hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiScrollBarSystemPart' ) }}" />

        <clipPath id="WindowClipRect">
            <rect id="ItemRect"
                  hmi-bind:width="{ HmiProps.Width   }"
                  hmi-bind:height="{ HmiProps.Height }"
                  stroke="none"
                  hmi-bind:rx="{ LocalProps.SYS_RX }" />
      </clipPath>

        <hmi:action id="onMove">
            <hmi:setProperty name="HmiProps.OverviewDetailRatio"      type="number"   hmi-bind:value="{{ LocalProps.StepViewRatio + ( EventArgs.PanDeltaX / HmiProps.Width ) }}" />
        </hmi:action>
        <hmi:action id="onSetCursorResize">
              <hmi:setCursor   name="w-resize" value="screen" />
        </hmi:action>
        <hmi:action id="onCursorResumeLeave">
            <hmi:setCursor   name="auto"      value="screen" />
        </hmi:action>

    </defs>

    <g id="ElementsGroup" clip-path="url(#WindowClipRect)">

      <!-- Background -->
        <rect id="BackGroundRect"
              hmi-bind:width="{ HmiProps.Width }"
              hmi-bind:height="{ HmiProps.Height }"
              hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}"
              stroke="none"
              hmi-bind:rx="{ LocalProps.SYS_RX }" />

      <!-- ToolBar -->
        <g hmi:if="{ LocalProps.HasToolBar }" id="ToolBar">
            <hmi:include template="include.style.flat.toolbar.default.svghmi" hmi-bind:for="{ HmiProps.ToolBar }"
                       hmi-bind:x="{{ ( LocalProps.ToolBarPosition == 3 ) ? ( HmiProps.Width - LocalProps.WindowBorderWidth - LocalProps.ToolBarHeight ) : LocalProps.WindowBorderWidth }}"
                       hmi-bind:y="{{ LocalProps.ToolBarTop }}"
                       hmi-bind:width="{{ or( ( LocalProps.ToolBarPosition == 1 ), ( LocalProps.ToolBarPosition == 0 ) ) ? LocalProps.WindowInnerWidth : LocalProps.ToolBarHeight }}"
                       hmi-bind:height="{{ or( ( LocalProps.ToolBarPosition == 3 ), ( LocalProps.ToolBarPosition == 2 ) ) ? HmiProps.Height - 2 * LocalProps.WindowBorderWidth - LocalProps.CaptionHeight - ( LocalProps.StatusBarVisibility ? LocalProps.StatusBarHeight : 0 ) : LocalProps.ToolBarHeight }}">

                    <hmi:param name="Width"           type="number"   hmi-bind:value="{{ or( ( LocalProps.ToolBarPosition == 0 ), ( LocalProps.ToolBarPosition == 1 ) ) ? LocalProps.WindowInnerWidth : LocalProps.ToolBarHeight }}" />
                    <hmi:param name="Height"          type="number"   hmi-bind:value="{{ or( ( LocalProps.ToolBarPosition == 3 ), ( LocalProps.ToolBarPosition == 2 ) ) ? HmiProps.Height - 2 * LocalProps.WindowBorderWidth - LocalProps.CaptionHeight - ( LocalProps.StatusBarVisibility ? LocalProps.StatusBarHeight : 0 ) : LocalProps.ToolBarHeight }}" />
                    <hmi:param name="BarPosition"     type="number"   hmi-bind:value="{ LocalProps.ToolBarPosition }" />
                    <hmi:param name="ItemOperable"    type="boolean"  hmi-bind:value="{ HmiProps.Enabled }" />
                    <hmi:param name="FocusColor"      type="string"   hmi-bind:value="{ LocalProps.FocusColor }" />
                    <hmi:param name="ShowFocusVisual" type="boolean"  hmi-bind:value="{ HmiProps.ShowFocusVisual }"   />

            </hmi:include>
        </g>

      <!-- StatusBar -->
        <g hmi:if="{ LocalProps.HasStatusBar }" id="StatusBar">
            <hmi:include template="include.style.flat.statusbar.default.svghmi" hmi-bind:for="{ HmiProps.StatusBar }"
                       hmi-bind:x="{ LocalProps.WindowBorderWidth }"
                       hmi-bind:y="{ LocalProps.StatusBarTop }"
                       hmi-bind:width="{ LocalProps.StatusBarWidth }"
                       hmi-bind:height="{ LocalProps.StatusBarHeight }">

                    <hmi:param name="Width"           type="number"   hmi-bind:value="{ LocalProps.StatusBarWidth }"  />
                    <hmi:param name="Height"          type="number"   hmi-bind:value="{ LocalProps.StatusBarHeight }" />
                    <hmi:param name="ItemOperable"    type="boolean"  hmi-bind:value="{ HmiProps.Enabled }"           />
                    <hmi:param name="FocusColor"      type="string"   hmi-bind:value="{ LocalProps.FocusColor }"      />
                    <hmi:param name="ShowFocusVisual" type="boolean"  hmi-bind:value="{ HmiProps.ShowFocusVisual }"   />

            </hmi:include>
        </g>

        <!-- Symbol line -->
        <g id="SymbolLineGroup" hmi:if="{ LocalProps.ShowSymbolLine }">
            <hmi:include
                template="include.style.flat.plccodeviewersymbolline.svghmi"
                hmi-bind:for="{{ HmiProps }}"
                hmi-bind:x="{{ ( LocalProps.ToolBarPosition == 3 ) ? ( HmiProps.Width - LocalProps.WindowBorderWidth - LocalProps.ToolBarHeight ) : LocalProps.WindowBorderWidth }}"
                hmi-bind:y="{{ LocalProps.ToolBarTop - LocalProps.SymbolLineHeight }}"
                hmi-bind:width="{ LocalProps.WindowInnerWidth }"
                hmi-bind:height="{{ LocalProps.SymbolLineHeight }}"
            >
                <hmi:param name="FocusColor"                type="HmiColor"     hmi-bind:value="{ LocalProps.FocusColor }" />
                <hmi:param name="ForeColor"                 type="HmiColor"     hmi-bind:value="{ HmiProps.SymbolLineForeColor }" />
                <hmi:param name="BackColor"                 type="HmiColor"     hmi-bind:value="{ HmiProps.SymbolLineBackColor }" />
                <hmi:param name="Font"                      type="HmiFontPart"  hmi-bind:value="{ HmiProps.SymbolLineFont }" />
                <hmi:param name="Width"                     type="number"       hmi-bind:value="{ LocalProps.WindowInnerWidth }" />
				<hmi:param name="Height"                    type="number"       hmi-bind:value="{ LocalProps.SymbolLineHeight }" />
            </hmi:include>
        </g>

      <!-- Content as include subtemplate -->
        <g hmi-bind:transform="translate( { LocalProps.WindowBorderWidth }, 0 )">
            <g hmi-flex:width="{ LocalProps.WindowInnerWidth }"
               hmi-flex:height="{ LocalProps.ContentHeight }" 
               hmi-flex:direction="row" hmi-flex:wrap="false">
                <g hmi:if="{{ LocalProps.ShowStepViewDiagram }}" hmi-flex:grow="{ LocalProps.StepViewRatio }" id="TIFID_stepDiagram">
                    <hmi:include template="include.style.flat.stepdiagram.svghmi"
                                hmi-bind:y="{ LocalProps.CaptionHeightPadding }"
                                hmi-bind:width="{ Layout.ActualWidth }"
                                hmi-bind:height="{ Layout.ActualHeight }" >                  
                        <hmi:param name="FocusColor"       type="HmiColor"       hmi-bind:value="{ HmiProps.FocusColor }" />
                        <hmi:param name="LineColor"        type="string"         hmi-bind:value="{{ Converter.RGBA( HmiProps.LineColors.NormalLine ) }}" />
                        <hmi:param name="ActiveLineColor"  type="string"         hmi-bind:value="{{ Converter.RGBA( HmiProps.LineColors.ActiveLine ) }}" />
                        <hmi:param name="BackColor"        type="HmiColor"       hmi-bind:value="{ HmiProps.BackColor }"           />
                    </hmi:include>
                </g>
                <g hmi:if="{{ LocalProps.ShowStepViewDiagram }}" hmi-flex:width="{ LocalProps.SplitterWidth }" hmi-bind:height="{ LocalProps.ContentHeight }" hmi-flex:grow="0"
                  hmi-event:mouseEnter="url(#onSetCursorResize)" hmi-event:mouseLeave="url(#onCursorResumeLeave)" hmi-event:pan="url(#onMove)" id="TIFID_splitter">
                  <rect hmi-bind:width="{ LocalProps.SplitterWidth }" hmi-bind:height="{ LocalProps.ContentHeight }"
                          hmi-bind:y="{ LocalProps.CaptionHeightPadding }" hmi-bind:fill="{{ Converter.RGBA( LocalProps.ScrollBarPart.ThumbBackColor ) }}"/> <!--change to proper color value: BackColor -shruthi-->
                  <circle cx="5" hmi-bind:cy="{{ ( LocalProps.ContentHeight/2 + LocalProps.CaptionHeightPadding ) + 3 }}" r="20"  hmi-bind:fill="{{ Converter.RGBA( LocalProps.ScrollBarPart.ThumbBackColor ) }}" />
                  <g hmi-bind:transform="translate( 18, {{ ( LocalProps.ContentHeight/2 + LocalProps.CaptionHeightPadding ) + 3 }} )" >
                    <path d="M 0 0 L -8 -9 L -8 9 z" hmi-bind:fill="{{ Converter.RGBA( HmiProps.SymbolLineForeColor ) }}"></path>
                  </g>
                  <g hmi-bind:transform="translate( -8, {{ ( LocalProps.ContentHeight/2 + LocalProps.CaptionHeightPadding ) + 3 }}  )" >
                    <path d="M 0 0 L 8 -9 L 8 9 z" hmi-bind:fill="{{ Converter.RGBA( HmiProps.SymbolLineForeColor ) }}"></path>
                  </g>
                </g>
                <g hmi-flex:grow="{ LocalProps.DetailsViewRatio }" id="TIFID_logicView">
                  <g hmi:if="{{ eq ( HmiProps.DetailViewType, HmiProcessDiagnosisDetailViewType.FunctionBlock ) }}" id="TIFID_fbdDiagram"> 
                      <hmi:include template="include.style.flat.functionblockdiagram.svghmi" 
                                  hmi-bind:y="{ LocalProps.CaptionHeightPadding }"
                                  hmi-bind:width="{ Layout.ActualWidth }"
                                  hmi-bind:height="{ Layout.ActualHeight }" >
                        <hmi:param name="LineColor"           type="string"   hmi-bind:value="{{ Converter.RGBA(HmiProps.LineColors.NormalLine) }}" />
                        <hmi:param name="ActiveLineColor"     type="string"   hmi-bind:value="{{ Converter.RGBA(HmiProps.LineColors.ActiveLine) }}" />
                        <hmi:param name="InActiveLineColor"   type="string"   hmi-bind:value="{{ Converter.RGBA(HmiProps.LineColors.InactiveLine ) }}" />
                      </hmi:include>
                  </g>
                  <g hmi:if="{{ eq ( HmiProps.DetailViewType, HmiProcessDiagnosisDetailViewType.Ladder ) }}" id="TIFID_ladDiagram">
                    <hmi:include template="include.style.flat.ladderdiagram.svghmi"
                                hmi-bind:y="{ LocalProps.CaptionHeightPadding }"
                                hmi-bind:width="{ Layout.ActualWidth }"
                                hmi-bind:height="{ Layout.ActualHeight }" >
                      <hmi:param name="LineColor"           type="string"   hmi-bind:value="{{ Converter.RGBA(HmiProps.LineColors.NormalLine) }}" />
                      <hmi:param name="ActiveLineColor"     type="string"   hmi-bind:value="{{ Converter.RGBA(HmiProps.LineColors.ActiveLine) }}" />
                      <hmi:param name="InActiveLineColor"   type="string"   hmi-bind:value="{{ Converter.RGBA(HmiProps.LineColors.InactiveLine ) }}" />
                    </hmi:include>
                    </g>
                </g>
            </g>
        </g>
    </g>

    <!-- Frame -->
    <hmi:include template="include.style.flat.hmiwindowframe.default.svghmi"
                 x="0"
                 y="0"
                 hmi-bind:width="{ HmiProps.Width }"
                 hmi-bind:height="{ HmiProps.Height }" >

        <hmi:param name="Top"               type="number"           hmi-bind:value="{ HmiProps.Top }"                 />
        <hmi:param name="Left"              type="number"           hmi-bind:value="{ HmiProps.Left }"                />
        <hmi:param name="Width"             type="number"           hmi-bind:value="{ HmiProps.Width }"               />
        <hmi:param name="Height"            type="number"           hmi-bind:value="{ HmiProps.Height }"              />
        <hmi:param name="WindowFlags"       type="HmiWindowFlag"    hmi-bind:value="{ HmiProps.WindowFlags }"         />
        <hmi:param name="MinimumWidth"      type="number"           hmi-bind:value="{ LocalProps.MinimumWidth }"      />
        <hmi:param name="MinimumHeight"     type="number"           hmi-bind:value="{ LocalProps.MinimumHeight }"     />
        <hmi:param name="Icon"              type="HmiGraphic"       hmi-bind:value="{ HmiProps.Icon }"                />
        <hmi:param name="Caption"           type="HmiTextPart"      hmi-bind:value="{ HmiProps.Caption }"             />
        <hmi:param name="CaptionColor"      type="HmiColor"         hmi-bind:value="{ LocalProps.CaptionColor }"      />
        <hmi:param name="ShowCaption"       type="boolean"          hmi-bind:value="{ LocalProps.ShowCaption }"       />
        <hmi:param name="CaptionHeight"     type="number"           hmi-bind:value="{ LocalProps.CaptionHeight }"     />
        <hmi:param name="WindowBorderWidth" type="number"           hmi-bind:value="{ LocalProps.WindowBorderWidth }" />
        <hmi:param name="WindowBorderColor" type="HmiColor"         hmi-bind:value="{ LocalProps.WindowBorderColor }" />
        <hmi:param name="RX"                type="number"           hmi-bind:value="{ LocalProps.SYS_RX }"            />
        <hmi:param name="ItemOperable"      type="boolean"          hmi-bind:value="{ HmiProps.Enabled }"             />

    </hmi:include>
</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     preserveAspectRatio="none">

    <hmi:self type="item:HmiRadioButtonGroup" displayName="Flat RadioButtonGroup" name="style.flat.radiobuttongroup" version="2.8" performanceClass="L" >
        <hmi:focus focusVisual="local" />
    </hmi:self>

    <defs>
        <!-- Local definitions of this template -->
        <hmi:localDef name="ScrollBarPart"              type="HmiScrollBarSystemPart"   hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiScrollBarSystemPart' ) }}" />

        <hmi:localDef name="ScrollBarPosition"          type="number"                   value="0" />
        <hmi:localDef name="ShowFocus"                  type="boolean"                  hmi-bind:value="{{ and( HmiProps.ShowFocusVisual, SysProps.HasFocus ) }}" />
		
        <hmi:localDef name="BorderColor"                type="number"                   hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : HmiProps.BorderColor }}" />
        <hmi:localDef name="BorderWidth"                type="number"                   hmi-bind:value="{{ LocalProps.ShowFocus ? ( HmiProps.BorderWidth + 2 ) : HmiProps.BorderWidth }}" />

        <hmi:localDef name="RadioButtonBoxCount"        type="number"                   hmi-bind:value="{{ Converter.CountItems(HmiProps.SelectionItems) }}" />
        <hmi:localDef name="SelectionAutoFactor"        type="number"                   hmi-bind:value="{{ and( ( HmiProps.Content.ContentMode == HmiContentMode.GraphicAndText ), or( HmiProps.Content.TextPosition == HmiTextPosition.Top, HmiProps.Content.TextPosition == HmiTextPosition.Bottom ) ) ? 1 - HmiProps.Content.SplitRatio : 1 }}" />
        <hmi:localDef name="SelectionAutoHeight"        type="number"                   hmi-bind:value="{{ HmiProps.Font.Size * 3 / LocalProps.SelectionAutoFactor }}" />
        <hmi:localDef name="SelectionItemHeight"        type="number"                   hmi-bind:value="{{ HmiProps.SelectionItemHeight == 0 ? LocalProps.SelectionAutoHeight : HmiProps.SelectionItemHeight }}" />

        <hmi:localDef name="ContentPositionX"           type="number"                   hmi-bind:value="{{ HmiProps.BorderWidth + HmiProps.Padding.Left }}" />
        <hmi:localDef name="ContentPositionY"           type="number"                   hmi-bind:value="{{ HmiProps.BorderWidth + HmiProps.Padding.Top  }}" />

        <hmi:localDef name="ViewHeight"                 type="number"                   hmi-bind:value="{{ HmiProps.Height - (2 * HmiProps.BorderWidth) - HmiProps.Padding.Top  - HmiProps.Padding.Bottom }}" />
        <hmi:localDef name="ContentHeight"              type="number"                   hmi-bind:value="{{ LocalProps.RadioButtonBoxCount * LocalProps.SelectionItemHeight }}" />
        <hmi:localDef name="ScrollBarWidth"             type="number"                   hmi-bind:value="{{ gt( LocalProps.ContentHeight, LocalProps.ViewHeight ) ? LocalProps.ScrollBarPart.Thickness : 0 }}" />
        <hmi:localDef name="ContentWidth"               type="number"                   hmi-bind:value="{{ HmiProps.Width  - 2 * HmiProps.BorderWidth - HmiProps.Padding.Left - HmiProps.Padding.Right - LocalProps.ScrollBarWidth }}" />
        <hmi:localDef name="ScrollBarContentHeight"     type="number"                   hmi-bind:value="{{ HmiProps.Height - ( 2 * HmiProps.BorderWidth + HmiProps.Padding.Top + HmiProps.Padding.Bottom ) }}" />
        <hmi:localDef name="ScrollBarContentPositionX"  type="number"                   hmi-bind:value="{{ HmiProps.Width - HmiProps.BorderWidth - HmiProps.Padding.Right - LocalProps.ScrollBarWidth }}" />

        <clipPath id="ItemClipRect">
            <rect id="ItemRect"
                  hmi-bind:x="{{ HmiProps.BorderWidth / 2 }}"
                  hmi-bind:y="{{ HmiProps.BorderWidth / 2 }}"
                  hmi-bind:width="{{ HmiProps.Width - HmiProps.BorderWidth }}"
                  hmi-bind:height="{{ HmiProps.Height - HmiProps.BorderWidth }}"
                  hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}"
                  hmi-bind:stroke="{{ Converter.RGBA( LocalProps.BorderColor ) }}"
                  hmi-bind:stroke-width="{ LocalProps.BorderWidth }"
                  rx="5" />
        </clipPath>

    </defs>

    <g id="ElementsGroupRadioButton">
        <g id="ExtendedButton">
          
            <rect id="ItemRect_Background"
                hmi-bind:x="{{ HmiProps.BorderWidth / 2 }}"
                hmi-bind:y="{{ HmiProps.BorderWidth / 2 }}"
                hmi-bind:width="{{ HmiProps.Width - HmiProps.BorderWidth }}"
                hmi-bind:height="{{ HmiProps.Height - HmiProps.BorderWidth }}"
                hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}" />
          
            <g clip-path="url(#ItemClipRect)">
                <g hmi:if="{{ LocalProps.RadioButtonBoxCount != 0 }}" id="SelectionItem_0"
                   hmi-bind:transform="translate(0, {{ LocalProps.ScrollBarPosition * -1.0 }} )">
                    <hmi:include template="include.style.flat.radiobutton.svghmi" hmi-bind:forEach="{ HmiProps.SelectionItems }"
                                hmi-bind:x="{ LocalProps.ContentPositionX }"
                                hmi-bind:y="{ LocalProps.ContentPositionY }"
                                hmi-bind:width="{ LocalProps.ContentWidth }"
                                hmi-bind:height="{ LocalProps.ContentHeight }">

                        <hmi:param name="ItemOperable"           type="boolean"        hmi-bind:value="{{ and( HmiProps.Enabled, HmiProps.Operability == HmiOperability.Operable ) }}"  />
                        <hmi:param name="ForeColor"              type="HmiColor"       hmi-bind:value="{ HmiProps.ForeColor }"                                                          />
                        <hmi:param name="BackColor"              type="HmiColor"       hmi-bind:value="{ HmiProps.AlternateBackColor }"                                                 />
                        <hmi:param name="BorderColor"            type="HmiColor"       hmi-bind:value="{ HmiProps.AlternateBorderColor }"                                               />
                        <hmi:param name="FocusColor"             type="HmiColor"       hmi-bind:value="{ HmiProps.FocusColor }"                                                         />
                        <hmi:param name="BorderWidth"            type="number"         value="2"                                                                                        />
                        <hmi:param name="Content"                type="HmiContentPart" hmi-bind:value="{ HmiProps.Content }"                                                            />
                        <hmi:param name="Font"                   type="HmiFontPart"    hmi-bind:value="{ HmiProps.Font }"                                                               />
                        <hmi:param name="SelectorPosition"       type="number"         hmi-bind:value="{ HmiProps.SelectorPosition }"                                                   />
                        <hmi:param name="SelectionItemHeight"    type="number"         hmi-bind:value="{ LocalProps.SelectionItemHeight }"                                              />
                        <hmi:param name="ShowFocusVisual"        type="boolean"        hmi-bind:value="{ HmiProps.ShowFocusVisual }"                                                    />

                    </hmi:include>
                </g>
            </g>

        </g>
        <rect id="ItemRect_Used"
                hmi-bind:x="{{ HmiProps.BorderWidth / 2 }}"
                hmi-bind:y="{{ HmiProps.BorderWidth / 2 }}"
                hmi-bind:width="{{ HmiProps.Width - HmiProps.BorderWidth }}"
                hmi-bind:height="{{ HmiProps.Height - HmiProps.BorderWidth }}"
                hmi-bind:stroke="{{ Converter.RGBA( LocalProps.BorderColor ) }}"
                hmi-bind:stroke-width="{ LocalProps.BorderWidth }"
                fill="none"/>
        <g hmi:if="{{ gt( LocalProps.ContentHeight, LocalProps.ViewHeight ) }}" id="ScrollBarForExpandedRadioButtonGroup">

          <hmi:include template="include.style.flat.scrollbarstandalone.svghmi"
              hmi-bind:width="{ HmiProps.Width }"
              hmi-bind:height="{ HmiProps.Height }" >

            <hmi:param name="BackColor"           type="HmiColor"         hmi-bind:value="{ LocalProps.ScrollBarPart.BackColor }"       />
            <hmi:param name="ThumbBackColor"      type="HmiColor"         hmi-bind:value="{ LocalProps.ScrollBarPart.ThumbBackColor }"  />
            <hmi:param name="Orientation"         type="HmiOrientation"   hmi-bind:value="{{ HmiOrientation.Vertical }}"                />
            <hmi:param name="Width"               type="number"           hmi-bind:value="{ LocalProps.ScrollBarWidth }"                />
            <hmi:param name="Height"              type="number"           hmi-bind:value="{ LocalProps.ScrollBarContentHeight }"        />
            <hmi:param name="BeginValue"          type="number"           value="0"                                                     />
            <hmi:param name="EndValue"            type="number"           hmi-bind:value="{ LocalProps.ContentHeight }"                 />
            <hmi:param name="CurrentValue"        type="number"           hmi-bind:value="{ LocalProps.ScrollBarPosition }"             />
            <hmi:param name="VisibleValueRange"   type="number"           hmi-bind:value="{ LocalProps.ViewHeight }"                    />
            <hmi:param name="Thickness"           type="number"           hmi-bind:value="{ LocalProps.ScrollBarWidth }"                />
            <hmi:param name="SmallStepValueRange" type="number"           hmi-bind:value="{ LocalProps.RadioButtonBoxCount }"           />
            <hmi:param name="BorderWidth"         type="number"           value="0"                                                     />
            <hmi:param name="OffsetX"             type="number"           hmi-bind:value="{ LocalProps.ScrollBarContentPositionX }"     />
            <hmi:param name="OffsetY"             type="number"           hmi-bind:value="{ LocalProps.ContentPositionY }"              />

            </hmi:include>
        </g>
    </g>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2016. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:hmi="http://svg.siemens.com/hmi/"
    xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
    xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
    xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
    xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
    xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
    preserveAspectRatio="none"
    overflow="visible" >

    <hmi:self type="item:HmiScreenWindow" displayName="Flat ScreenWindow" name="style.flat.screenwindow" version="2.8" performanceClass="L" >
        <hmi:focus focusVisual="local" />
    </hmi:self>

    <defs>
        <!-- System definitions of this template -->
        <hmi:localDef name="WindowFramePart"              type="HmiWindowFrameSystemPart"   hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiWindowFrameSystemPart' ) }}"                                              />

        <hmi:localDef name="MinimumWidth"                 type="number"                     value="100"                                                                                                                 />
        <hmi:localDef name="MinimumHeight"                type="number"                     value="50"                                                                                                                  />

        <hmi:localDef name="ShowFocus"                    type="boolean"                    hmi-bind:value="{{ and( HmiProps.ShowFocusVisual, SysProps.HasFocus ) }}" />
        <hmi:localDef name="ShowCaption"                  type="boolean"                    hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowCaption ) }}"                                               />
        <hmi:localDef name="CaptionHeight"                type="number"                     hmi-bind:value="{{ LocalProps.ShowCaption ? LocalProps.WindowFramePart.CaptionHeight : 0 }}"                                />
        <hmi:localDef name="CaptionColor"                 type="number"                     hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : HmiProps.CaptionColor }}"                                      />
        <hmi:localDef name="WindowBorderColor"            type="number"                     hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : LocalProps.WindowFramePart.BorderColor }}"                     />
        <hmi:localDef name="WindowBorderWidth"            type="number"                     hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowBorder ) ? LocalProps.WindowFramePart.BorderWidth : 0 }}"   />

        <clipPath id="WindowClipRect">
            <rect id="ItemRect"
                  hmi-bind:width="{ HmiProps.Width   }"
                  hmi-bind:height="{ HmiProps.Height }"
                  stroke="none" />
        </clipPath>
    </defs>

    <g id="ElementsGroup" clip-path="url(#WindowClipRect)">

        <!-- Engineering Background / missing screen -->
        <g id="ESBackground">
            <!-- Always show background if DesignMode or no screen -->
            <rect id="BackGroundRect" hmi:if="{{ or( SysProps.IsDesignMode, HmiProps.Screen == '' ) }}"
                    hmi-bind:width="{{ HmiProps.Width }}"
                    hmi-bind:height="{{ HmiProps.Height }}"
                    fill="#FFFFFF"
                    stroke="none" />

            <!-- On ES show screen name  -->
            <text hmi:if="{ SysProps.IsDesignMode }"
                  text-anchor="middle" font-family="Siemens Sans" font-size="14px" font-weight="normal" fill="black"
                  hmi-bind:x="{{ HmiProps.Width / 2 }}"
                  hmi-bind:y="{{ ( HmiProps.Height + LocalProps.CaptionHeight ) / 2 }}">
                <hmi:text hmi-bind:value="{{ HmiProps.Screen }}" />
            </text>

        </g>

        <!-- HmiScreenWindow Content -->
        <g >
            <hmi-element:content
                 hmi-bind:left="{ LocalProps.WindowBorderWidth }"
                 hmi-bind:top="{{ LocalProps.WindowBorderWidth + LocalProps.CaptionHeight }}"
                 hmi-bind:width="{{ HmiProps.Width - 2 * LocalProps.WindowBorderWidth }}"
                 hmi-bind:height="{{ HmiProps.Height - 2 * LocalProps.WindowBorderWidth - LocalProps.CaptionHeight }}" />
        </g>
    </g>

    <!-- Frame -->
    <hmi:include template="include.style.flat.hmiwindowframe.default.svghmi"
                 x="0"
                 y="0"
                 hmi-bind:width="{ HmiProps.Width }"
                 hmi-bind:height="{ HmiProps.Height }">

        <hmi:param name="Top"               type="number"           hmi-bind:value="{ HmiProps.Top }"                 />
        <hmi:param name="Left"              type="number"           hmi-bind:value="{ HmiProps.Left }"                />
        <hmi:param name="Width"             type="number"           hmi-bind:value="{ HmiProps.Width }"               />
        <hmi:param name="Height"            type="number"           hmi-bind:value="{ HmiProps.Height }"              />
        <hmi:param name="WindowFlags"       type="HmiWindowFlag"    hmi-bind:value="{ HmiProps.WindowFlags }"         />
        <hmi:param name="MinimumWidth"      type="number"           hmi-bind:value="{ LocalProps.MinimumWidth }"      />
        <hmi:param name="MinimumHeight"     type="number"           hmi-bind:value="{ LocalProps.MinimumHeight }"     />
        <hmi:param name="Icon"              type="HmiGraphic"       hmi-bind:value="{ HmiProps.Icon }"                />
        <hmi:param name="Caption"           type="HmiTextPart"      hmi-bind:value="{ HmiProps.Caption }"             />
        <hmi:param name="CaptionColor"      type="HmiColor"         hmi-bind:value="{ LocalProps.CaptionColor }"      />
        <hmi:param name="ShowCaption"       type="boolean"          hmi-bind:value="{ LocalProps.ShowCaption }"       />
        <hmi:param name="CaptionHeight"     type="number"           hmi-bind:value="{ LocalProps.CaptionHeight }"     />
        <hmi:param name="WindowBorderWidth" type="number"           hmi-bind:value="{ LocalProps.WindowBorderWidth }" />
        <hmi:param name="WindowBorderColor" type="HmiColor"         hmi-bind:value="{ LocalProps.WindowBorderColor }" />
        <hmi:param name="ItemOperable"      type="boolean"          hmi-bind:value="{ HmiProps.Enabled }"             />
        <hmi:param name="WindowState"       type="number"           hmi-bind:value="{ HmiProps.WindowState }" />

    </hmi:include>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2016. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     preserveAspectRatio="none">

  <hmi:self type="item:HmiSlider" displayName="Flat Slider" name="style.flat.slider" version="2.9" performanceClass="L"  >
    <hmi:focus focusVisual="local" />
  </hmi:self>

  <defs>
    <hmi:localDef name="IsMultilineTitle"       type="boolean"  hmi-bind:value="{{ Converter.IsMultiline( HmiProps.Title.Text ) }}" />
    <hmi:localDef name="IsLabelMultiLine"       type="boolean"  hmi-bind:value="{{ Converter.IsMultiline( HmiProps.Label.Text ) }}" />

    <hmi:localDef name="NumberString"           type="string"   value="0123456789" />
    <hmi:localDef name="ScaleFontHeight"        type="number"   hmi-bind:value="{{ Converter.TextHeight( LocalProps.NumberString, HmiProps.StraightScale.LabelFont )  }}" />

    <hmi:localDef name="TitleFontHeight"        type="number"   hmi-bind:value="{{ Converter.TextHeight( HmiProps.Title.Text, HmiProps.Title.Font )  }}" />

    <hmi:localDef name="OperatorControl"        type="boolean"  value="false" />
    <hmi:localDef name="NewProcessValue"        type="number"   value="0" />

    <hmi:localDef name="ItemSpacing"            type="number"   hmi-bind:value="{{ 4 + HmiProps.BorderWidth / 2 }}" />
    <hmi:localDef name="ShowFocus"              type="boolean"  hmi-bind:value="{{ and( HmiProps.ShowFocusVisual, SysProps.HasFocus ) }}" />
    <hmi:localDef name="IsScaleHorizontal"      type="boolean"  hmi-bind:value="{{ HmiProps.StraightScale.Orientation == HmiOrientation.Horizontal }}" />

    <hmi:localDef name="IndicatorSize"          type="number"   value="54" />
    <hmi:localDef name="IsCompactMode"          type="boolean"  hmi-bind:value="{{ LocalProps.IsScaleHorizontal ? or( lt( HmiProps.Width, 100 ), lt( HmiProps.Height, 30 ) ) : or( lt( HmiProps.Width, 30 ), lt( HmiProps.Height, 100 ) ) }}" />

    <hmi:localDef name="BarSpacing"             type="number"   value="0" />
    <hmi:localDef name="BarTickGap"             type="number"   value="2" />
    <hmi:localDef name="LabelOffset"            type="number"   hmi-bind:value="{{  - HmiProps.StraightScale.LabelFont.Size }}" />
    <hmi:localDef name="PeakIndicatorOffset"    type="number"   hmi-bind:value="{{ LocalProps.IsCompactMode ? 0 : -3 }}" />

    <hmi:localDef name="OriginValue"            type="number"   hmi-bind:value="{{ HmiProps.RelativeToOrigin ? Converter.Min( HmiProps.StraightScale.BeginValue, HmiProps.StraightScale.EndValue ) + HmiProps.OriginValue / 100 * abs( HmiProps.StraightScale.EndValue - HmiProps.StraightScale.BeginValue ) : HmiProps.OriginValue }}" />

    <hmi:localDef name="BorderColor"            type="number"   hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : HmiProps.BorderColor }}" />
    <hmi:localDef name="TitleHeight"            type="number"   hmi-bind:value="{{ HmiProps.Title.Visible ? ( LocalProps.IsMultilineTitle ? ( LocalProps.TitleFontHeight * 2 ) : ( LocalProps.TitleFontHeight ) ) : 0 }}" />
    <hmi:localDef name="LabelHeight"            type="number"   hmi-bind:value="{{ HmiProps.Label.Visible ? ( LocalProps.IsLabelMultiLine ? ( Converter.TextHeight( HmiProps.Label.Text, HmiProps.Label.Font ) * 2 ) : ( Converter.TextHeight( HmiProps.Label.Text, HmiProps.Label.Font ) ) ) : 0 }}" />

    <hmi:localDef name="TrendIndicatorWidth"    type="number"   hmi-bind:value="{{ HmiProps.ShowTrendIndicator ? 14 : 0 }}" />
    <hmi:localDef name="TrendIndicatorHeight"   type="number"   hmi-bind:value="{{ HmiProps.ShowTrendIndicator ? 20 : 0 }}" />
    <hmi:localDef name="TrendIndicatorPadding"  type="number"   hmi-bind:value="{{ HmiProps.ShowTrendIndicator ? 10 : 0 }}" />
    <hmi:localDef name="TrendIndicatorOffset"   type="number"   value="10" />
    <hmi:localDef name="TrendIndicatorSpacing"  type="number"   hmi-bind:value="{{ LocalProps.TrendIndicatorWidth + LocalProps.TrendIndicatorPadding }}" />
    <hmi:localDef name="Padding"                type="number"   value="10" />

    <hmi:localDef name="IOFieldWidth"           type="number"   hmi-bind:value="{{ and(eq(HmiProps.ShowValue, false), eq(LocalProps.IsCompactMode, false)) ? 0 : LocalProps.IsCompactMode ? ( HmiProps.Width - 2 * HmiProps.BorderWidth - ( LocalProps.TrendIndicatorPadding / 2 ) - LocalProps.TrendIndicatorWidth - ( LocalProps.IsScaleHorizontal ? 2 : 42 ) ) : ( ( LocalProps.IsScaleHorizontal ? 0.25 * HmiProps.Width - 10 : HmiProps.Width ) - LocalProps.TrendIndicatorSpacing ) }}" />
    <hmi:localDef name="IOFieldHeight"          type="number"   hmi-bind:value="{{ and(eq(HmiProps.ShowValue, false), eq(LocalProps.IsCompactMode, false)) ? 0 : LocalProps.IsCompactMode ? ( ( LocalProps.IsScaleHorizontal ? HmiProps.Height - 2 * HmiProps.BorderWidth - LocalProps.TitleHeight - 42 : HmiProps.Height - 2 * HmiProps.BorderWidth - LocalProps.TitleHeight - 2 ) ) : (gt((HmiProps.Font.Size + 4), 40) ? (HmiProps.Font.Size + 4) : 40) }}" />

    <hmi:localDef name="ScaleX"                 type="number"   hmi-bind:value="{{ LocalProps.IsCompactMode ? ( HmiProps.BorderWidth + 1 ) : ( LocalProps.IsScaleHorizontal ? 20 : 0.75 * HmiProps.Width - 50 ) }}" />
    <hmi:localDef name="ScaleWidth"             type="number"   hmi-bind:value="{{ LocalProps.IsCompactMode ? ( LocalProps.IsScaleHorizontal ? HmiProps.Width - 2 * HmiProps.BorderWidth - 2 : HmiProps.Width - 2 * HmiProps.BorderWidth - 42 ) : ( LocalProps.IsScaleHorizontal ? (eq(HmiProps.ShowValue, false) ? 1 : 0.75) * HmiProps.Width - (eq(HmiProps.ShowValue, false) ? 40 : 20) : 0.25 * HmiProps.Width ) }}" />
    <hmi:localDef name="ScaleHeight"            type="number"   hmi-bind:value="{{ LocalProps.IsCompactMode ? ( LocalProps.IsScaleHorizontal ? HmiProps.Height - 2 * HmiProps.BorderWidth - LocalProps.TitleHeight - 42 : HmiProps.Height - 2 * HmiProps.BorderWidth - LocalProps.TitleHeight - 2 ) : ( LocalProps.IsScaleHorizontal ? HmiProps.Height - LocalProps.TitleHeight - LocalProps.LabelHeight - 50 - LocalProps.ScaleFontHeight : HmiProps.Height - LocalProps.TitleHeight - LocalProps.LabelHeight - LocalProps.IOFieldHeight - 40 ) }}" />
    <hmi:localDef name="ScaleY"                 type="number"   hmi-bind:value="{{ LocalProps.IsCompactMode ? ( HmiProps.BorderWidth + LocalProps.TitleHeight + 1 ) : ( LocalProps.IsScaleHorizontal ? ( LocalProps.TitleHeight + LocalProps.ScaleFontHeight ) : LocalProps.TitleHeight + 20 ) }}" />

    <hmi:localDef name="RibbonWidth"            type="number"   hmi-bind:value="{{ LocalProps.IsScaleHorizontal ? LocalProps.ScaleHeight : LocalProps.ScaleWidth }}" />

    <hmi:localDef name="IOFieldX"               type="number"   hmi-bind:value="{{ and(eq(HmiProps.ShowValue, false), eq(LocalProps.IsCompactMode, false)) ? 0 : LocalProps.IsCompactMode ? LocalProps.ScaleX : ( LocalProps.IsScaleHorizontal ? LocalProps.ScaleX + LocalProps.ScaleWidth + LocalProps.Padding : 0 ) }}" />
    <hmi:localDef name="IOFieldY"               type="number"   hmi-bind:value="{{ and(eq(HmiProps.ShowValue, false), eq(LocalProps.IsCompactMode, false)) ? 0 : LocalProps.IsCompactMode ? LocalProps.ScaleY : ( LocalProps.IsScaleHorizontal ? LocalProps.ScaleY : LocalProps.ScaleY + LocalProps.ScaleHeight + 20 ) }}" />

    <hmi:localDef name="TrendIndicatorX"        type="number"   hmi-bind:value="{{ HmiProps.Width - LocalProps.TrendIndicatorWidth - HmiProps.BorderWidth - ( LocalProps.IsCompactMode ?  ( LocalProps.IsScaleHorizontal ? 0 : 42 ) : 0 ) }}" />
    <hmi:localDef name="TrendIndicatorY"        type="number"   hmi-bind:value="{{ LocalProps.IOFieldY + ( LocalProps.IsCompactMode ? ( LocalProps.IsScaleHorizontal ? LocalProps.IOFieldHeight / 4 : LocalProps.IOFieldHeight / 3 ) : LocalProps.TrendIndicatorOffset ) }}" />

    <hmi:localDef name="ThresholdFallbackColor" type="number"   hmi-bind:value="{ HmiProps.NormalRangeColor }" />
    <hmi:localDef name="ProcessValueColorRaw"   type="number"   hmi-bind:value="{{ Converter.ThresholdColorForValue( HmiProps.ProcessValue, HmiProps.Thresholds, LocalProps.ThresholdFallbackColor ) }}" />
    <hmi:localDef name="ProcessValueColor"      type="string"   hmi-bind:value="{{ Converter.RGBA( LocalProps.ProcessValueColorRaw ) }}" />
    <hmi:localDef name="IOFieldTextColor"       type="string"   hmi-bind:value="{{ LocalProps.IsCompactMode ? Converter.RGBA( HmiProps.ProcessValueIndicatorForeColor ) : LocalProps.ProcessValueColor }}" />

    <hmi:localDef name="ScaleSurchargeCalc"     type="number"   hmi-bind:value="{{ LocalProps.IndicatorSize / 2 }}" />
    <hmi:localDef name="ScaleSurcharge"         type="number"   hmi-bind:value="{{ or ( or( HmiProps.ProcessValueIndicatorMode == HmiProcessIndicatorMode.DetailedIndicator, HmiProps.ProcessValueIndicatorMode == HmiProcessIndicatorMode.BarWithDetailedIndicator ) ,
                                                                                            has( HmiProps.StraightScale.ScaleMode, HmiScaleMode.Labels ) ) ? LocalProps.ScaleSurchargeCalc : 0 }}" />
    <hmi:localDef name="StraightDialLength"     type="number"   hmi-bind:value="{{ ( LocalProps.IsScaleHorizontal ? LocalProps.ScaleWidth : LocalProps.ScaleHeight ) - 2 * ( LocalProps.BarSpacing + LocalProps.ScaleSurcharge ) }}" />

    <hmi:localDef name="ItemOperable"           type="boolean"  hmi-bind:value="{{ HmiProps.Operability == HmiOperability.Operable }}" />

    <hmi:localDef name="TitleCompactCheckedWidth"    type="number"   hmi-bind:value="{{ and( LocalProps.IsCompactMode, not( LocalProps.IsScaleHorizontal) ) ? HmiProps.Width - 40 : HmiProps.Width }}" />


    <!-- section: action definitions -->
    <hmi:action id="down" hmi-bind:condition="{ LocalProps.ItemOperable }" >
      <hmi:setProperty name="LocalProps.NewProcessValue" type="number" hmi-bind:value="{ HmiProps.ProcessValue }" />
      <hmi:setProperty name="LocalProps.OperatorControl" type="boolean" value="true" />
    </hmi:action>

    <hmi:action id="dragged" hmi-bind:condition="{ LocalProps.ItemOperable }" >
      <hmi:call method="set" name="LocalProps.NewProcessValue" hmi-bind:condition="{ LocalProps.OperatorControl }" />
      <hmi:setProperty name="HmiProps.ProcessValue" type="number" hmi-bind:value="{ LocalProps.NewProcessValue }" hmi-bind:condition="{{ and( HmiProps.WriteDuringChange, LocalProps.OperatorControl ) }}" />
    </hmi:action>

    <hmi:action id="up" hmi-bind:condition="{ LocalProps.ItemOperable }" >
      <hmi:setProperty name="HmiProps.ProcessValue"      type="number" hmi-bind:value="{ LocalProps.NewProcessValue }" hmi-bind:condition="{ LocalProps.OperatorControl }" />
      <hmi:setProperty name="LocalProps.OperatorControl" type="boolean" value="false" />
    </hmi:action>

    <hmi:action id="increaseProcessValue" hmi-bind:condition="{{ and( LocalProps.ItemOperable, LocalProps.IsCompactMode ) }}" >
      <hmi:setProperty name="HmiProps.ProcessValue"      type="number" hmi-bind:value="{{ HmiProps.ProcessValue + 1 }}" />
    </hmi:action>

    <hmi:action id="decreaseProcessValue" hmi-bind:condition="{{ and( LocalProps.ItemOperable, LocalProps.IsCompactMode ) }}" >
      <hmi:setProperty name="HmiProps.ProcessValue"      type="number" hmi-bind:value="{{ HmiProps.ProcessValue - 1 }}" />
    </hmi:action>

  </defs>

  <g id="ElementsGroup" hmi-bind:opacity="{{ LocalProps.ItemOperable ? 1.0 : 0.5 }}">
    <!-- item rect -->
    <rect id="ItemRect"
        hmi:if="{{ and( not( LocalProps.IsCompactMode ), (or( LocalProps.ShowFocus, or( (Converter.Alpha( HmiProps.BackColor ) != 0), (Converter.Alpha( HmiProps.BorderColor ) != 0) ) ) ) ) }}"
        hmi-bind:x="{{ HmiProps.BorderWidth / 2 }}"
        hmi-bind:y="{{ HmiProps.BorderWidth / 2 }}"
        hmi-bind:width="{{ HmiProps.Width - HmiProps.BorderWidth }}"
        hmi-bind:height="{{ HmiProps.Height - HmiProps.BorderWidth }}"
        hmi-bind:stroke="{{ Converter.RGBA( LocalProps.BorderColor ) }}"
        hmi-bind:stroke-width="{ HmiProps.BorderWidth }"
        hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}" />

    <g id="TitleGroup" hmi:if="{{ LocalProps.TitleHeight != 0 }}">
      <g id="SingleLineTitle" hmi:if="{{ not(LocalProps.IsMultilineTitle) }}">
        <text hmi-bind:fill="{{ Converter.RGBA( HmiProps.Title.ForeColor ) }}"
          hmi-bind:x="{{ HmiProps.Width / 2 }}"
          hmi-bind:y="{ LocalProps.TitleHeight }"
          hmi-bind:font-size="{ HmiProps.Title.Font.Size }"
          hmi-bind:font-style="{{ HmiProps.Title.Font.Italic ? 'italic' : 'normal' }}"
          hmi-bind:font-weight="{ HmiProps.Title.Font.Weight }"
          hmi-bind:font-family="{ HmiProps.Title.Font.Name }"
          hmi-bind:text-decoration="{{ Converter.TextDecoration( HmiProps.Title.Font ) }}"
          text-anchor="middle"
          dominant-baseline="auto">
          <hmi:text hmi-bind:value="{ HmiProps.Title.Text }" />
        </text>
      </g>
      <g id="MultiLineTitle" hmi:if="{ LocalProps.IsMultilineTitle }">
          <hmi-element:textField
                start-x="0"
                start-y="0"
                hmi-bind:width="{ LocalProps.TitleCompactCheckedWidth }"
                hmi-bind:height="{ LocalProps.TitleHeight }"

                hmi-bind:value="{ HmiProps.Title.Text }"
                hmi-bind:fore-color="{{ Converter.RGBA( HmiProps.Title.ForeColor ) }}"
                horizontal-text-alignment="center"
                vertical-text-alignment="top"
                read-only="true"
                output-format="{S}"

                horizontal-scrollbar-visibility="collapsed"
                vertical-scrollbar-visibility="collapsed"
                text-trimming="character-ellipsis"
                text-wrapping="no-wrap"
                multi-line="true">
            <hmi-feature:inputBehavior clear-on-activate="false" />
            <hmi-feature:font hmi-bind:scope="{ HmiProps.Title.Font }" />
          </hmi-element:textField>
      </g>
    </g>

    <g id="LabelGroup" hmi:if="{{ LocalProps.LabelHeight != 0 }}">
        <g id="LabelSingleLineText" hmi:if="{{ not( LocalProps.IsLabelMultiLine )}}">
            <text hmi-bind:fill="{{ Converter.RGBA( HmiProps.Label.ForeColor ) }}"
                hmi-bind:x="{{ HmiProps.Width / 2 }}"
                hmi-bind:y="{{ HmiProps.Height - LocalProps.ItemSpacing - LocalProps.LabelHeight / 2 - 2 }}"
                hmi-bind:font-size="{ HmiProps.Label.Font.Size }"
                hmi-bind:font-style="{{ HmiProps.Label.Font.Italic ? 'italic' : 'normal' }}"
                hmi-bind:font-weight="{ HmiProps.Label.Font.Weight }"
                hmi-bind:font-family="{ HmiProps.Label.Font.Name }"
                hmi-bind:text-decoration="{{ Converter.TextDecoration( HmiProps.Label.Font ) }}"
                text-anchor="middle"
                dominant-baseline="auto">
                <hmi:text hmi-bind:value="{ HmiProps.Label.Text }" />
            </text>
        </g>
        <g id="LabelMultiLineText" hmi:if="{ LocalProps.IsLabelMultiLine }">
            <hmi-element:textField
                hmi-bind:start-y="{{ HmiProps.Height - LocalProps.ItemSpacing - LocalProps.LabelHeight / 2 - 10 }}"
                hmi-bind:width="{ HmiProps.Width }"
                hmi-bind:height="{ LocalProps.LabelHeight }"
                hmi-bind:value="{ HmiProps.Label.Text }"
                hmi-bind:fore-color="{{ Converter.RGBA( HmiProps.Label.ForeColor ) }}"
                text-wrapping="no-wrap"
                text-trimming="character-ellipsis"       
                horizontal-text-alignment="center"
                vertical-text-alignment="top"
                enabled="false"
                read-only="true"
                multi-line="true"
                horizontal-scrollbar-visibility="collapsed"
                vertical-scrollbar-visibility="collapsed"
                >
                <hmi-feature:font hmi-bind:scope="{ HmiProps.Label.Font }" />
            </hmi-element:textField>
        </g>            
    </g>

    <g id="BarGroup" hmi-bind:transform="translate( {{ LocalProps.ScaleX }} , {{ LocalProps.ScaleY }})">

      <!-- background  -->
      <rect id="BarBackGroundRect"
            hmi-bind:x="{ LocalProps.BarSpacing }"
            hmi-bind:y="{ LocalProps.BarSpacing }"
            hmi-bind:width="{{ LocalProps.ScaleWidth }}"
            hmi-bind:height="{{ LocalProps.ScaleHeight }}"
            hmi-bind:fill="{{ Converter.RGBA( HmiProps.ScaleForeColor ) }}" />

      <g id="StraightDialGroupA">
        <hmi-element:straightDial hmi-bind:start-x="{{ LocalProps.BarSpacing + ( LocalProps.IsScaleHorizontal ? LocalProps.ScaleSurcharge : 0 ) }}"
                                  hmi-bind:start-y="{{ LocalProps.BarSpacing + ( LocalProps.IsScaleHorizontal ? 0 : LocalProps.ScaleSurcharge ) }}"
                                  hmi-bind:length="{ LocalProps.StraightDialLength }"
                                  hmi-bind:orientation="{ HmiProps.StraightScale.Orientation }"
                                  hmi-bind:begin-surcharge="{ LocalProps.ScaleSurcharge }"
                                  hmi-bind:end-surcharge="{ LocalProps.ScaleSurcharge }">

          <hmi-feature:scale hmi-bind:begin-value="{ HmiProps.StraightScale.BeginValue }"
                             hmi-bind:end-value="{ HmiProps.StraightScale.EndValue }"
                             hmi-bind:type="{ HmiProps.StraightScale.ScalingType }"
                             hmi-bind:maximum-sections="{{ Converter.Max( 5, HmiProps.StraightScale.DivisionCount ) }}"
                             hmi-bind:extend="{{ HmiProps.StraightScale.AutoScaling ? 'both' : 'none' }}">

            <!-- forward scale e.g. BeginValue lt EndValue -->
            <hmi-feature:range hmi-bind:condition="{{ lt( HmiProps.StraightScale.BeginValue, HmiProps.StraightScale.EndValue ) }}"
                               hmi-bind:begin-value="{{ le( LocalProps.OriginValue, HmiProps.StraightScale.BeginValue ) ? 'scale-begin' : ge( LocalProps.OriginValue, HmiProps.StraightScale.EndValue ) ? 'scale-end' : Converter.FormatPattern( LocalProps.OriginValue, '{I}' ) }}"
                               hmi-bind:end-value="{ HmiProps.ProcessValue }">

              <hmi-feature:ribbons hmi-bind:condition="{{ or( HmiProps.ProcessValueIndicatorMode == HmiProcessIndicatorMode.Bar, HmiProps.ProcessValueIndicatorMode == HmiProcessIndicatorMode.BarWithDetailedIndicator ) }}"
                                   hmi-bind:offset="{{ LocalProps.RibbonWidth / 2 }}"
                                   hmi-bind:stroke-width="{ LocalProps.RibbonWidth }"
                                   hmi-bind:stroke="{ LocalProps.ProcessValueColor }" />
              <hmi-feature:ticks hmi-bind:condition="{{ not( LocalProps.IsCompactMode ) }}"
                                 position-filter="begin"
                                 stroke-width="1"
                                 hmi-bind:stroke="{{ Converter.RGBA( HmiProps.StraightScale.TickColor ) }}"
                                 hmi-bind:length="{ LocalProps.RibbonWidth }" />
            </hmi-feature:range>

            <!-- revers scale e.g. BeginValue gt EndValue -->
            <hmi-feature:range hmi-bind:condition="{{ gt( HmiProps.StraightScale.BeginValue, HmiProps.StraightScale.EndValue ) }}"
                               hmi-bind:begin-value="{{ ge( LocalProps.OriginValue, HmiProps.StraightScale.BeginValue ) ? 'scale-begin' : le( LocalProps.OriginValue, HmiProps.StraightScale.EndValue ) ? 'scale-end' : Converter.FormatPattern( LocalProps.OriginValue, '{I}' ) }}"
                               hmi-bind:end-value="{ HmiProps.ProcessValue }">

              <hmi-feature:ribbons hmi-bind:condition="{{ or( HmiProps.ProcessValueIndicatorMode == HmiProcessIndicatorMode.Bar, HmiProps.ProcessValueIndicatorMode == HmiProcessIndicatorMode.BarWithDetailedIndicator ) }}"
                                   hmi-bind:offset="{{ LocalProps.RibbonWidth / 2 }}"
                                   hmi-bind:stroke-width="{ LocalProps.RibbonWidth }"
                                   hmi-bind:stroke="{ LocalProps.ProcessValueColor }" />
              <hmi-feature:ticks hmi-bind:condition="{{ not( LocalProps.IsCompactMode ) }}"
                                 position-filter="begin"
                                 stroke-width="1"
                                 hmi-bind:stroke="{{ Converter.RGBA( HmiProps.StraightScale.TickColor ) }}"
                                 hmi-bind:length="{ LocalProps.RibbonWidth }" />
            </hmi-feature:range>
            <!-- AutoScaling true -->
            <hmi-feature:autoMeasure hmi-bind:condition="{ HmiProps.StraightScale.AutoScaling }">

              <!-- Ticks -->
              <hmi-feature:division hmi-bind:condition="{{ and( not( LocalProps.IsCompactMode ), has( HmiProps.StraightScale.ScaleMode, HmiScaleMode.Ticks )) }}"
                                    hmi-bind:count="{ HmiProps.StraightScale.SubDivisionCount }">

                <hmi-feature:ticks hmi-bind:offset="{ LocalProps.BarTickGap }"
                                   hmi-bind:position-filter="{{ has( HmiProps.StraightScale.ScaleMode, HmiScaleMode.Labels ) ? 'inner' : 'regular' }}"
                                   hmi-bind:length="{{ LocalProps.RibbonWidth / 2 - LocalProps.BarTickGap }}"
                                   hmi-bind:stroke="{{ Converter.RGBA( HmiProps.StraightScale.TickColor ) }}"
                                   stroke-width="1" />

                <hmi-feature:ticks hmi-bind:offset="{ LocalProps.BarTickGap }"
                                   hmi-bind:position-filter="{{ 'begin end' }}"
                                   hmi-bind:length="{{ LocalProps.RibbonWidth / 2 - LocalProps.BarTickGap }}"
                                   hmi-bind:stroke="{{ Converter.RGBA( HmiProps.StraightScale.TickColor ) }}"
                                   stroke-width="2" />
              </hmi-feature:division>

              <hmi-feature:labels hmi-bind:condition="{{ and( not( LocalProps.IsCompactMode ), has( HmiProps.StraightScale.ScaleMode, HmiScaleMode.Labels )) }}"
                                  hmi-bind:offset="{ LocalProps.LabelOffset }"
                                  hmi-bind:fill="{{ Converter.RGBA( HmiProps.StraightScale.LabelColor ) }}"
                                  hmi-bind:alignment="{{ LocalProps.IsScaleHorizontal ? '0 -1' : '1 0' }}"
                                  hmi-bind:output-format="{ HmiProps.StraightScale.OutputFormat }" >
                <hmi-feature:font hmi-bind:scope="{ HmiProps.StraightScale.LabelFont }" />
              </hmi-feature:labels>
            </hmi-feature:autoMeasure>

            <!-- AutoScaling false -->
            <hmi-feature:division hmi-bind:condition="{{ and( not( LocalProps.IsCompactMode ), not( HmiProps.StraightScale.AutoScaling )) }}"
                                  hmi-bind:count="{ HmiProps.StraightScale.DivisionCount }">
              <!-- Ticks -->
              <hmi-feature:division hmi-bind:condition="{{ has( HmiProps.StraightScale.ScaleMode, HmiScaleMode.Ticks ) }}"
                                    hmi-bind:count="{ HmiProps.StraightScale.SubDivisionCount }">

                <hmi-feature:ticks hmi-bind:offset="{ LocalProps.BarTickGap }"
                                   hmi-bind:position-filter="{{ 'inner end' }}"
                                   hmi-bind:length="{{ LocalProps.RibbonWidth / 2 - LocalProps.BarTickGap }}"
                                   hmi-bind:stroke="{{ Converter.RGBA( HmiProps.StraightScale.TickColor ) }}" />
              </hmi-feature:division>

              <hmi-feature:labels hmi-bind:condition="{{ has( HmiProps.StraightScale.ScaleMode, HmiScaleMode.Labels ) }}"
                                  hmi-bind:offset="{ LocalProps.LabelOffset }"
                                  hmi-bind:fill="{{ Converter.RGBA( HmiProps.StraightScale.LabelColor ) }}"
                                  hmi-bind:alignment="{{ LocalProps.IsScaleHorizontal ? '0 -1' : '1 0' }}"
                                  hmi-bind:output-format="{ HmiProps.StraightScale.OutputFormat }">
                <hmi-feature:font hmi-bind:scope="{ HmiProps.StraightScale.LabelFont }" />
              </hmi-feature:labels>
            </hmi-feature:division>
            <!-- Min peak value indicator -->
            <hmi-feature:marker hmi-bind:value="{ HmiProps.ComputedMinPeakValue }" hmi-bind:condition="{{ has( HmiProps.PeakIndicators, HmiPeakIndicator.Low ) }}">

              <hmi-feature:poleMarkers hmi-bind:alignment-horizontal="{{ LocalProps.IsScaleHorizontal ? 0.0 : -1.0 }}"
                                       hmi-bind:alignment-vertical="{{ LocalProps.IsScaleHorizontal ? -1.0 :  0.0 }}"
                                       hmi-bind:content-width="{{ LocalProps.IsScaleHorizontal ? 9 : 11 }}"
                                       hmi-bind:content-height="{{ LocalProps.IsScaleHorizontal ? 11 : 9 }}">

                <!-- Sub template for the Min peak value indicator -->
                <hmi:master-include template="include.style.flat.peakindicator.svghmi" >

                  <hmi:param name="IndicatorOffset"       type="number"           hmi-bind:value="{ LocalProps.PeakIndicatorOffset }" />
                  <hmi:param name="ScaleOrientation"      type="HmiOrientation"   hmi-bind:value="{ HmiProps.StraightScale.Orientation }" />
                  <hmi:param name="IndicatorForeColor"    type="HmiColor"         hmi-bind:value="{ HmiProps.Title.ForeColor }" />

                </hmi:master-include>

              </hmi-feature:poleMarkers>

            </hmi-feature:marker>

            <!-- Max peak value indicator -->
            <hmi-feature:marker hmi-bind:value="{ HmiProps.ComputedMaxPeakValue }" hmi-bind:condition="{{ has( HmiProps.PeakIndicators, HmiPeakIndicator.High ) }}">

              <hmi-feature:poleMarkers hmi-bind:alignment-horizontal="{{ LocalProps.IsScaleHorizontal ? 0.0 : -1.0 }}"
                                       hmi-bind:alignment-vertical="{{ LocalProps.IsScaleHorizontal ? -1.0 :  0.0 }}"
                                       hmi-bind:content-width="{{ LocalProps.IsScaleHorizontal ? 9 : 11 }}"
                                       hmi-bind:content-height="{{ LocalProps.IsScaleHorizontal ? 11 : 9 }}">

                <!-- Sub template for the Max peak value indicator -->
                <hmi:master-include template="include.style.flat.peakindicator.svghmi" >

                  <hmi:param name="IndicatorOffset"       type="number"           hmi-bind:value="{ LocalProps.PeakIndicatorOffset }" />
                  <hmi:param name="ScaleOrientation"      type="HmiOrientation"   hmi-bind:value="{ HmiProps.StraightScale.Orientation }" />
                  <hmi:param name="IndicatorForeColor"    type="HmiColor"         hmi-bind:value="{ HmiProps.Title.ForeColor }" />

                </hmi:master-include>

              </hmi-feature:poleMarkers>

            </hmi-feature:marker>

            <!-- process value indicator -->
            <hmi-feature:marker hmi-bind:value="{{ LocalProps.OperatorControl ? LocalProps.NewProcessValue : HmiProps.ProcessValue }}">

              <hmi-feature:poleMarkers hmi-bind:condition="{{ not( LocalProps.IsCompactMode ) }}"
                                       hmi-event:up="url(#up)" hmi-event:down="url(#down)" hmi-event:pan="url(#dragged)"
                                       hmi-bind:offset="{{ LocalProps.RibbonWidth - 14 }}"
                                       alignment-horizontal="0"
                                       alignment-vertical="0"
                                       hmi-bind:content-width="{  LocalProps.IndicatorSize }"
                                       hmi-bind:content-height="{ LocalProps.IndicatorSize }" >

                <!-- Sub template for the process value indicator -->
                <hmi:master-inline>

                  <hmi:param name="IsScaleHorizontal"                 type="boolean"              hmi-bind:value="{ LocalProps.IsScaleHorizontal }"               />
                  <hmi:param name="ProcessValueIndicatorForeColor"    type="HmiColor"             hmi-bind:value="{ HmiProps.ProcessValueIndicatorForeColor }"    />
                  <hmi:param name="ProcessValueIndicatorBackColor"    type="HmiColor"             hmi-bind:value="{ HmiProps.ProcessValueIndicatorBackColor }"    />
                  <hmi:param name="AlternateBorderColor"              type="HmiColor"             hmi-bind:value="{ HmiProps.AlternateBorderColor }"              />

                                    <hmi:template>
                    <svg xmlns="http://www.w3.org/2000/svg"
                         xmlns:xlink="http://www.w3.org/1999/xlink"
                         xmlns:hmi="http://svg.siemens.com/hmi/"
                         xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                         xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
                         xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
                         xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
                         xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
                         overflow="visible">

                      <hmi:self type="custom" displayName="PVIndicator" name="extended.pvindicator" version="1.0.0" performanceClass="s">
                        <hmi:paramDef name="IsScaleHorizontal"              type="boolean"              />
                        <hmi:paramDef name="ProcessValueIndicatorForeColor" type="HmiColor"             />
                        <hmi:paramDef name="ProcessValueIndicatorBackColor" type="HmiColor"             />
                        <hmi:paramDef name="AlternateBorderColor"           type="HmiColor"             />
                      </hmi:self>

                      <defs>
                      </defs>

                      <g id="TIFID_ProcessIndicatorGroup" hmi-bind:fill="{{ Converter.RGBA( ParamProps.ProcessValueIndicatorBackColor ) }}"
                         hmi-bind:transform="translate({{ ParamProps.IsScaleHorizontal ? 0 : 18 }},{{ ParamProps.IsScaleHorizontal ? 18 : 0 }})">

                        <path hmi:if="{{ ParamProps.IsScaleHorizontal == 1 }}" hmi-bind:fill="{{ Converter.RGBA( ParamProps.AlternateBorderColor ) }}"  d="M 27,0 l 9,18 l -18,0 z" />
                        <path hmi:if="{{ ParamProps.IsScaleHorizontal == 0 }}" hmi-bind:fill="{{ Converter.RGBA( ParamProps.AlternateBorderColor ) }}"  d="M 0,27 l 18,-9 l 0,18 z" />


                        <g hmi-bind:transform="translate({{ ParamProps.IsScaleHorizontal ? 0 : 17 }},{{ ParamProps.IsScaleHorizontal ? 17 : 0 }})">
                          <circle r="27" cx="27" cy="27" stroke-width="2"
                                  hmi-bind:stroke="{{ Converter.RGBA( ParamProps.AlternateBorderColor ) }}"
                                  hmi-bind:fill="{{ Converter.RGBA( ParamProps.ProcessValueIndicatorBackColor ) }}" />

                          <g hmi-bind:transform="translate({{ ParamProps.IsScaleHorizontal ? 54  : 0 }}) rotate({{ ParamProps.IsScaleHorizontal ? 90 : 0 }})">
                            <path hmi-bind:fill="{{ Converter.RGBA( ParamProps.ProcessValueIndicatorForeColor ) }}"
                                  d="M 27,8 l 10,10 l -2,2 l -8,-6 l -8,6 l -2,-2 z" />
                            <path hmi-bind:fill="{{ Converter.RGBA( ParamProps.ProcessValueIndicatorForeColor ) }}"
                                  d="M 27,48 l -10,-10 l 2,-2 l 8,6 l 8,-6 l 2,2 z" />
                          </g>
                        </g>

                      </g>

                    </svg>
                  </hmi:template>
                </hmi:master-inline>

              </hmi-feature:poleMarkers>
              <hmi-feature:poleMarkers hmi-bind:condition="{ LocalProps.IsCompactMode }"
                                       hmi-bind:offset="{{ LocalProps.RibbonWidth - 14 }}"
                                       alignment-horizontal="0"
                                       alignment-vertical="0"
                                       content-width="36"
                                       content-height="36" >
                <hmi:master-inline>

                                    <hmi:param name="IsScaleHorizontal"                 type="boolean"              hmi-bind:value="{ LocalProps.IsScaleHorizontal }"       />
                                    <hmi:param name="IndicatorColor"                    type="HmiColor"             hmi-bind:value="{ HmiProps.StraightScale.TickColor }"   />

                                    <hmi:template>
                    <svg xmlns="http://www.w3.org/2000/svg"
                         xmlns:xlink="http://www.w3.org/1999/xlink"
                         xmlns:hmi="http://svg.siemens.com/hmi/"
                         xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                         xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
                         xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
                         xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
                         xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
                         overflow="visible">

                      <hmi:self type="custom" displayName="PVIndicator" name="extended.pvindicator" version="1.0.0" performanceClass="s">
                        <hmi:paramDef name="IsScaleHorizontal"              type="boolean"  />
                        <hmi:paramDef name="IndicatorColor"                 type="HmiColor" />
                      </hmi:self>

                      <defs>
                      </defs>

                      <g hmi-bind:transform="translate({{ ParamProps.IsScaleHorizontal ? -9 : 18 }},{{ ParamProps.IsScaleHorizontal ? 18 : -9 }})">
                        <path hmi:if="{{ ParamProps.IsScaleHorizontal == 1 }}" hmi-bind:fill="{{ Converter.RGBA( ParamProps.IndicatorColor ) }}"  d="M 27,0 l 9,18 l -18,0 z" />
                        <path hmi:if="{{ ParamProps.IsScaleHorizontal == 0 }}" hmi-bind:fill="{{ Converter.RGBA( ParamProps.IndicatorColor ) }}"  d="M 0,27 l 18,-9 l 0,18 z" />
                      </g>
                    </svg>
                  </hmi:template>
                </hmi:master-inline>
              </hmi-feature:poleMarkers>
            </hmi-feature:marker>
          </hmi-feature:scale>
        </hmi-element:straightDial>
      </g>
    </g>
    <g id="IOFieldGroup" hmi:if="{{ or(eq(HmiProps.ShowValue, true), eq(LocalProps.IsCompactMode, true)) }}">
      <rect id="ItemBorder"
        hmi:if="{ LocalProps.IsCompactMode }"
        hmi-bind:x="{{ HmiProps.BorderWidth / 2 }}"
        hmi-bind:y="{{ HmiProps.BorderWidth / 2 + LocalProps.TitleHeight }}"
        hmi-bind:width="{{ HmiProps.Width - HmiProps.BorderWidth }}"
        hmi-bind:height="{{ HmiProps.Height - HmiProps.BorderWidth - LocalProps.TitleHeight }}"
        hmi-bind:stroke="{{ Converter.RGBA( HmiProps.BorderColor ) }}"
        hmi-bind:stroke-width="{ HmiProps.BorderWidth }"
        fill-opacity="0" />

      <hmi:inline hmi-bind:x="{ LocalProps.IOFieldX }"
                  hmi-bind:y="{ LocalProps.IOFieldY }"
                  hmi-bind:width="{ LocalProps.IOFieldWidth }"
                  hmi-bind:height="{ LocalProps.IOFieldHeight }">

        <hmi:param name="Text"                    	type="string"                 	hmi-bind:value="{{ LocalProps.OperatorControl ? LocalProps.NewProcessValue : HmiProps.ProcessValue }}"  />
        <hmi:param name="Font"                    	type="HmiFontPart"            	hmi-bind:value="{ HmiProps.Font }"                                                                      />
        <hmi:param name="TextColor"               	type="string"                   hmi-bind:value="{ LocalProps.IOFieldTextColor }"                                                        />                                                  />
        <hmi:param name="Enabled"                 	type="boolean"                	hmi-bind:value="{{ or( HmiProps.ShowValue, LocalProps.IsCompactMode ) }}"                               />
        <hmi:param name="TargetName"              	type="string"                 	value="HmiProps.ProcessValue"                                                                           />
        <hmi:param name="Width"                    	type="number"                 	hmi-bind:value="{ LocalProps.IOFieldWidth }"                                                            />
        <hmi:param name="Height"                   	type="number"                 	hmi-bind:value="{ LocalProps.IOFieldHeight }"                                                           />
        <hmi:param name="OutputFormat"              type="string"                   hmi-bind:value="{ HmiProps.OutputFormat }"                                                              />

        <hmi:template>
          <svg xmlns="http://www.w3.org/2000/svg"
              xmlns:xlink="http://www.w3.org/1999/xlink"
              xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
              xmlns:hmi="http://svg.siemens.com/hmi/"
              xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
              xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
              xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
              xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
              preserveAspectRatio="none">

            <hmi:self type="custom" displayName="Custom Flat Text Field" name="custom.flat.text.field" version="1.0.1" performanceClass="L">

              <hmi:paramDef name="Text"                       type="string"                   two-way="false" />
              <hmi:paramDef name="Font"                       type="HmiFontPart"                              />
              <hmi:paramDef name="TextColor"                  type="string"                                 />
              <hmi:paramDef name="Enabled"                    type="boolean"                                  />
              <hmi:paramDef name="TargetName"                 type="string"                                   />
              <hmi:paramDef name="Width"                      type="number"                                   />
              <hmi:paramDef name="Height"                     type="number"                                   />
              <hmi:paramDef name="OutputFormat"               type="string"                                   />

            </hmi:self>

            <defs></defs>
            <hmi-element:textField
                        start-x="0"
                        start-y="0"
                        hmi-bind:width="{ ParamProps.Width }"
                        hmi-bind:height="{ ParamProps.Height }"
                        horizontal-text-alignment="center"
                        vertical-text-alignment="middle"
                        hmi-bind:value="{ ParamProps.Text }"
                        hmi-bind:target="{ ParamProps.TargetName }"
                        hmi-bind:fore-color="{ ParamProps.TextColor }"
                        hmi-bind:output-format="{ ParamProps.OutputFormat }"
                        hmi-bind:enabled="{ ParamProps.Enabled }"
                        horizontal-scrollbar-visibility="collapsed"
                        vertical-scrollbar-visibility="collapsed">

              <hmi-feature:inputBehavior clear-on-activate="false" />
              <hmi-feature:font hmi-bind:scope="{ ParamProps.Font }" />

            </hmi-element:textField>
          </svg>
        </hmi:template>
      </hmi:inline>
    </g>
  </g>

  <!--Trend indicator -->
  <g hmi:if="{{ and( HmiProps.ShowTrendIndicator, HmiProps.ComputedValueTendency != HmiValueTendency.Steady ) }}"
                            hmi-bind:transform="translate({ LocalProps.TrendIndicatorX },{ LocalProps.TrendIndicatorY })">

    <path d="M 7,0 l-7,13 l4,0 l0,7 l6,0 l0,-7 l4,0 z"
          hmi-bind:transform="rotate({{ HmiProps.ComputedValueTendency == HmiValueTendency.Downwards ? 180 : 0 }},7,10)"
          hmi-bind:fill="{ LocalProps.IOFieldTextColor }" />

  </g>

  <g id="ElementsGroupCompact" hmi:if="{ LocalProps.IsCompactMode }">

    <line id="AlternateItemBorder"
          x1="0"
          hmi-bind:y1="{{ HmiProps.Height - HmiProps.BorderWidth / 2 }}"
          hmi-bind:x2="{ HmiProps.Width }"
          hmi-bind:y2="{{ HmiProps.Height - HmiProps.BorderWidth / 2 }}"
          hmi-bind:stroke="{{ Converter.RGBA( HmiProps.AlternateBorderColor ) }}"
          hmi-bind:stroke-width="{ HmiProps.BorderWidth }"
              />
    <rect id="SliderBackground"
          hmi-bind:x="{{ LocalProps.IsScaleHorizontal ? HmiProps.BorderWidth + 1 : HmiProps.Width - HmiProps.BorderWidth - 41 }}"
          hmi-bind:y="{{ LocalProps.IsScaleHorizontal ? HmiProps.Height - HmiProps.BorderWidth - 41 : HmiProps.BorderWidth + 1 }}"
          hmi-bind:width="{{ LocalProps.IsScaleHorizontal ? HmiProps.Width - 2 * HmiProps.BorderWidth - 2 : 40 }}"
          hmi-bind:height="{{ LocalProps.IsScaleHorizontal ? 40 : HmiProps.Width - 2 * HmiProps.BorderWidth - 2 }}"
          hmi-bind:fill="{{ Converter.RGBA( HmiProps.StraightScale.TickColor ) }}" />
    <g hmi-bind:transform="translate( {{ LocalProps.IsScaleHorizontal ? HmiProps.Width / 2 - 20 : HmiProps.Width - HmiProps.BorderWidth - 48 }}, {{ LocalProps.IsScaleHorizontal ? HmiProps.Height - HmiProps.BorderWidth - 48 : HmiProps.Height / 2 - 40 }} )">
        <g hmi-bind:transform="translate({{ LocalProps.IsScaleHorizontal ? 54  : 0 }}) rotate({{ ParamProps.IsScaleHorizontal ? 90 : 0 }})">
          <path hmi-bind:fill="{{ Converter.RGBA( HmiProps.ProcessValueIndicatorBackColor ) }}"
              d="M 27,8 l 10,10 l -2,2 l -8,-6 l -8,6 l -2,-2 z"
              hmi-event:down="url(#increaseProcessValue)" />
        <path hmi-bind:fill="{{ Converter.RGBA( HmiProps.ProcessValueIndicatorBackColor ) }}"
              d="M 27,48 l -10,-10 l 2,-2 l 8,6 l 8,-6 l 2,2 z"
              hmi-event:down="url(#decreaseProcessValue)" />
      </g>
    </g>
  </g>
</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2016. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:hmi="http://svg.siemens.com/hmi/"
    xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
    xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
    xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
    xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
    xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"

    preserveAspectRatio="none"
    overflow="visible" >

    <hmi:self type="item:HmiSwacContainer" displayName="Flat SwacContainer" name="style.flat.swaccontainer" version="2.8" performanceClass="L" >
        <hmi:focus focusVisual="local" />
    </hmi:self>

    <defs>
        <!-- System definitions of this template -->
        <hmi:localDef name="WindowFramePart"              type="HmiWindowFrameSystemPart"   hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiWindowFrameSystemPart' ) }}"                              />

        <hmi:localDef name="MinimumWidth"                 type="number"     value="100"                                                                                                                 />
        <hmi:localDef name="MinimumHeight"                type="number"     value="50"                                                                                                                  />

        <hmi:localDef name="ShowFocus"                    type="boolean"    hmi-bind:value="{{ and( HmiProps.ShowFocusVisual, SysProps.HasFocus ) }}" />
        <hmi:localDef name="ShowCaption"                  type="boolean"    hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowCaption ) }}"                                               />
        <hmi:localDef name="CaptionHeight"                type="number"     hmi-bind:value="{{ LocalProps.ShowCaption ? LocalProps.WindowFramePart.CaptionHeight : 0 }}"                                />
        <hmi:localDef name="CaptionColor"                 type="number"     hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : HmiProps.CaptionColor }}"                                      />
        <hmi:localDef name="WindowBorderColor"            type="number"     hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : LocalProps.WindowFramePart.BorderColor }}"                     />
        <hmi:localDef name="WindowBorderWidth"            type="number"     hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowBorder ) ? LocalProps.WindowFramePart.BorderWidth : 0 }}"   />

        <clipPath id="WindowClipRect">
            <rect id="ItemRect"
                  hmi-bind:width="{ HmiProps.Width   }"
                  hmi-bind:height="{ HmiProps.Height }"
                  stroke="none" />
        </clipPath>

    </defs>

    <g id="ElementsGroup" clip-path="url(#WindowClipRect)">

        <!-- Content -->
        <g >
            <hmi-element:content
                 hmi-bind:left="{ LocalProps.WindowBorderWidth }"
                 hmi-bind:top="{{ LocalProps.WindowBorderWidth + LocalProps.CaptionHeight }}"
                 hmi-bind:width="{{ HmiProps.Width - 2 * LocalProps.WindowBorderWidth }}"
                 hmi-bind:height="{{ HmiProps.Height - 2 * LocalProps.WindowBorderWidth - LocalProps.CaptionHeight }}" />
        </g>

    </g>

    <!-- Frame -->
    <hmi:include template="include.style.flat.hmiwindowframe.default.svghmi"
                 x="0"
                 y="0"
                 hmi-bind:width="{ HmiProps.Width }"
                 hmi-bind:height="{ HmiProps.Height }" >

        <hmi:param name="Top"               type="number"           hmi-bind:value="{ HmiProps.Top }"                 />
        <hmi:param name="Left"              type="number"           hmi-bind:value="{ HmiProps.Left }"                />
        <hmi:param name="Width"             type="number"           hmi-bind:value="{ HmiProps.Width }"               />
        <hmi:param name="Height"            type="number"           hmi-bind:value="{ HmiProps.Height }"              />
        <hmi:param name="WindowFlags"       type="HmiWindowFlag"    hmi-bind:value="{ HmiProps.WindowFlags }"         />
        <hmi:param name="MinimumWidth"      type="number"           hmi-bind:value="{ LocalProps.MinimumWidth }"      />
        <hmi:param name="MinimumHeight"     type="number"           hmi-bind:value="{ LocalProps.MinimumHeight }"     />
        <hmi:param name="Icon"              type="HmiGraphic"       hmi-bind:value="{ HmiProps.Icon }"                />
        <hmi:param name="Caption"           type="HmiTextPart"      hmi-bind:value="{ HmiProps.Caption }"             />
        <hmi:param name="CaptionColor"      type="HmiColor"         hmi-bind:value="{ LocalProps.CaptionColor }"      />
        <hmi:param name="ShowCaption"       type="boolean"          hmi-bind:value="{ LocalProps.ShowCaption }"       />
        <hmi:param name="CaptionHeight"     type="number"           hmi-bind:value="{ LocalProps.CaptionHeight }"     />
        <hmi:param name="WindowBorderWidth" type="number"           hmi-bind:value="{ LocalProps.WindowBorderWidth }" />
        <hmi:param name="WindowBorderColor" type="HmiColor"         hmi-bind:value="{ LocalProps.WindowBorderColor }" />
        <hmi:param name="ItemOperable"      type="boolean"          hmi-bind:value="{ HmiProps.Enabled }"             />
        <hmi:param name="WindowState"       type="number"           hmi-bind:value="{ HmiProps.WindowState }" />

    </hmi:include>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.2/dtd/svg12-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-types="http://svg.siemens.com/hmi/types/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     preserveAspectRatio="none" id="ItemRoot"
     overflow="visible">

    <hmi:self type="item:HmiSymbolicIOField" displayName="Flat Symboliciofield" name="style.flat.symboliciofield" version="2.8" performanceClass="L" >
        <hmi:focus focusVisual="local" />
    </hmi:self>

    <defs>
        <!-- Local definitions of this template -->
    </defs>

    <hmi:include template="include.style.flat.combobox.svghmi"
                x="0"
                y="0"
                hmi-bind:width="{ HmiProps.Width }"
                hmi-bind:height="{ HmiProps.Height }" >

        <hmi:param name="MaxListBoxViewCount"   type="number"                  value="7"                                                        />
        <hmi:param name="Content"               type="HmiContentPart" hmi-bind:value="{ HmiProps.Content }"                                     />
        <hmi:param name="Font"                  type="HmiFontPart"    hmi-bind:value="{ HmiProps.Font }"                                        />
        <hmi:param name="Padding"               type="HmiPaddingPart" hmi-bind:value="{ HmiProps.Padding }"                                     />
        <hmi:param name="Width"                 type="number"         hmi-bind:value="{ HmiProps.Width }"                                       />
        <hmi:param name="Height"                type="number"         hmi-bind:value="{ HmiProps.Height }"                                      />
        <hmi:param name="ShowFocus"             type="boolean"        hmi-bind:value="{{ and( HmiProps.ShowFocusVisual, HmiProps.HasFocus ) }}" />
        <hmi:param name="BorderWidth"           type="number"         hmi-bind:value="{ HmiProps.BorderWidth }"                                 />
        <hmi:param name="FocusColor"            type="HmiColor"       hmi-bind:value="{ HmiProps.FocusColor }"                                  />
        <hmi:param name="BorderColor"           type="HmiColor"       hmi-bind:value="{ HmiProps.BorderColor }"                                 />
        <hmi:param name="AlternateBorderColor"  type="HmiColor"       hmi-bind:value="{ HmiProps.AlternateBorderColor }"                        />
        <hmi:param name="BackColor"             type="HmiColor"       hmi-bind:value="{ HmiProps.BackColor }"                                   />
        <hmi:param name="ForeColor"             type="HmiColor"       hmi-bind:value="{ HmiProps.ForeColor }"                                   />
        <hmi:param name="AlternateBackColor"    type="HmiColor"       hmi-bind:value="{ HmiProps.AlternateBackColor }"                          />
        <hmi:param name="SelectionForeColor"    type="HmiColor"       hmi-bind:value="{ HmiProps.SelectionForeColor }"                          />
        <hmi:param name="SelectionBackColor"    type="HmiColor"       hmi-bind:value="{ HmiProps.SelectionBackColor }"                          />
        <hmi:param name="CollapsedBackColor"    type="HmiColor"       hmi-bind:value="{ HmiProps.BackColor }"                                   />
        <hmi:param name="CollapsedForeColor"    type="HmiColor"       hmi-bind:value="{ HmiProps.ForeColor }"                                   />
        <hmi:param name="GraphicWidth"          type="number"         hmi-bind:value="{ HmiProps.GraphicWidth }"                                />
        <hmi:param name="GraphicHeight"         type="number"         hmi-bind:value="{ HmiProps.GraphicHeight }"                               />
        <hmi:param name="Enabled"               type="boolean"        hmi-bind:value="{ HmiProps.Enabled }"                                     />
        <hmi:param name="Operability"           type="HmiOperability" hmi-bind:value="{ HmiProps.Operability }"                                 />
        <hmi:param name="IOFieldType"           type="HmiIOFieldType" hmi-bind:value="{ HmiProps.IOFieldType }"                                 />
        <hmi:param name="ResourceList"          type="string"                  value="HmiTextGraphicList"                                       />
        <hmi:param name="ResourceListDelay"     type="boolean"                 value="true"                                                     />
        <hmi:param name="PropNameText"          type="string"                  value="Text"                                                     />
        <hmi:param name="PropNameGraphic"       type="string"                  value="Graphic"                                                  />
        <hmi:param name="PropNameGraphicWidth"  type="string"                  value="GraphicWidth"                                             />
        <hmi:param name="PropNameGraphicHeight" type="string"                  value="GraphicHeight"                                            />
        <hmi:param name="SendCommand"           type="boolean"                 value="true"                                                     />
        <hmi:param name="SelectedIndex"         type="number"         hmi-bind:value="{ HmiProps.SelectedIndex }"                               />
        <hmi:param name="CanOpenComboBox"       type="boolean"        hmi-bind:value="{ HmiProps.ExpandOnActivate }"                            />

    </hmi:include>


 </svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2021. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     preserveAspectRatio="none"
     overflow="visible" >

  <hmi:self type="item:HmiSystemDiagnosisControl" displayName="Flat SystemDiagnosisControl" name="style.flat.systemdiagnosiscontrol" version="2.9" performanceClass="L"  >
    <hmi:focus focusVisual="local" />
  </hmi:self>

  <defs>
    <!-- System definitions of this template -->
    <hmi:localDef name="ScrollBarPart"                type="HmiScrollBarSystemPart"     hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiScrollBarSystemPart' ) }}" />

    <hmi:localDef name="WindowFramePart"              type="HmiWindowFrameSystemPart"   hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiWindowFrameSystemPart' ) }}" />

    <hmi:localDef name="MinimumWidth"                 type="number"     value="100" />
    <hmi:localDef name="MinimumHeight"                type="number"     value="50"  />
    <hmi:localDef name="SeparatorHeight"              type="number"     value="2"   />

    <hmi:localDef name="ShowFocus"                    type="boolean"    hmi-bind:value="{{ and( HmiProps.ShowFocusVisual, SysProps.HasFocus ) }}" />
    <hmi:localDef name="ShowCaption"                  type="boolean"    hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowCaption ) }}" />
    <hmi:localDef name="CaptionHeight"                type="number"     hmi-bind:value="{{ LocalProps.ShowCaption ? LocalProps.WindowFramePart.CaptionHeight : 0 }}" />
    <hmi:localDef name="CaptionColor"                 type="number"     hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : HmiProps.CaptionColor }}" />
    <hmi:localDef name="WindowBorderColor"            type="number"     hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : LocalProps.WindowFramePart.BorderColor }}" />
    <hmi:localDef name="WindowBorderWidth"            type="number"     hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowBorder ) ? LocalProps.WindowFramePart.BorderWidth : 0 }}" />
    <hmi:localDef name="WindowInnerWidth"             type="number"     hmi-bind:value="{{ HmiProps.Width - 2 * LocalProps.WindowBorderWidth }}" />

    <!-- Properties of the Hmi Window -->
    <hmi:localDef name="TestToolBar"                  type="number"     hmi-bind:value="{ HmiProps.ToolBar.Height }" />
    <hmi:localDef name="TestToolBarHeight"            type="number"     hmi-bind:value="{{ ( LocalProps.TestToolBar == null ) ? 0 : HmiProps.ToolBar.Height  + LocalProps.ScrollBarPart.Thickness }}" />
    <hmi:localDef name="TestToolBarVisibility"        type="boolean"    hmi-bind:value="{{ ( LocalProps.TestToolBar == null ) ? false : HmiProps.ToolBar.Visible }}" />
    <hmi:localDef name="TestToolBarElements"          type="boolean"    hmi-bind:value="{{ ( Converter.CountItems( HmiProps.ToolBar.Elements ) ) ? true : false }}" />

    <!-- Definition of StatusBar properties -->
    <hmi:localDef name="TestStatusBar"                type="number"     hmi-bind:value="{ HmiProps.StatusBar.Height }" />
    <hmi:localDef name="TestStatusBarElements"        type="boolean"    hmi-bind:value="{{ ( Converter.CountItems( HmiProps.StatusBar.Elements ) ) ? true : false }}" />
    <hmi:localDef name="TestStatusBarHeight"          type="number"     hmi-bind:value="{{ ( LocalProps.TestStatusBar == null ) ? 0 : HmiProps.StatusBar.Height }}" />
    <hmi:localDef name="HasStatusBar"                 type="boolean"    hmi-bind:value="{{ ( LocalProps.TestStatusBar == null ) ? false : true }}" />
    <hmi:localDef name="StatusBarHeight"              type="number"     hmi-bind:value="{{ ( LocalProps.HasStatusBar ) ? LocalProps.TestStatusBarHeight : 0 }}" />
    <hmi:localDef name="StatusBarVisibility"          type="boolean"    hmi-bind:value="{{ ( LocalProps.TestStatusBar == null ) ? false : HmiProps.StatusBar.Visible }}" />
    <hmi:localDef name="HasStatusBarElements"         type="boolean"    hmi-bind:value="{{ ( LocalProps.HasStatusBar ) ? LocalProps.TestStatusBarElements : false }}" />
    <hmi:localDef name="StatusBarWidth"               type="number"     hmi-bind:value="{ LocalProps.WindowInnerWidth }" />
    <hmi:localDef name="StatusBarVisible"             type="boolean"    hmi-bind:value="{{ ( not( and( LocalProps.StatusBarVisibility, LocalProps.HasStatusBarElements ) ) ) ? false : ( or( ( LocalProps.StatusBarWidth == 0 ), ( LocalProps.StatusBarHeight == 0 ) ) ? false : true ) }}" />
    <hmi:localDef name="StatusBarTop"                 type="number"     hmi-bind:value="{{ HmiProps.Height - LocalProps.WindowBorderWidth - LocalProps.StatusBarHeight }}" />

    <!-- Definition of ToolBar properties -->
    <hmi:localDef name="HasToolBar"                   type="boolean"    hmi-bind:value="{{ ( LocalProps.TestToolBar == null ) ? false : true }}" />
    <hmi:localDef name="ToolBarHeight"                type="number"     hmi-bind:value="{{ ( LocalProps.HasToolBar ) ? LocalProps.TestToolBarHeight : 0 }}" />
    <hmi:localDef name="ToolBarPosition"              type="number"     value="1" />
    <hmi:localDef name="ToolBarVisibility"            type="boolean"    hmi-bind:value="{{ ( LocalProps.HasToolBar ) ? LocalProps.TestToolBarVisibility: false }}" />
    <hmi:localDef name="HasToolBarElements"           type="boolean"    hmi-bind:value="{{ ( LocalProps.HasToolBar ) ? LocalProps.TestToolBarElements : false }}" />
    <hmi:localDef name="ToolBarWidth"                 type="number"     hmi-bind:value="{{ ( or( ( LocalProps.ToolBarPosition == 1 ), ( LocalProps.ToolBarPosition == 0 ) ) ? LocalProps.WindowInnerWidth : LocalProps.ToolBarHeight ) }}"  />
    <hmi:localDef name="ToolBarVisible"               type="boolean"    hmi-bind:value="{{ ( not( and( LocalProps.ToolBarVisibility, LocalProps.HasToolBarElements ) ) ) ? false : ( or ( ( LocalProps.ToolBarWidth == 0 ), ( LocalProps.ToolBarHeight == 0 ) ) ? false : true ) }}" />

    <!-- Position and Extent related properties of the content -->
    <hmi:localDef name="ContentOffsetLeft"            type="number"     hmi-bind:value="{{ and( LocalProps.HasToolBar, ( LocalProps.ToolBarPosition == 2 ) ) ? LocalProps.ToolBarHeight : 0 }}" />
    <hmi:localDef name="ContentOffsetTop"             type="number"     hmi-bind:value="{{ and( LocalProps.HasToolBar, ( LocalProps.ToolBarPosition == 0 ) ) ? LocalProps.ToolBarHeight :  0 }}" />
    <hmi:localDef name="ContentOffsetWidth"           type="number"     hmi-bind:value="{{ ( and( LocalProps.ToolBarVisible, or( ( LocalProps.ToolBarPosition == 2 ), ( LocalProps.ToolBarPosition == 3 ) ) ) ?  LocalProps.ToolBarHeight : 0 ) }}" />
    <hmi:localDef name="ContentOffsetHeight"          type="number"     hmi-bind:value="{{ ( and( LocalProps.ToolBarVisible, or( ( LocalProps.ToolBarPosition == 0 ), ( LocalProps.ToolBarPosition == 1 ) ) ) ? LocalProps.ToolBarHeight : 0 ) + ( LocalProps.StatusBarVisible ? LocalProps.StatusBarHeight : 0 ) }}" />

    <hmi:localDef name="FocusColor"                   type="string"     hmi-bind:value="{{ Converter.RGBA( HmiProps.FocusColor ) }}" />

    <clipPath id="WindowClipRect">
      <rect id="ItemRect"
            hmi-bind:width="{ HmiProps.Width   }"
            hmi-bind:height="{ HmiProps.Height }"
            stroke="none" />
    </clipPath>

    <hmi:action id="onMouseEnter">
      <hmi:sendCommand name="HIDE_TOOLTIP" />
    </hmi:action>
  </defs>

  <g id="ElementsGroup" clip-path="url(#WindowClipRect)" hmi-event:mouseEnter="url(#onMouseEnter)">
    <!-- Background -->
    <rect id="BackGroundRect"
          hmi-bind:width="{ HmiProps.Width }"
          hmi-bind:height="{ HmiProps.Height }"
          hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}"
          stroke="none"/>

    <!-- ToolBar -->
    <g hmi:if="{ LocalProps.HasToolBar }" id="ToolBar">
      <hmi:include template="include.style.flat.toolbar.default.svghmi" hmi-bind:for="{ HmiProps.ToolBar }"
                   hmi-bind:x="{{ ( LocalProps.ToolBarPosition == 3 ) ? ( HmiProps.Width - LocalProps.WindowBorderWidth - LocalProps.ToolBarHeight ) : LocalProps.WindowBorderWidth }}"
                   hmi-bind:y="{{ ( LocalProps.ToolBarPosition == 1 ) ? ( HmiProps.Height - LocalProps.WindowBorderWidth - LocalProps.ToolBarHeight - ( LocalProps.StatusBarVisibility ? LocalProps.StatusBarHeight : 0 ) ) : LocalProps.CaptionHeight + LocalProps.WindowBorderWidth }}"
                   hmi-bind:width="{{ or( ( LocalProps.ToolBarPosition == 1 ), ( LocalProps.ToolBarPosition == 0 ) ) ? LocalProps.WindowInnerWidth : LocalProps.ToolBarHeight }}"
                   hmi-bind:height="{{ or( ( LocalProps.ToolBarPosition == 3 ), ( LocalProps.ToolBarPosition == 2 ) ) ? HmiProps.Height - 2 * LocalProps.WindowBorderWidth - LocalProps.CaptionHeight - ( LocalProps.StatusBarVisibility ? LocalProps.StatusBarHeight : 0 ) : LocalProps.ToolBarHeight }}">

        <hmi:param name="Width"           type="number"   hmi-bind:value="{{ or( ( LocalProps.ToolBarPosition == 0 ), ( LocalProps.ToolBarPosition == 1 ) ) ? LocalProps.WindowInnerWidth : LocalProps.ToolBarHeight }}" />
        <hmi:param name="Height"          type="number"   hmi-bind:value="{{ or( ( LocalProps.ToolBarPosition == 3 ), ( LocalProps.ToolBarPosition == 2 ) ) ? HmiProps.Height - 2 * LocalProps.WindowBorderWidth - LocalProps.CaptionHeight - ( LocalProps.StatusBarVisibility ? LocalProps.StatusBarHeight : 0 ) : LocalProps.ToolBarHeight }}" />
        <hmi:param name="ItemOperable"    type="boolean"  hmi-bind:value="{ HmiProps.Enabled }" />
        <hmi:param name="FocusColor"      type="string"   hmi-bind:value="{ LocalProps.FocusColor }" />
        <hmi:param name="ShowFocusVisual" type="boolean"  hmi-bind:value="{ HmiProps.ShowFocusVisual }"   />
      </hmi:include>
    </g>

    <!-- StatusBar -->
    <g hmi:if="{ LocalProps.HasStatusBar }" id="StatusBar">
      <hmi:include template="include.style.flat.statusbar.default.svghmi" hmi-bind:for="{ HmiProps.StatusBar }"
                   hmi-bind:x="{ LocalProps.WindowBorderWidth }"
                   hmi-bind:y="{ LocalProps.StatusBarTop }"
                   hmi-bind:width="{ LocalProps.StatusBarWidth }"
                   hmi-bind:height="{ LocalProps.StatusBarHeight }">

        <hmi:param name="Width"           type="number"   hmi-bind:value="{ LocalProps.StatusBarWidth }"  />
        <hmi:param name="Height"          type="number"   hmi-bind:value="{ LocalProps.StatusBarHeight }" />
        <hmi:param name="ItemOperable"    type="boolean"  hmi-bind:value="{ HmiProps.Enabled }"           />
        <hmi:param name="FocusColor"      type="string"   hmi-bind:value="{ LocalProps.FocusColor }"      />
        <hmi:param name="ShowFocusVisual" type="boolean"  hmi-bind:value="{ HmiProps.ShowFocusVisual }"   />
      </hmi:include>
    </g>

    <g>
      <!-- Separator between grid and toolbar -->
      <rect
            hmi-bind:y="{{ HmiProps.Height - LocalProps.WindowBorderWidth - LocalProps.ContentOffsetHeight - LocalProps.SeparatorHeight }}"
            hmi-bind:width="{ HmiProps.Width }"
            hmi-bind:height="{ LocalProps.SeparatorHeight }"
            hmi-bind:fill="{{ Converter.RGBA( HmiProps.StatusBar.BackColor ) }}"
            stroke="none"/>
    </g>

    <!-- Content as include subtemplate -->
    <g>
      <hmi:include template="style.flat.systemdiagnosiscontrolcontent.default.svghmi"  hmi-bind:for="{ HmiProps }"
                     hmi-bind:x="{{ LocalProps.WindowBorderWidth + LocalProps.ContentOffsetLeft }}"
                     hmi-bind:y="{{ LocalProps.WindowBorderWidth + LocalProps.CaptionHeight + LocalProps.ContentOffsetTop }}"
                     hmi-bind:width="{{ HmiProps.Width - 2 * LocalProps.WindowBorderWidth - LocalProps.ContentOffsetWidth }}"
                     hmi-bind:height="{{ HmiProps.Height - 2 * LocalProps.WindowBorderWidth - LocalProps.CaptionHeight - LocalProps.ContentOffsetHeight - LocalProps.SeparatorHeight }}" >

        <hmi:param name="FocusColor"        type="string"   hmi-bind:value="{ LocalProps.FocusColor }"  />
        <hmi:param name="SelectedIndex"     type="number"   hmi-bind:value="{ HmiProps.SelectedIndex }" />
        <hmi:param name="ShowFocusVisual"   type="boolean"  hmi-bind:value="{ HmiProps.ShowFocusVisual }" />
      </hmi:include>
    </g>
  </g>

  <!-- Frame -->
  <hmi:include template="include.style.flat.hmiwindowframe.default.svghmi"
               x="0"
               y="0"
               hmi-bind:width="{ HmiProps.Width }"
               hmi-bind:height="{ HmiProps.Height }" >

    <hmi:param name="Top"               type="number"           hmi-bind:value="{ HmiProps.Top }"                 />
    <hmi:param name="Left"              type="number"           hmi-bind:value="{ HmiProps.Left }"                />
    <hmi:param name="Width"             type="number"           hmi-bind:value="{ HmiProps.Width }"               />
    <hmi:param name="Height"            type="number"           hmi-bind:value="{ HmiProps.Height }"              />
    <hmi:param name="WindowFlags"       type="HmiWindowFlag"    hmi-bind:value="{ HmiProps.WindowFlags }"         />
    <hmi:param name="MinimumWidth"      type="number"           hmi-bind:value="{ LocalProps.MinimumWidth }"      />
    <hmi:param name="MinimumHeight"     type="number"           hmi-bind:value="{ LocalProps.MinimumHeight }"     />
    <hmi:param name="Icon"              type="HmiGraphic"       hmi-bind:value="{ HmiProps.Icon }"                />
    <hmi:param name="Caption"           type="HmiTextPart"      hmi-bind:value="{ HmiProps.Caption }"             />
    <hmi:param name="CaptionColor"      type="HmiColor"         hmi-bind:value="{ LocalProps.CaptionColor }"      />
    <hmi:param name="ShowCaption"       type="boolean"          hmi-bind:value="{ LocalProps.ShowCaption }"       />
    <hmi:param name="CaptionHeight"     type="number"           hmi-bind:value="{ LocalProps.CaptionHeight }"     />
    <hmi:param name="WindowBorderWidth" type="number"           hmi-bind:value="{ LocalProps.WindowBorderWidth }" />
    <hmi:param name="WindowBorderColor" type="HmiColor"         hmi-bind:value="{ LocalProps.WindowBorderColor }" />
    <hmi:param name="ItemOperable"      type="boolean"          hmi-bind:value="{ HmiProps.Enabled }"             />
    <hmi:param name="WindowState"       type="number"           hmi-bind:value="{ HmiProps.WindowState }" />

  </hmi:include>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2020. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/"
     preserveAspectRatio="none"
     id="custom_SystemDiagnosticContent"
     data-tif-type="WSI:SvgGrid">

  <hmi:self type="part:HmiDataGridViewPart" displayName="Flat SystemDiagnosisContent" name="style.flat.systemdiagnosiscontent">
    <hmi:paramDef name="FocusColor"         type="string"   />
    <hmi:paramDef name="SelectedIndex"      type="number" two-way="true"   />
    <hmi:paramDef name="ShowFocusVisual"    type="boolean"  />
  </hmi:self>

  <defs>
    <hmi:localDef name="PropNameText"             type="string"      value="Text"                                                                                                  />
    <hmi:localDef name="SplitterHeight"           type="number"      value="10"                                                                                                   />
	  <hmi:localDef name="StatusPathHeight"         type="number"      hmi-bind:value="{{ HmiProps.ShowStatusPath ? 50 : 0 }}"                                                                                                   />
    <hmi:localDef name="InitialHeightRatio"       type="number"      hmi-bind:value="{{ lt( 0.3, ( HmiProps.SystemDiagnosisView.RowHeight * 10 ) / Layout.ActualHeight ) ? 0.3 : ( HmiProps.SystemDiagnosisView.RowHeight * 10 ) / Layout.ActualHeight }}" />
    <hmi:localDef name="HeightRatio"              type="number"      hmi-bind:value="{{ gt(ParamProps.SelectedIndex,-1) ? LocalProps.InitialHeightRatio : 0 }}"                   />
    <hmi:localDef name="DetailedViewHeight"       type="number"      hmi-bind:value="{{ Layout.ActualHeight * LocalProps.HeightRatio }}"                                      />
    <hmi:localDef name="GridHeight"               type="number"      hmi-bind:value="{{ Layout.ActualHeight - LocalProps.DetailedViewHeight - LocalProps.SplitterHeight }}"    />
    <hmi:localDef name="SystemDiagnosisViewType"  type="number"      hmi-bind:value="{ HmiProps.SystemDiagnosisViewType }" />
    <hmi:localDef name="SplitterActual"  type="number"      hmi-bind:value="{ Layout.ActualHeight }" />
    <hmi:localDef name="DetailedViewMaxHeight"    type="number"      hmi-bind:value="{{ HmiProps.ShowStatusPath ? 40 + LocalProps.SplitterHeight : 0 }}" />

    <hmi:action id="onMove">
      <hmi:setProperty name="LocalProps.DetailedViewHeight"  type="number"   hmi-bind:value="{{ LocalProps.DetailedViewHeight - EventArgs.PanDeltaY  }}" />
    </hmi:action>
    <hmi:action id="onSetCursorResizeNS">
      <hmi:setCursor   name="ns-resize" value="screen" />
    </hmi:action>
    <hmi:action id="onCursorResumeLeave">
      <hmi:setCursor   name="auto"      value="screen" />
    </hmi:action>
  </defs>

  <g id="Background" hmi-flex:width="{ Layout.ActualWidth }" hmi-flex:height="{ Layout.ActualHeight }" hmi-flex:direction="column" hmi-flex:wrap="false">
      <g hmi:if="{{ eq( LocalProps.SystemDiagnosisViewType, 0 ) }}" hmi-flex:grow="1">
      <!--  SystemDiagnosisViewType ie. HmiProps.SystemDiagnosisView.SystemDiagnosisViewType is currently not available, it has to define in chrom prop. For testing purpose you can make this if to fail/pass  -->
      <hmi:include template="include.style.flat.bufferview.svghmi" hmi-bind:for="{ HmiProps.SystemDiagnosisView }"
                   hmi-bind:width="{ Layout.ActualWidth }"
                   hmi-bind:height="{ Layout.ActualHeight }" >
        <hmi:param name="FocusColor"         type="string"   hmi-bind:value="{ ParamProps.FocusColor }"  />
        <hmi:param name="SelectedIndex"      type="number"   hmi-bind:value="{ ParamProps.SelectedIndex }" />
        <hmi:param name="ShowFocusVisual"    type="boolean"  hmi-bind:value="{ ParamProps.ShowFocusVisual }" />
        <hmi:param name="DetailedViewHeight" type="number"   hmi-bind:value="{ LocalProps.DetailedViewHeight }" />
        <hmi:param name="BufferTopPosition"  type="number"   hmi-bind:value="{{ HmiProps.ShowStatusPath ? 40 : 0 }}" />
      </hmi:include>
    </g>
    <!--  SystemDiagnosisViewType ie. ie. HmiProps.SystemDiagnosisView.SystemDiagnosisViewType and MatrixView is currently not available, it has to define in chrom prop. For testing purpose you can make this if to fail  -->
    <g hmi:if="{{ or(eq( LocalProps.SystemDiagnosisViewType, 1 ), eq( LocalProps.SystemDiagnosisViewType, 2 )) }}">
      <hmi:include template="include.style.flat.matrixview.svghmi" hmi-bind:for="{ HmiProps.MatrixView }"
                   hmi-bind:width="{ Layout.ActualWidth }"
                   hmi-bind:height="{{ gt ( ParamProps.SelectedIndex, -1 )  ? LocalProps.GridHeight - 8 : 
                   Layout.ActualHeight }}" >
        <hmi:param name="ShowStatusPath"          type="boolean"       hmi-bind:value="{ HmiProps.ShowStatusPath }"  />
        <hmi:param name="Font"                    type="HmiFontPart"   hmi-bind:value="{ HmiProps.SystemDiagnosisView.Font }"  />
        <hmi:param name="SplitterHeight"          type="number"        hmi-bind:value="{ LocalProps.SplitterHeight }"  />
        <hmi:param name="DetailedViewHeight"      type="number"        hmi-bind:value="{ LocalProps.DetailedViewHeight }"  />
      </hmi:include>
    </g>
    
    <g id="TIFID_SplitterGroup" hmi-flex:width="{ Layout.ActualWidth }" hmi-flex:height="{{ gt(ParamProps.SelectedIndex,-1) ? LocalProps.SplitterHeight : 0 }}" hmi:if="{{ and(gt(ParamProps.SelectedIndex,-1), gt(LocalProps.SplitterActual,LocalProps.StatusPathHeight))}}">
      <rect hmi-event:mouseEnter="url(#onSetCursorResizeNS)" hmi-event:mouseLeave="url(#onCursorResumeLeave)" hmi-event:pan="url(#onMove)"
            y="0"
            hmi-bind:width="{Layout.ActualWidth}"
            hmi-bind:height="{LocalProps.SplitterHeight}"
            hmi-bind:fill="{{ Converter.RGBA( HmiProps.SystemDiagnosisView.HeaderSettings.HeaderBackColor ) }}"/>
      <g hmi-bind:transform="translate( {{ (Layout.ActualWidth/2) - 3 }}, 2 )" >
        <path d="M 0 0 L 3 6 L 6 0 z" hmi-bind:fill="{{Converter.RGBA(HmiProps.SystemDiagnosisView.HeaderSettings.HeaderForeColor)}}"></path>
      </g>
      <g hmi-bind:transform="translate( {{ (Layout.ActualWidth/2) + 3 }}, 2 )" >
        <path d="M 3 0 L 0 6 L 6 6 z" hmi-bind:fill="{{Converter.RGBA(HmiProps.SystemDiagnosisView.HeaderSettings.HeaderForeColor)}}"></path>
      </g>
    </g>
 <g  hmi:if="{{ and(eq( LocalProps.SystemDiagnosisViewType, 0 ),gt ( ParamProps.SelectedIndex, -1 ) )}}"
    hmi-flex:maxHeight="{{ Layout.ActualHeight - LocalProps.StatusPathHeight }}" 
    hmi-flex:height="{{and(eq( LocalProps.SystemDiagnosisViewType, 0 ),gt ( ParamProps.SelectedIndex, -1 ) ) ? (LocalProps.DetailedViewHeight) : 0}}"
	>
     <hmi:include template="include.style.flat.systemdiagnosisdetailedview.svghmi" hmi-bind:for="{ HmiProps.BufferView.SystemDiagnosisDetailedView }"
                  hmi-bind:width="{ Layout.ActualWidth }"
                  hmi-bind:height="{ Layout.ActualHeight }"
				  >
       <hmi:param name="Font"                   type="HmiFontPart"              hmi-bind:value="{ HmiProps.SystemDiagnosisView.Font }"                  />
       <hmi:param name="Width"                  type="number"                   hmi-bind:value="{ Layout.ActualWidth }"             />
       <hmi:param name="BackColor"              type="HmiColor"                 hmi-bind:value="{ HmiProps.SystemDiagnosisView.BackColor }"             />
       <hmi:param name="ForeColor"              type="HmiColor"                 hmi-bind:value="{ HmiProps.SystemDiagnosisView.ForeColor }"             />
       <hmi:param name="PropNameText"           type="string"                   hmi-bind:value="{ LocalProps.PropNameText }"        />
       <hmi:param name="SelectedIndex"          type="number"                   hmi-bind:value="{ ParamProps.SelectedIndex }"       />
       <hmi:param name="GridLineColor"          type="HmiColor"                 hmi-bind:value="{ HmiProps.SystemDiagnosisView.GridLineColor }"         />
       <hmi:param name="ResourceList"           type="string"                   value=""                                            />
       <hmi:param name="BorderWidth"            type="number"                   value="0"                                           />
       <hmi:param name="BorderColor"            type="HmiColor"                 value="‭4288059030‬"                                  />
     </hmi:include>
   </g> 
    <g 
    hmi:if="{{ and(or(eq( LocalProps.SystemDiagnosisViewType, 1 ), eq( LocalProps.SystemDiagnosisViewType, 2 )),gt ( ParamProps.SelectedIndex, -1 )) }}"
    hmi-flex:maxHeight="{{ Layout.ActualHeight - LocalProps.StatusPathHeight }}" 
    hmi-flex:height="{{and(or(eq( LocalProps.SystemDiagnosisViewType, 1 ), eq( LocalProps.SystemDiagnosisViewType, 2 )),gt ( ParamProps.SelectedIndex, -1 ) ) ? (LocalProps.DetailedViewHeight) : 0}}"
	>
      <hmi:include template="include.style.flat.systemdiagnosishardwaredetailview.svghmi" hmi-bind:for="{ HmiProps.MatrixView.SystemDiagnosisHardwareDetailView }"
                   hmi-bind:width="{ Layout.ActualWidth }"
                   hmi-bind:height="{ Layout.ActualHeight }" >
      <hmi:param name="SelectedIndex"          type="number"                   hmi-bind:value="{ ParamProps.SelectedIndex }"       />
      <hmi:param name="FocusColor"             type="string"                   hmi-bind:value="{ ParamProps.FocusColor }"  />
      <hmi:param name="ShowFocusVisual"        type="boolean"                  hmi-bind:value="{ ParamProps.ShowFocusVisual }" />
      <hmi:param name="DetailedViewHeight"     type="number"                   hmi-bind:value="{ LocalProps.DetailedViewHeight }" />
    </hmi:include>
  </g>
  <g hmi-bind:height="{ LocalProps.StatusPathHeight }" hmi-bind:display ="{{ HmiProps.ShowStatusPath ? 'block' : 'none' }}">
      <hmi:include template="include.style.flat.breadcrumb.svghmi" hmi-bind:for="{ HmiProps }"
                   hmi-bind:width="{ Layout.ActualWidth }"
                   hmi-bind:height="{ Layout.ActualHeight }" >
        <hmi:param name="Font"         type="HmiFontPart"   hmi-bind:value="{ HmiProps.SystemDiagnosisView.Font }"  />
      </hmi:include>
    </g>
  </g>
</svg><!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     preserveAspectRatio="none">

    <hmi:self type="item:HmiTextBox" displayName="Flat TextBox" name="style.flat.textbox" version="2.8" performanceClass="L" >
        <hmi:focus focusVisual="local" />
    </hmi:self>

    <defs>
        <!-- Local definitions of this template -->
        <hmi:localDef name="BorderColorAlphaMask"           type="number"   value="0x01000000" />
        <hmi:localDef name="BorderPressedAlpha"             type="number"   value="0x80000000" />

        <hmi:localDef name="Pressed"                        type="number"   value="0" />
        <hmi:localDef name="MouseHover"                     type="number"   value="0" />

		<hmi:localDef name="ShowFocus"						type="boolean"  hmi-bind:value="{{ and( HmiProps.ShowFocusVisual, SysProps.HasFocus ) }}" />

        <hmi:localDef name="BorderWidth"					type="number"   hmi-bind:value="{{ LocalProps.ShowFocus ? ( HmiProps.BorderWidth + 2 ) : HmiProps.BorderWidth }}" />
        <hmi:localDef name="BorderColor"					type="number"   hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : HmiProps.BorderColor }}" />
        <hmi:localDef name="BorderColorPressed"             type="number"   hmi-bind:value="{{ LocalProps.BorderColor % LocalProps.BorderColorAlphaMask + LocalProps.BorderPressedAlpha }}" />

        <hmi:localDef name="ContentPositionX"               type="number"   hmi-bind:value="{{ HmiProps.BorderWidth + HmiProps.Padding.Left }}" />
        <hmi:localDef name="ContentPositionY"               type="number"   hmi-bind:value="{{ HmiProps.BorderWidth + HmiProps.Padding.Top  }}" />

        <hmi:localDef name="ContentWidth"                   type="number"   hmi-bind:value="{{ HmiProps.Width  - (2 * HmiProps.BorderWidth) - HmiProps.Padding.Left - HmiProps.Padding.Right }}" />
        <hmi:localDef name="ContentHeight"                  type="number"   hmi-bind:value="{{ HmiProps.Height - (2 * HmiProps.BorderWidth) - HmiProps.Padding.Top  - HmiProps.Padding.Bottom }}" />

        <hmi:localDef name="InputAllowed"                   type="boolean"  hmi-bind:value="{{ and( HmiProps.Operability == HmiOperability.Operable, not( HmiProps.ReadOnly) ) }}" />
        <hmi:localDef name="ItemOperable"                   type="boolean"  hmi-bind:value="{{ HmiProps.Operability == HmiOperability.Operable }}" />
        <hmi:localDef name="CalcTextWrapping"               type="boolean"  hmi-bind:value="{{ HmiProps.TextWrapping == HmiTextWrapping.NoWrap ? HmiTextWrapping.NoWrap : HmiTextWrapping.WordWrap }}" />
        <hmi:localDef name="CalcTextTrimming"               type="boolean"  hmi-bind:value="{{ HmiProps.TextTrimming == HmiTextTrimming.None ? HmiTextTrimming.None : HmiTextTrimming.CharacterEllipsis }}" />
        
        <hmi:localDef name="VerticalScrollbarVisibility"    type="HmiScrollBarVisibility"  hmi-bind:value="{{ HmiScrollBarVisibility.Automatic }}" />
        <hmi:localDef name="HorizontalScrollbarVisibility"  type="HmiScrollBarVisibility"  hmi-bind:value="{{ HmiScrollBarVisibility.Automatic }}" />
        

        <!-- Actions of this template -->
        <hmi:action id="onMouseHover" hmi-bind:condition="{ LocalProps.InputAllowed }" >
            <hmi:setProperty name="LocalProps.MouseHover" type="number" value="1" />
        </hmi:action>
        <hmi:action id="onMouseDown" hmi-bind:condition="{ LocalProps.InputAllowed }" >
            <hmi:setProperty name="LocalProps.Pressed" type="number" value="1" hmi-bind:condition="{{ or( EventArgs.Trigger==HmiEventTrigger.Left, EventArgs.Trigger==HmiEventTrigger.Touch ) }}" />
            <hmi:setProperty name="LocalProps.MouseHover" type="number" value="0" />
        </hmi:action>
        <hmi:action id="onMouseUp" hmi-bind:condition="{ LocalProps.InputAllowed }" >
            <hmi:setProperty name="LocalProps.Pressed" type="number" value="0" hmi-bind:condition="{{ or( EventArgs.Trigger==HmiEventTrigger.Left, EventArgs.Trigger==HmiEventTrigger.Touch ) }}" />
            <hmi:setProperty name="LocalProps.MouseHover" type="number" value="1" />
        </hmi:action>
        <hmi:action id="onMouseLeave" hmi-bind:condition="{ LocalProps.InputAllowed }" >
            <hmi:setProperty name="LocalProps.Pressed" type="number" value="0" />
            <hmi:setProperty name="LocalProps.MouseHover" type="number" value="0" />
        </hmi:action>

        <!-- Graphical elements of this template -->
        <clipPath id="ItemClipRect">
            <rect id="ItemRect"
                  hmi-bind:x="{{ HmiProps.BorderWidth / 2 }}"
                  hmi-bind:y="{{ HmiProps.BorderWidth / 2 }}"
                  hmi-bind:width="{{ HmiProps.Width - HmiProps.BorderWidth }}"
                  hmi-bind:height="{{ HmiProps.Height - HmiProps.BorderWidth }}"
                  hmi-bind:stroke-width="{ LocalProps.BorderWidth }" />
        </clipPath>

    </defs>

    <g id="ExtendedTextBox" hmi-event:mouseHover="url(#onMouseHover)" hmi-event:down="url(#onMouseDown)" hmi-event:up="url(#onMouseUp)" hmi-event:mouseLeave="url(#onMouseLeave)"
        hmi-bind:opacity="{{ LocalProps.ItemOperable ? 1.0 : 0.5 }}">

        <rect id="ItemBGRect"
              hmi-bind:x="{ HmiProps.BorderWidth }"
              hmi-bind:y="{ HmiProps.BorderWidth }"
              hmi-bind:width="{{ HmiProps.Width - 2 * HmiProps.BorderWidth }}"
              hmi-bind:height="{{ HmiProps.Height - 2 * HmiProps.BorderWidth }}"
              hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}"
              stroke-width="0" />

      <rect id="ItemRect_Used"
              fill-opacity="0"
              hmi-bind:stroke="{{ Converter.RGBA( LocalProps.Pressed ? LocalProps.BorderColorPressed : LocalProps.BorderColor ) }}"
              hmi-bind:x="{{ HmiProps.BorderWidth / 2 }}"
              hmi-bind:y="{{ HmiProps.BorderWidth / 2 }}"
              hmi-bind:width="{{ HmiProps.Width - HmiProps.BorderWidth }}"
              hmi-bind:height="{{ HmiProps.Height - HmiProps.BorderWidth }}"
              hmi-bind:stroke-width="{ LocalProps.BorderWidth }" />

      <g id="TIFID_TextFieldNVE" clip-path="url(#ItemClipRect)">
        <hmi-element:textField
              hmi-bind:start-x="{ LocalProps.ContentPositionX }"
              hmi-bind:start-y="{ LocalProps.ContentPositionY }"
              hmi-bind:width="{ LocalProps.ContentWidth }"
              hmi-bind:height="{ LocalProps.ContentHeight }"
              hmi-bind:vertical-text-alignment="{ HmiProps.VerticalTextAlignment }"
              hmi-bind:horizontal-text-alignment="{ HmiProps.HorizontalTextAlignment }"
              hmi-bind:value="{ HmiProps.Text }"
              hmi-bind:fore-color="{{ Converter.RGBA( HmiProps.ForeColor ) }}"
              target="HmiProps.Text"
              output-format="{S}"
              hmi-bind:text-trimming="{ LocalProps.CalcTextTrimming }"               
              hmi-bind:text-wrapping="{ LocalProps.CalcTextWrapping}"
              hmi-bind:multi-line="{ LocalProps.CalcTextWrapping }"
              hmi-bind:enabled="{ LocalProps.InputAllowed }"
              hmi-bind:read-only="{ HmiProps.ReadOnly }"
              hmi-bind:vertical-scrollbar-visibility="{ LocalProps.VerticalScrollbarVisibility }" 
              hmi-bind:horizontal-scrollbar-visibility="{ LocalProps.HorizontalScrollbarVisibility }">
              

              <hmi-feature:inputBehavior clear-on-activate="false" />
              <hmi-feature:font hmi-bind:scope="{ HmiProps.Font }" />
        </hmi-element:textField>
      </g>
    </g>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2017. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     preserveAspectRatio="none">

    <hmi:self type="item:HmiToggleSwitch" displayName="Flat ToggleSwitch" name="style.flat.toggleswitch" version="2.8" performanceClass="L" >
        <hmi:focus focusVisual="local" />
    </hmi:self>

    <defs>
        <!-- Local definitions of this template -->
        <hmi:localDef name="Graphic"                type="string"   hmi-bind:value="{{ HmiProps.IsAlternateState ? HmiProps.AlternateGraphic       : HmiProps.Graphic       }}" />
        <hmi:localDef name="GraphicWidth"           type="number"   hmi-bind:value="{{ HmiProps.IsAlternateState ? HmiProps.AlternateGraphicWidth  : HmiProps.GraphicWidth  }}" />
        <hmi:localDef name="GraphicHeight"          type="number"   hmi-bind:value="{{ HmiProps.IsAlternateState ? HmiProps.AlternateGraphicHeight : HmiProps.GraphicHeight }}" />
        <hmi:localDef name="Text"                   type="string"   hmi-bind:value="{{ HmiProps.IsAlternateState ? HmiProps.AlternateText          : HmiProps.Text          }}" />

		<hmi:localDef name="HasOuterBorder"			type="boolean"  hmi-bind:value="{{ HmiProps.BorderWidth != 0 }}" />
		<hmi:localDef name="OuterBorderAndPadding"  type="number"   hmi-bind:value="{{ LocalProps.HasOuterBorder ? HmiProps.BorderWidth + 2 : 0 }}" />

        <hmi:localDef name="ContentPositionX"       type="number"   hmi-bind:value="{{ HmiProps.BorderWidth + HmiProps.Padding.Left }}" />
        <hmi:localDef name="ContentPositionY"       type="number"   hmi-bind:value="{{ HmiProps.BorderWidth + HmiProps.Padding.Top  }}" />

        <hmi:localDef name="ContentWidth"           type="number"   hmi-bind:value="{{ HmiProps.Width  - (2 * HmiProps.BorderWidth) - HmiProps.Padding.Left - HmiProps.Padding.Right }}" />
        <hmi:localDef name="ContentHeight"          type="number"   hmi-bind:value="{{ HmiProps.Height - (2 * HmiProps.BorderWidth) - HmiProps.Padding.Top  - HmiProps.Padding.Bottom }}" />

		<hmi:localDef name="EdgeRadius"				type="number"   hmi-bind:value="{{ HmiProps.Height / 2 - LocalProps.OuterBorderAndPadding - 2 }}" />

        <hmi:localDef name="ItemOperable"           type="boolean"  hmi-bind:value="{{ HmiProps.Operability == HmiOperability.Operable }}" />

        <!-- Actions of this template -->
        <hmi:action id="onMouseTapped" trigger="accept" hmi-bind:condition="{ LocalProps.ItemOperable }" >
            <hmi:setProperty name="HmiProps.IsAlternateState" type="boolean" hmi-bind:value="{{ HmiProps.IsAlternateState ? false : true }}"
                             hmi-bind:condition="{{ or( or( (EventArgs.Trigger == HmiEventTrigger.Left), (EventArgs.Trigger == HmiEventTrigger.Space) ), EventArgs.Trigger==HmiEventTrigger.Touch ) }}" />
        </hmi:action>

        <!-- Graphical elements of this template -->

        <clipPath id="ContentClipRect">
			<rect
				  hmi-bind:x="{{ LocalProps.OuterBorderAndPadding + 2 }}"
				  hmi-bind:y="{{ LocalProps.OuterBorderAndPadding + 2 }}"
				  hmi-bind:width="{{ HmiProps.Width - 2 * LocalProps.OuterBorderAndPadding - 4 }}"
				  hmi-bind:height="{{ HmiProps.Height - 2 * LocalProps.OuterBorderAndPadding - 4 }}"
				  hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}"
				  stroke-width="0"
				  hmi-bind:rx="{ LocalProps.EdgeRadius }"
				  hmi-bind:ry="{ LocalProps.EdgeRadius }" />
        </clipPath>
    </defs>

    <g hmi-event:tapped="url(#onMouseTapped)" hmi-bind:opacity="{{ LocalProps.ItemOperable ? 1.0 : 0.5 }}">
		<rect id="ItemBGRect"
			  hmi-bind:x="{{ LocalProps.OuterBorderAndPadding + 2 }}"
			  hmi-bind:y="{{ LocalProps.OuterBorderAndPadding + 2 }}"
			  hmi-bind:width="{{ HmiProps.Width - 2 * LocalProps.OuterBorderAndPadding - 4 }}"
			  hmi-bind:height="{{ HmiProps.Height - 2 * LocalProps.OuterBorderAndPadding - 4 }}"
			  hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}"
			  stroke-width="0"
			  hmi-bind:rx="{ LocalProps.EdgeRadius }"
			  hmi-bind:ry="{ LocalProps.EdgeRadius }" />

        <g clip-path="url(#ContentClipRect)">
            <hmi:include template="include.style.flat.content.svghmi" hmi-bind:for="{ HmiProps.Content }"
                         hmi-bind:x="{{ floor( LocalProps.ContentPositionX + ( HmiProps.IsAlternateState == false ? 0 : LocalProps.ContentWidth / 2 ) ) }}"
                         hmi-bind:y="{ LocalProps.ContentPositionY }"
                         hmi-bind:width="{{ floor( LocalProps.ContentWidth / 2 ) }}"
                         hmi-bind:height="{ LocalProps.ContentHeight }">

                <hmi:param name="Graphic"       type="HmiGraphic"  hmi-bind:value="{ LocalProps.Graphic }" />
                <hmi:param name="GraphicWidth"  type="number"      hmi-bind:value="{ LocalProps.GraphicWidth }" />
                <hmi:param name="GraphicHeight" type="number"      hmi-bind:value="{ LocalProps.GraphicHeight }" />
                <hmi:param name="Text"          type="string"      hmi-bind:value="{ LocalProps.Text }" />
                <hmi:param name="Font"          type="HmiFontPart" hmi-bind:value="{ HmiProps.Font }" />
                <hmi:param name="TextColor"     type="HmiColor"    hmi-bind:value="{ HmiProps.ForeColor }" />

            </hmi:include>
        </g>

        <g hmi-bind:transform="translate( {{ HmiProps.IsAlternateState ? 0 : HmiProps.Width - HmiProps.Height }} , 0 )">
			<circle hmi-bind:cx="{{ HmiProps.Height / 2 }}"
					hmi-bind:cy="{{ HmiProps.Height / 2 }}"
					hmi-bind:r="{{ HmiProps.Height / 2 - LocalProps.OuterBorderAndPadding - 1 }}"
					hmi-bind:fill="{{ Converter.RGBA( HmiProps.AlternateBackColor ) }}"
					hmi-bind:stroke="{{ Converter.RGBA( HmiProps.AlternateBorderColor ) }}"
					stroke-width="2" />
        </g>

		<rect id="OuterBorderRect"
			  hmi-bind:visibility="{{ LocalProps.HasOuterBorder ? 'visible' : 'hidden' }}"
			  hmi-bind:x="{{ HmiProps.BorderWidth / 2 }}"
			  hmi-bind:y="{{ HmiProps.BorderWidth / 2 }}"
			  hmi-bind:width="{{ HmiProps.Width - HmiProps.BorderWidth }}"
			  hmi-bind:height="{{ HmiProps.Height - HmiProps.BorderWidth }}"
			  hmi-bind:stroke="{{ Converter.RGBA( HmiProps.BorderColor ) }}"
			  hmi-bind:stroke-width="{ HmiProps.BorderWidth }"
			  hmi-bind:rx="{{ HmiProps.Height / 2 - HmiProps.BorderWidth }}"
			  hmi-bind:ry="{{ HmiProps.Height / 2 - HmiProps.BorderWidth }}"
			  fill-opacity="0"
			  />

		<rect id="ItemFocusRect"
			  hmi-bind:visibility="{{ and( HmiProps.ShowFocusVisual, HmiProps.HasFocus ) ? 'visible' : 'hidden' }}"
			  x="1"
			  y="1"
			  hmi-bind:width="{{ HmiProps.Width + HmiProps.BorderWidth - 2 }}"
			  hmi-bind:height="{{ HmiProps.Height + HmiProps.BorderWidth - 2 }}"
			  hmi-bind:stroke="{{ Converter.RGBA( HmiProps.FocusColor ) }}"
			  stroke-width="2"
			  fill-opacity="0"
			  />
    </g>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2021. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:hmi="http://svg.siemens.com/hmi/"
    xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
    xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
    xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
    xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
    xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     
    preserveAspectRatio="none"
    overflow="visible" >

    <hmi:self type="item:HmiTrendCompanion" displayName="Flat TrendCompanion" name="style.flat.trendcompanion" version="2.8" performanceClass="L" >
        <hmi:focus focusVisual="local" />
    </hmi:self>

    <defs>
        <!-- System definitions of this template -->
        <hmi:localDef name="ScrollBarPart"                type="HmiScrollBarSystemPart"     hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiScrollBarSystemPart' ) }}" />
    
        <hmi:localDef name="WindowFramePart"              type="HmiWindowFrameSystemPart"   hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiWindowFrameSystemPart' ) }}" />

        <hmi:localDef name="MinimumWidth"                 type="number"                     value="100" />
        <hmi:localDef name="MinimumHeight"                type="number"                     value="50"  />
        <hmi:localDef name="SeparatorHeight"              type="number"                     value="2"   />

        <hmi:localDef name="ShowFocus"                    type="boolean"                    hmi-bind:value="{{ and( HmiProps.ShowFocusVisual, SysProps.HasFocus ) }}" />
        <hmi:localDef name="ShowCaption"                  type="boolean"                    hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowCaption ) }}" />
        <hmi:localDef name="CaptionHeight"                type="number"                     hmi-bind:value="{{ LocalProps.ShowCaption ? LocalProps.WindowFramePart.CaptionHeight : 0 }}" />
        <hmi:localDef name="CaptionColor"                 type="number"                     hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : HmiProps.CaptionColor }}" />
        <hmi:localDef name="WindowBorderColor"            type="number"                     hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : LocalProps.WindowFramePart.BorderColor }}" />
        <hmi:localDef name="WindowBorderWidth"            type="number"                     hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowBorder ) ? LocalProps.WindowFramePart.BorderWidth : 0 }}" />
        <hmi:localDef name="WindowInnerWidth"             type="number"                     hmi-bind:value="{{ HmiProps.Width - 2 * LocalProps.WindowBorderWidth }}" />

        <!-- Properties of the Hmi Window -->
        <hmi:localDef name="TestToolBar"                  type="number"                     hmi-bind:value="{ HmiProps.ToolBar.Height }" />
        <hmi:localDef name="TestToolBarHeight"            type="number"                     hmi-bind:value="{{ ( LocalProps.TestToolBar == null ) ? 0 : HmiProps.ToolBar.Height + LocalProps.ScrollBarPart.Thickness }}" />
        <hmi:localDef name="TestToolBarVisibility"        type="boolean"                    hmi-bind:value="{{ ( LocalProps.TestToolBar == null ) ? false : HmiProps.ToolBar.Visible }}" />
        <hmi:localDef name="TestToolBarElements"          type="boolean"                    hmi-bind:value="{{ ( Converter.CountItems( HmiProps.ToolBar.Elements ) ) ? true : false }}" />

        <!-- Definition of StatusBar properties -->
        <hmi:localDef name="TestStatusBar"                type="number"                     hmi-bind:value="{ HmiProps.StatusBar.Height }" />
        <hmi:localDef name="TestStatusBarElements"        type="boolean"                    hmi-bind:value="{{ ( Converter.CountItems( HmiProps.StatusBar.Elements ) ) ? true : false }}" />
        <hmi:localDef name="TestStatusBarHeight"          type="number"                     hmi-bind:value="{{ ( LocalProps.TestStatusBar == null ) ? 0 : HmiProps.StatusBar.Height }}" />
        <hmi:localDef name="HasStatusBar"                 type="boolean"                    hmi-bind:value="{{ ( LocalProps.TestStatusBar == null ) ? false : true }}" />
        <hmi:localDef name="StatusBarHeight"              type="number"                     hmi-bind:value="{{ ( LocalProps.HasStatusBar ) ? LocalProps.TestStatusBarHeight : 0 }}" />
        <hmi:localDef name="StatusBarVisibility"          type="boolean"                    hmi-bind:value="{{ ( LocalProps.TestStatusBar == null ) ? false : HmiProps.StatusBar.Visible }}" />
        <hmi:localDef name="HasStatusBarElements"         type="boolean"                    hmi-bind:value="{{ ( LocalProps.HasStatusBar ) ? LocalProps.TestStatusBarElements : false }}" />
        <hmi:localDef name="StatusBarWidth"               type="number"                     hmi-bind:value="{ LocalProps.WindowInnerWidth }" />
        <hmi:localDef name="StatusBarVisible"             type="boolean"                    hmi-bind:value="{{ ( not( and( LocalProps.StatusBarVisibility, LocalProps.HasStatusBarElements ) ) ) ? false : ( or( ( LocalProps.StatusBarWidth == 0 ), ( LocalProps.StatusBarHeight == 0 ) ) ? false : true ) }}" />
        <hmi:localDef name="StatusBarTop"                 type="number"                     hmi-bind:value="{{ HmiProps.Height - LocalProps.WindowBorderWidth - LocalProps.StatusBarHeight }}" />

        <!-- Definition of ToolBar properties -->
        <hmi:localDef name="HasToolBar"                   type="boolean"                    hmi-bind:value="{{ ( LocalProps.TestToolBar == null ) ? false : true }}" />
        <hmi:localDef name="ToolBarHeight"                type="number"                     hmi-bind:value="{{ ( LocalProps.HasToolBar ) ? LocalProps.TestToolBarHeight : 0 }}" />
        <hmi:localDef name="ToolBarPosition"              type="number"                     value="1" />
        <hmi:localDef name="ToolBarVisibility"            type="boolean"                    hmi-bind:value="{{ ( LocalProps.HasToolBar ) ? LocalProps.TestToolBarVisibility: false }}" />
        <hmi:localDef name="HasToolBarElements"           type="boolean"                    hmi-bind:value="{{ ( LocalProps.HasToolBar ) ? LocalProps.TestToolBarElements : false }}" />
        <hmi:localDef name="ToolBarWidth"                 type="number"                     hmi-bind:value="{{ ( or( ( LocalProps.ToolBarPosition == 1 ), ( LocalProps.ToolBarPosition == 0 ) ) ? LocalProps.WindowInnerWidth : LocalProps.ToolBarHeight ) }}"  />
        <hmi:localDef name="ToolBarVisible"               type="boolean"                    hmi-bind:value="{{ ( not( and( LocalProps.ToolBarVisibility, LocalProps.HasToolBarElements ) ) ) ? false : ( or ( ( LocalProps.ToolBarWidth == 0 ), ( LocalProps.ToolBarHeight == 0 ) ) ? false : true ) }}" />

        <!-- Position and Extent related properties of the content -->
        <hmi:localDef name="ContentOffsetLeft"            type="number"                     hmi-bind:value="{{ and( LocalProps.HasToolBar, ( LocalProps.ToolBarPosition == 2 ) ) ? LocalProps.ToolBarHeight : 0 }}" />
        <hmi:localDef name="ContentOffsetTop"             type="number"                     hmi-bind:value="{{ and( LocalProps.HasToolBar, ( LocalProps.ToolBarPosition == 0 ) ) ? LocalProps.ToolBarHeight :  0 }}" />
        <hmi:localDef name="ContentOffsetWidth"           type="number"                     hmi-bind:value="{{ ( and( LocalProps.ToolBarVisible, or( ( LocalProps.ToolBarPosition == 2 ), ( LocalProps.ToolBarPosition == 3 ) ) ) ?  LocalProps.ToolBarHeight : 0 ) }}" />
        <hmi:localDef name="ContentOffsetHeight"          type="number"                     hmi-bind:value="{{ ( and( LocalProps.ToolBarVisible, or( ( LocalProps.ToolBarPosition == 0 ), ( LocalProps.ToolBarPosition == 1 ) ) ) ? LocalProps.ToolBarHeight : 0 ) + ( LocalProps.StatusBarVisible ? LocalProps.StatusBarHeight : 0 ) }}" />

        <hmi:localDef name="FocusColor"                   type="string"                     hmi-bind:value="{{ Converter.RGBA( HmiProps.FocusColor ) }}" />
        <hmi:localDef name="Configuration"                type="HmiDataGridViewPart"        hmi-bind:value="{{ eq(HmiProps.TrendCompanionMode, 1) ? HmiProps.TrendStatisticAreaView : ( eq(HmiProps.TrendCompanionMode, 2) ? HmiProps.TrendStatisticResultView : HmiProps.TrendRulerView )  }}" />

        <clipPath id="WindowClipRect">
            <rect id="ItemRect"
                  hmi-bind:width="{ HmiProps.Width   }"
                  hmi-bind:height="{ HmiProps.Height }"
                  stroke="none" />
        </clipPath>

    </defs>

    <g id="ElementsGroup" clip-path="url(#WindowClipRect)">

    <!-- Background -->
        <rect id="BackGroundRect"
              hmi-bind:width="{ HmiProps.Width }"
              hmi-bind:height="{ HmiProps.Height }"
              hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}"
              stroke="none" />

        <!-- ToolBar -->
        <g hmi:if="{ LocalProps.HasToolBar }" id="ToolBar">
            <hmi:include template="include.style.flat.toolbar.default.svghmi" hmi-bind:for="{ HmiProps.ToolBar }"
                       hmi-bind:x="{{ ( LocalProps.ToolBarPosition == 3 ) ? ( HmiProps.Width - LocalProps.WindowBorderWidth - LocalProps.ToolBarHeight ) : LocalProps.WindowBorderWidth }}"
                       hmi-bind:y="{{ ( LocalProps.ToolBarPosition == 1 ) ? ( HmiProps.Height - LocalProps.WindowBorderWidth - LocalProps.ToolBarHeight - ( LocalProps.StatusBarVisibility ? LocalProps.StatusBarHeight : 0 ) ) : LocalProps.CaptionHeight + LocalProps.WindowBorderWidth }}"
                       hmi-bind:width="{{ or( ( LocalProps.ToolBarPosition == 1 ), ( LocalProps.ToolBarPosition == 0 ) ) ? LocalProps.WindowInnerWidth : LocalProps.ToolBarHeight }}"
                       hmi-bind:height="{{ or( ( LocalProps.ToolBarPosition == 3 ), ( LocalProps.ToolBarPosition == 2 ) ) ? HmiProps.Height - 2 * LocalProps.WindowBorderWidth - LocalProps.CaptionHeight - ( LocalProps.StatusBarVisibility ? LocalProps.StatusBarHeight : 0 ) : LocalProps.ToolBarHeight }}">

                    <hmi:param name="Width"           type="number"   hmi-bind:value="{{ or( ( LocalProps.ToolBarPosition == 0 ), ( LocalProps.ToolBarPosition == 1 ) ) ? LocalProps.WindowInnerWidth : LocalProps.ToolBarHeight }}" />
                    <hmi:param name="Height"          type="number"   hmi-bind:value="{{ or( ( LocalProps.ToolBarPosition == 3 ), ( LocalProps.ToolBarPosition == 2 ) ) ? HmiProps.Height - 2 * LocalProps.WindowBorderWidth - LocalProps.CaptionHeight - ( LocalProps.StatusBarVisibility ? LocalProps.StatusBarHeight : 0 ) : LocalProps.ToolBarHeight }}" />
                    <hmi:param name="ItemOperable"    type="boolean"  hmi-bind:value="{ HmiProps.Enabled }" />
                    <hmi:param name="FocusColor"      type="string"   hmi-bind:value="{ LocalProps.FocusColor }" />
                    <hmi:param name="ShowFocusVisual" type="boolean"  hmi-bind:value="{ HmiProps.ShowFocusVisual }"   />

            </hmi:include>
        </g>

        <!-- StatusBar -->
        <g hmi:if="{ LocalProps.HasStatusBar }" id="StatusBar">
            <hmi:include template="include.style.flat.statusbar.default.svghmi" hmi-bind:for="{ HmiProps.StatusBar }"
                       hmi-bind:x="{ LocalProps.WindowBorderWidth }"
                       hmi-bind:y="{ LocalProps.StatusBarTop }"
                       hmi-bind:width="{ LocalProps.StatusBarWidth }"
                       hmi-bind:height="{ LocalProps.StatusBarHeight }">

                    <hmi:param name="Width"           type="number"  hmi-bind:value="{ LocalProps.StatusBarWidth }" />
                    <hmi:param name="Height"          type="number"  hmi-bind:value="{ LocalProps.StatusBarHeight }" />
                    <hmi:param name="ItemOperable"    type="boolean" hmi-bind:value="{ HmiProps.Enabled }" />
                    <hmi:param name="FocusColor"      type="string"  hmi-bind:value="{ LocalProps.FocusColor }" />
                    <hmi:param name="ShowFocusVisual" type="boolean" hmi-bind:value="{ HmiProps.ShowFocusVisual }"   />

            </hmi:include>
        </g>

        <g>
          <!-- Separator between grid and toolbar -->
          <rect
              hmi-bind:y="{{ HmiProps.Height - LocalProps.WindowBorderWidth - LocalProps.ContentOffsetHeight - LocalProps.SeparatorHeight }}"
              hmi-bind:width="{ HmiProps.Width }"
              hmi-bind:height="{ LocalProps.SeparatorHeight }"
              hmi-bind:fill="{{ Converter.RGBA( HmiProps.StatusBar.BackColor ) }}"
              stroke="none"/>
        </g>

        <!-- Content as include subtemplate -->
        <g hmi-bind:pointer-events="{{ HmiProps.Enabled ? 'auto' : 'none' }}">

            <hmi:include template="style.flat.trendcompanioncontent.default.svghmi"  hmi-bind:for="{ LocalProps.Configuration }"
                          hmi-bind:x="{{ LocalProps.WindowBorderWidth + LocalProps.ContentOffsetLeft }}"
                          hmi-bind:y="{{ LocalProps.WindowBorderWidth + LocalProps.CaptionHeight + LocalProps.ContentOffsetTop }}"
                          hmi-bind:width="{{ HmiProps.Width - 2 * LocalProps.WindowBorderWidth - LocalProps.ContentOffsetWidth }}"
                          hmi-bind:height="{{ HmiProps.Height - 2 * LocalProps.WindowBorderWidth - LocalProps.CaptionHeight - LocalProps.ContentOffsetHeight - LocalProps.SeparatorHeight }}" >

                <hmi:param name="AlwaysShowRecent"  type="boolean"      value="false" />
                <hmi:param name="FocusColor"        type="string"       hmi-bind:value="{ LocalProps.FocusColor }"     />
                <hmi:param name="ShowFocusVisual"   type="boolean"      hmi-bind:value="{ HmiProps.ShowFocusVisual }"  />
            </hmi:include>

        </g>
    </g>

    <!-- Frame -->
    <hmi:include template="include.style.flat.hmiwindowframe.default.svghmi"
                 x="0"
                 y="0"
                 hmi-bind:width="{ HmiProps.Width }"
                 hmi-bind:height="{ HmiProps.Height }" >

        <hmi:param name="Top"               type="number"           hmi-bind:value="{ HmiProps.Top }"                 />
        <hmi:param name="Left"              type="number"           hmi-bind:value="{ HmiProps.Left }"                />
        <hmi:param name="Width"             type="number"           hmi-bind:value="{ HmiProps.Width }"               />
        <hmi:param name="Height"            type="number"           hmi-bind:value="{ HmiProps.Height }"              />
        <hmi:param name="WindowFlags"       type="HmiWindowFlag"    hmi-bind:value="{ HmiProps.WindowFlags }"         />
        <hmi:param name="MinimumWidth"      type="number"           hmi-bind:value="{ LocalProps.MinimumWidth }"      />
        <hmi:param name="MinimumHeight"     type="number"           hmi-bind:value="{ LocalProps.MinimumHeight }"     />
        <hmi:param name="Icon"              type="HmiGraphic"       hmi-bind:value="{ HmiProps.Icon }"                />
        <hmi:param name="Caption"           type="HmiTextPart"      hmi-bind:value="{ HmiProps.Caption }"             />
        <hmi:param name="CaptionColor"      type="HmiColor"         hmi-bind:value="{ LocalProps.CaptionColor }"      />
        <hmi:param name="ShowCaption"       type="boolean"          hmi-bind:value="{ LocalProps.ShowCaption }"       />
        <hmi:param name="CaptionHeight"     type="number"           hmi-bind:value="{ LocalProps.CaptionHeight }"     />
        <hmi:param name="WindowBorderWidth" type="number"           hmi-bind:value="{ LocalProps.WindowBorderWidth }" />
        <hmi:param name="WindowBorderColor" type="HmiColor"         hmi-bind:value="{ LocalProps.WindowBorderColor }" />
        <hmi:param name="ItemOperable"      type="boolean"          hmi-bind:value="{ HmiProps.Enabled }"             />
        <hmi:param name="WindowState"       type="number"           hmi-bind:value="{ HmiProps.WindowState }" />

    </hmi:include>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2021. All Rights Reserved. -->

<!--  SingleCurlyBrackets = true;   DirectBindingToChromProps = true;   hmi-bind:scope = false  -->

<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
     xmlns:hmi="http://svg.siemens.com/hmi/"
     xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
     xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
     xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
     xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
     preserveAspectRatio="none"
     id="custom_TrendCompanionContent"
     data-tif-type="WSI:SvgGrid" >

    <hmi:self type="part:HmiDataGridViewPart" displayName="Flat TrendCompanionContent" name="style.flat.trendcompanioncontent">
        <hmi:paramDef name="AlwaysShowRecent"   type="boolean"  />
        <hmi:paramDef name="FocusColor"         type="string"   />
        <hmi:paramDef name="ShowFocusVisual"    type="boolean"  />
    </hmi:self>

    <defs>
        <hmi:localDef name="BorderWidth"    type="number" value="1" />
        <hmi:localDef name="ShowFocus"      type="boolean" hmi-bind:value="{{ and( ParamProps.ShowFocusVisual, SysProps.HasFocus ) }}" />
    </defs>

    <g id="Background">

        <hmi-element:table hmi-bind:auto-scroll="{ParamProps.AlwaysShowRecent}" hmi-bind:config="{ HmiProps }" hmi-bind:height="{Layout.ActualHeight}" hmi-bind:width="{Layout.ActualWidth}" start-x="0" start-y="0" hmi-bind:horizontal-scrollbar-visibility="{HmiProps.HorizontalScrollBarVisibility}"
                           hmi-bind:vertical-scrollbar-visibility="{ HmiProps.VerticalScrollBarVisibility }">

            <!--Column Header-->
            <hmi-feature:header>
                <hmi:master-inline>
                    <hmi:param name="Padding"           type="HmiPaddingPart"   hmi-bind:value="{ HmiProps.CellPadding }" />

                    <hmi:template>
                        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                              xmlns:hmi="http://svg.siemens.com/hmi/"
                              xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                              height="10" width="10" id="ColumnHeaderSVG" >

                            <hmi:self type="system:HmiHeaderCellSystemPart" displayName="ColumnHeader" name="columnheader" version="1.0.0" performanceClass="s">
                                <hmi:paramDef name="Padding"          type="HmiPaddingPart" />
                            </hmi:self>

                            <defs>
                                <hmi:localDef name="PaddingLeftRight"   type="number"     hmi-bind:value="{{ ( ParamProps.Padding.Left + ParamProps.Padding.Right ) }}" />
                                <hmi:localDef name="ReducedWidth"       type="number"     hmi-bind:value="{{ ( HmiProps.Width - 30 ) }}"                                />
                                <hmi:localDef name="ReducedHeight"      type="number"     hmi-bind:value="{{ ( HmiProps.Height / 2 ) }}"                                />
                            </defs>

                            <g id="TIFID_ColumnHeaderGroup" opacity="1">
                                <rect id="ColumnHeaderRect"
                                      x="0"
                                      y="0"
                                      hmi-bind:width="{ HmiProps.Width }"
                                      hmi-bind:height="{ HmiProps.Height }"
                                      hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}"/>
                                <hmi:include template="include.style.flat.content.svghmi" hmi-bind:for="{ HmiProps.Content }"
                                             hmi-bind:x="{ ParamProps.Padding.Left }"
                                             hmi-bind:y="{ ParamProps.Padding.Top }"
                                             hmi-bind:width="{{  gt( HmiProps.SortDirection, 0 ) ? (lt(( HmiProps.Width - LocalProps.PaddingLeftRight - 40 ), 0 ) ? 0 : ( HmiProps.Width - LocalProps.PaddingLeftRight - 40 ) ) : HmiProps.Width - LocalProps.PaddingLeftRight }}"
                                             hmi-bind:height="{{ HmiProps.Height - ParamProps.Padding.Bottom }}">
                                    <hmi:param name="Text"            type="string"       hmi-bind:value="{{ Converter.IsNumber(HmiProps.Text) ? HmiProps.Text : ( HmiProps.Text ? HmiProps.Text : HmiProps.Name ) }}"  />           
                                    <hmi:param name="Graphic"         type="HmiGraphic"   hmi-bind:value="{ HmiProps.Graphic }"       />
                                    <hmi:param name="Font"            type="HmiFontPart"  hmi-bind:value="{ HmiProps.Font }"          />
                                    <hmi:param name="TextColor"       type="HmiColor"     hmi-bind:value="{ HmiProps.ForeColor }"     />
                                    <hmi:param name="GraphicWidth"    type="number"       hmi-bind:value="{ HmiProps.GraphicWidth }"  />
                                    <hmi:param name="GraphicHeight"   type="number"       hmi-bind:value="{ HmiProps.GraphicHeight }" />
                                </hmi:include>
                                <svg hmi-bind:x="{{ gt( LocalProps.ReducedWidth, 0 ) ? ( LocalProps.ReducedWidth ) : HmiProps.Width }}" hmi-bind:y="{ LocalProps.ReducedHeight }" hmi:if="{{ and( and( gt( HmiProps.SortOrder, 0 ), eq( HmiProps.SortDirection, 1 )), eq( HmiProps.AllowSort,true )) }}">
                                    <path d="M 5 0 L0 10 L 10 10 z"></path>
                                    <text   x="11" y="10" font-size="14" font-style="normal" font-weight="400" font-family="Siemens Sans"  >
                                        <hmi:text hmi-bind:value="{ HmiProps.SortOrder }"/>
                                    </text>
                                </svg>
                                <svg hmi-bind:x="{{ gt( LocalProps.ReducedWidth, 0) ? ( LocalProps.ReducedWidth ) : HmiProps.Width }}" hmi-bind:y="{ LocalProps.ReducedHeight }" hmi:if="{{ and( and( gt( HmiProps.SortOrder, 0 ), eq( HmiProps.SortDirection, 2 )), eq( HmiProps.AllowSort,true )) }}">
                                    <path d="M 0 0 L 5 10 L 10 0 z"></path>
                                    <text   x="11" y="10" font-size="14" font-style="normal" font-weight="400" font-family="Siemens Sans"  >
                                        <hmi:text hmi-bind:value="{ HmiProps.SortOrder }"/>
                                    </text>
                                </svg>

                            </g>
                        </svg>
                    </hmi:template>
              </hmi:master-inline>

            </hmi-feature:header>

            <!--Row Headers-->
            <hmi-feature:recordHeader >
                <hmi:master-inline >
                    <hmi:param name="Padding"   type="HmiPaddingPart"   hmi-bind:value="{ HmiProps.CellPadding }" />
                    <hmi:template>
                        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                              xmlns:hmi="http://svg.siemens.com/hmi/"
                              xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                              xmlns:hmi-data-bind="http://svg.siemens.com/hmi/data/bind/"
                              height="10" width="10" >
                            <hmi:self type="system:HmiHeaderCellSystemPart" displayName="RowHeader" name="rowheader" version="1.0.0" performanceClass="s">
                                <hmi:data type="header-view"></hmi:data>
                                <hmi:paramDef name="Padding"      type="HmiPaddingPart" />
                            </hmi:self>

                            <g id="TIFID_RowHeaderGroup" opacity="1">
                                <rect id="RowHeaderRect"
                                             x="0"
                                             y="0"
                                             hmi-bind:width="{ HmiProps.Width }"
                                             hmi-bind:height="{ HmiProps.Height }"
                                             hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}"
                                             />
                                <hmi:include template="include.style.flat.text.svghmi"
                                             hmi-bind:x="{ ParamProps.Padding.Left }"
                                             hmi-bind:y="{ ParamProps.Padding.Top }"
                                             hmi-bind:width="{{ HmiProps.Width - ( ParamProps.Padding.Right + ParamProps.Padding.Left ) }}"
                                             hmi-bind:height="{{ HmiProps.Height - ParamProps.Padding.Bottom }}">
                                  <hmi:param name="Text"                    type="string"                   hmi-data-bind:value="{ Content.Index }"                       />
                                  <hmi:param name="Font"                    type="HmiFontPart"              hmi-bind:value="{ HmiProps.Font }"                            />
                                  <hmi:param name="TextColor"               type="HmiColor"                 hmi-bind:value="{ HmiProps.ForeColor }"                       />
                                  <hmi:param name="HorizontalTextAlignment" type="HmiHorizontalAlignment"   hmi-bind:value="{ HmiProps.Content.HorizontalTextAlignment }" />
                                  <hmi:param name="VerticalTextAlignment"   type="HmiVerticalAlignment"     value="1"                                                     />


                                </hmi:include>
                            </g>
                        </svg>
                    </hmi:template>
                </hmi:master-inline>
            </hmi-feature:recordHeader>

            <hmi-feature:dataTemplates>
                <hmi:master-include template="include.style.flat.datacell.svghmi">
                    <hmi:param name="Padding"   type="HmiPaddingPart"   hmi-bind:value="{ HmiProps.CellPadding }" />
                </hmi:master-include>
            </hmi-feature:dataTemplates>

            <hmi-feature:rowBackground >
                <hmi:master-include template="include.style.flat.rowbackground.svghmi">
                </hmi:master-include>
            </hmi-feature:rowBackground>

            <hmi-feature:columnBackground >
                <hmi:master-include template="include.style.flat.columnbackground.svghmi">
                </hmi:master-include>
            </hmi-feature:columnBackground>

            <!--Grid lines-->
            <hmi-feature:gridlines>
                <hmi-feature:gridline
                    position-filter="header" expansion="header inner"
                    hmi-bind:stroke-width="{ HmiProps.GridLineWidth }"
                    hmi-bind:stroke="{{ Converter.RGBA(  HmiProps.HeaderSettings.HeaderGridLineColor ) }}"
                    orientation="row column">
                </hmi-feature:gridline>
                <hmi-feature:gridline
                    position-filter="inner" expansion="header"
                    hmi-bind:stroke-width="{ HmiProps.GridLineWidth }"
                    hmi-bind:stroke="{{ Converter.RGBA(  HmiProps.HeaderSettings.HeaderGridLineColor ) }}"
                    orientation="row column">
                </hmi-feature:gridline>
                <hmi-feature:gridline
                    position-filter="inner" expansion="inner"
                    hmi-bind:stroke-width="{ HmiProps.GridLineWidth }"
                    hmi-bind:stroke="{{ HmiProps.GridLineVisibility == 0 ? 'rgba(0,0,0,0)' : Converter.RGBA(  HmiProps.GridLineColor ) }}"
                    hmi-bind:orientation="{{ HmiProps.GridLineVisibility == 3 ? 'row column' : ( HmiProps.GridLineVisibility == 2 ? 'column':'row') }}">
                </hmi-feature:gridline>
            </hmi-feature:gridlines>

            <hmi-feature:selection>
                <hmi:master-inline >
                    <hmi:template>
                        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                            xmlns:hmi="http://svg.siemens.com/hmi/"
                            xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
                            height="10" width="10" >
                            <hmi:self type="system:HmiSelectionSystemPart" displayName="SelectionBorder" name="selectionborder" version="1.0.0" performanceClass="s">
                            </hmi:self>

                            <g id="TIFID_SelectionRect" opacity="1">
                                <rect id="ItemBGRect3"
                                    hmi-bind:x="{{ HmiProps.BorderWidth / 2 }}"
                                    hmi-bind:y="{{ HmiProps.BorderWidth / 2 }}"
                                    hmi-bind:width="{ HmiProps.Width}"
                                    hmi-bind:height="{ HmiProps.Height }"
                                    fill="none"
                                    hmi-bind:stroke-width="{ HmiProps.BorderWidth }"
                                    hmi-bind:stroke="{{Converter.RGBA(HmiProps.BorderColor)}}"/>
                            </g>
                        </svg>
                    </hmi:template>
                </hmi:master-inline>
            </hmi-feature:selection>
        </hmi-element:table>

        <rect id="ItemBGRect"
              hmi-bind:x="{{ LocalProps.BorderWidth / 2 }}"
              hmi-bind:y="{{ LocalProps.BorderWidth / 2 }}"
              hmi-bind:width="{{ Layout.ActualWidth - LocalProps.BorderWidth }}"
              hmi-bind:height="{{ Layout.ActualHeight - LocalProps.BorderWidth }}"
              fill="none"
              hmi-bind:stroke-width="{{ LocalProps.ShowFocus ? 4 : 0 }}"
              hmi-bind:stroke="{{ LocalProps.ShowFocus ? ParamProps.FocusColor : 'black' }}"/>
    </g>
</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2020. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:hmi="http://svg.siemens.com/hmi/"
    xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
    xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
    xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/"
    preserveAspectRatio="none"
    overflow="visible"
    id="TIFID_custom_TrendControlContent" >

  <hmi:self type="item:HmiTrendControl" displayName="Flat TrendControl" name="style.flat.trendcontrol" version="2.8" performanceClass="L" >
    <hmi:focus focusVisual="local" />
  </hmi:self>

  <defs>
    <!-- System definitions of this template -->
    <hmi:localDef name="ScrollBarPart"                type="HmiScrollBarSystemPart"     hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiScrollBarSystemPart' ) }}" />

    <hmi:localDef name="WindowFramePart"              type="HmiWindowFrameSystemPart"   hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiWindowFrameSystemPart' ) }}" />

    <hmi:localDef name="MinimumWidth"                 type="number"     value="100" />
    <hmi:localDef name="MinimumHeight"                type="number"     value="50"  />
    <hmi:localDef name="LegendTextPadding"            type="number"     value="12"  />

    <hmi:localDef name="ShowFocus"                    type="boolean"    hmi-bind:value="{{ and( HmiProps.ShowFocusVisual, SysProps.HasFocus ) }}" />
    <hmi:localDef name="ShowCaption"                  type="boolean"    hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowCaption ) }}" />
    <hmi:localDef name="CaptionHeight"                type="number"     hmi-bind:value="{{ LocalProps.ShowCaption ? LocalProps.WindowFramePart.CaptionHeight : 0 }}" />
    <hmi:localDef name="CaptionColor"                 type="number"     hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : HmiProps.CaptionColor }}" />
    <hmi:localDef name="WindowBorderColor"            type="number"     hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : LocalProps.WindowFramePart.BorderColor }}" />
    <hmi:localDef name="WindowBorderWidth"            type="number"     hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowBorder ) ? LocalProps.WindowFramePart.BorderWidth : 0 }}" />
    <hmi:localDef name="PaddedWindowBorderWidth"      type="number"     hmi-bind:value="{{ 2 * LocalProps.WindowBorderWidth }}" />
    <hmi:localDef name="WindowInnerWidth"             type="number"     hmi-bind:value="{{ HmiProps.Width - LocalProps.PaddedWindowBorderWidth }}" />
    <hmi:localDef name="HeightPadding"                type="number"     hmi-bind:value="{{ HmiProps.Height - LocalProps.WindowBorderWidth }}" />
    <hmi:localDef name="CaptionHeightPadding"         type="number"     hmi-bind:value="{{ LocalProps.WindowBorderWidth + LocalProps.CaptionHeight }}" />
    <hmi:localDef name="StartX"                       type="number"     hmi-bind:value="{{ HmiProps.ShiftAxes ? 10 : 0 }}" />

    <!-- Definition of StatusBar properties -->

    <hmi:localDef name="HasStatusBar"                 type="boolean"    hmi-bind:value="{{ HmiProps.StatusBar.Height ? true : false }}" />
    <hmi:localDef name="TestStatusBarElements"        type="boolean"    hmi-bind:value="{{ ( Converter.CountItems( HmiProps.StatusBar.Elements ) ) ? true : false }}" />
    <hmi:localDef name="StatusBarHeight"              type="number"     hmi-bind:value="{{ LocalProps.HasStatusBar ? HmiProps.StatusBar.Height : 0 }}" />
    <hmi:localDef name="StatusBarVisibility"          type="boolean"    hmi-bind:value="{{ LocalProps.HasStatusBar ? HmiProps.StatusBar.Visible : false }}" />
    <hmi:localDef name="HasStatusBarElements"         type="boolean"    hmi-bind:value="{{ LocalProps.HasStatusBar ? LocalProps.TestStatusBarElements : false }}" />
    <hmi:localDef name="StatusBarVisible"             type="boolean"    hmi-bind:value="{{ ( not( and( LocalProps.StatusBarVisibility, LocalProps.HasStatusBarElements ) ) ) ? false : ( or( ( LocalProps.WindowInnerWidth == 0 ), ( LocalProps.StatusBarHeight == 0 ) ) ? false : true ) }}" />
    <hmi:localDef name="StatusBarTop"                 type="number"     hmi-bind:value="{{ LocalProps.HeightPadding - LocalProps.StatusBarHeight }}" />

    <!-- Definition of ToolBar properties -->

    <hmi:localDef name="HasToolBar"                   type="boolean"    hmi-bind:value="{{ HmiProps.ToolBar.Height ? true : false }}" />
    <hmi:localDef name="TestToolBarElements"          type="boolean"    hmi-bind:value="{{ ( Converter.CountItems( HmiProps.ToolBar.Elements ) ) ? true : false }}" />
    <hmi:localDef name="ToolBarHeight"                type="number"     hmi-bind:value="{{ LocalProps.HasToolBar ? HmiProps.ToolBar.Height + LocalProps.ScrollBarPart.Thickness : 0 }}" />
    <hmi:localDef name="ToolBarVisibility"            type="boolean"    hmi-bind:value="{{ LocalProps.HasToolBar ? HmiProps.ToolBar.Visible : false }}" />
    <hmi:localDef name="HasToolBarElements"           type="boolean"    hmi-bind:value="{{ LocalProps.HasToolBar ? LocalProps.TestToolBarElements : false }}" />
    <hmi:localDef name="ToolBarVisible"               type="boolean"    hmi-bind:value="{{ ( not( and( LocalProps.ToolBarVisibility, LocalProps.HasToolBarElements ) ) ) ? false : ( or ( ( LocalProps.WindowInnerWidth == 0 ), ( LocalProps.ToolBarHeight == 0 ) ) ? false : true ) }}" />

    <!-- Position and Extent related properties of the content -->
    <hmi:localDef name="ContentOffsetHeight"          type="number"     hmi-bind:value="{{ ( LocalProps.ToolBarVisible ? LocalProps.ToolBarHeight : 0 ) + ( LocalProps.StatusBarVisible ? LocalProps.StatusBarHeight : 0 ) }}" />

    <hmi:localDef name="FocusColor"                   type="string"     hmi-bind:value="{{ Converter.RGBA( HmiProps.FocusColor ) }}" />

    <clipPath id="WindowClipRect">
      <rect id="ItemRect"
            hmi-bind:width="{ HmiProps.Width   }"
            hmi-bind:height="{ HmiProps.Height }" />
    </clipPath>

  </defs>

  <g id="ElementsGroup" clip-path="url(#WindowClipRect)">

    <!-- Background -->
    <rect id="BackGroundRect"
          hmi-bind:width="{ HmiProps.Width }"
          hmi-bind:height="{ HmiProps.Height }"
          hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}" />

    <!-- ToolBar -->
    <g hmi:if="{ LocalProps.HasToolBar }" id="ToolBar">
      <hmi:include template="include.style.flat.toolbar.default.svghmi" hmi-bind:for="{ HmiProps.ToolBar }"
                   hmi-bind:x="{ LocalProps.WindowBorderWidth }"
                   hmi-bind:y="{{ LocalProps.HeightPadding - LocalProps.ToolBarHeight - ( LocalProps.StatusBarVisibility ? LocalProps.StatusBarHeight : 0 ) }}"
                   hmi-bind:width="{ LocalProps.WindowInnerWidth }"
                   hmi-bind:height="{ LocalProps.ToolBarHeight }">

        <hmi:param name="Width"           type="number"   hmi-bind:value="{ LocalProps.WindowInnerWidth }"  />
        <hmi:param name="Height"          type="number"   hmi-bind:value="{ LocalProps.ToolBarHeight }"     />
        <hmi:param name="ItemOperable"    type="boolean"  hmi-bind:value="{ HmiProps.Enabled }"             />
        <hmi:param name="FocusColor"      type="string"   hmi-bind:value="{ LocalProps.FocusColor }"        />
        <hmi:param name="ShowFocusVisual" type="boolean"  hmi-bind:value="{ HmiProps.ShowFocusVisual }"     />

      </hmi:include>
    </g>

    <!-- StatusBar -->
    <g hmi:if="{ LocalProps.HasStatusBar }" id="StatusBar">
      <hmi:include template="include.style.flat.statusbar.default.svghmi" hmi-bind:for="{ HmiProps.StatusBar }"
                   hmi-bind:x="{ LocalProps.WindowBorderWidth }"
                   hmi-bind:y="{ LocalProps.StatusBarTop }"
                   hmi-bind:width="{ LocalProps.WindowInnerWidth }"
                   hmi-bind:height="{ LocalProps.StatusBarHeight }">

        <hmi:param name="Width"           type="number"   hmi-bind:value="{ LocalProps.WindowInnerWidth }"  />
        <hmi:param name="Height"          type="number"   hmi-bind:value="{ LocalProps.StatusBarHeight }" />
        <hmi:param name="ItemOperable"    type="boolean"  hmi-bind:value="{ HmiProps.Enabled }"           />
        <hmi:param name="FocusColor"      type="string"   hmi-bind:value="{ LocalProps.FocusColor }"      />
        <hmi:param name="ShowFocusVisual" type="boolean"  hmi-bind:value="{ HmiProps.ShowFocusVisual }"   />

      </hmi:include>
    </g>

    <!-- Content as include subtemplate -->
    <g hmi-bind:pointer-events="{{ HmiProps.Enabled ? 'auto' : 'none' }}" hmi-bind:transform="translate(0, {{LocalProps.LegendTextPadding}})">
        <hmi:include template="include.style.flat.trendarea.svghmi" hmi-bind:forEach="{ HmiProps.TrendAreas }"
                       hmi-bind:x="{{ LocalProps.WindowBorderWidth + LocalProps.StartX }}"
                       hmi-bind:y="{ LocalProps.CaptionHeightPadding }"
                       hmi-flex:width="{{ LocalProps.WindowInnerWidth - ( 2 * LocalProps.StartX ) }}"
                       hmi-flex:height="{{ HmiProps.Height - LocalProps.PaddedWindowBorderWidth - LocalProps.CaptionHeight - LocalProps.ContentOffsetHeight - LocalProps.LegendTextPadding }}"
                       hmi-flex:alignContent="stretch" hmi-flex:direction="{{ HmiProps.ShiftAxes? 'row':'column' }}" hmi-flex:justifyContent="center" >

        <hmi:param name="HasFocus"            type="boolean"        hmi-bind:value="{ HmiProps.HasFocus }"              />
        <hmi:param name="BackColor"           type="HmiColor"       hmi-bind:value="{ HmiProps.BackColor }"             />
        <hmi:param name="AreaSpacing"         type="number"         hmi-bind:value="{ HmiProps.AreaSpacing }"           />
        <hmi:param name="ShiftAxes"           type="boolean"        hmi-bind:value="{ HmiProps.ShiftAxes }"             />
        <hmi:param name="Online"              type="boolean"        hmi-bind:value="{ HmiProps.Online }"                />
        <hmi:param name="ShowRuler"           type="boolean"        hmi-bind:value="{ HmiProps.ShowRuler }"             />
        <hmi:param name="ShowStatisticRulers" type="boolean"        hmi-bind:value="{ HmiProps.ShowStatisticRulers }"   />
        <hmi:param name="TimeZone"            type="number"         hmi-bind:value="{ HmiProps.TimeZone }"              />
        <hmi:param name="ExtendRulerToAxis"   type="boolean"        hmi-bind:value="{ HmiProps.ExtendRulerToAxis }"     />
        <hmi:param name="LegendFont"          type="HmiFontPart"    hmi-bind:value="{ HmiProps.Legend.Font }"           />
        <hmi:param name="LegendForeColor"     type="HmiColor"       hmi-bind:value="{ HmiProps.Legend.ForeColor }"      />
        <hmi:param name="LegendVisibilty"     type="boolean"        hmi-bind:value="{ HmiProps.Legend.Visible }"        />

      </hmi:include>
    </g>
  </g>

  <!-- Frame -->
  <hmi:include template="include.style.flat.hmiwindowframe.default.svghmi"
               hmi-bind:width="{ HmiProps.Width }"
               hmi-bind:height="{ HmiProps.Height }" >

    <hmi:param name="Top"               type="number"           hmi-bind:value="{ HmiProps.Top }"                 />
    <hmi:param name="Left"              type="number"           hmi-bind:value="{ HmiProps.Left }"                />
    <hmi:param name="Width"             type="number"           hmi-bind:value="{ HmiProps.Width }"               />
    <hmi:param name="Height"            type="number"           hmi-bind:value="{ HmiProps.Height }"              />
    <hmi:param name="WindowFlags"       type="HmiWindowFlag"    hmi-bind:value="{ HmiProps.WindowFlags }"         />
    <hmi:param name="MinimumWidth"      type="number"           hmi-bind:value="{ LocalProps.MinimumWidth }"      />
    <hmi:param name="MinimumHeight"     type="number"           hmi-bind:value="{ LocalProps.MinimumHeight }"     />
    <hmi:param name="Icon"              type="HmiGraphic"       hmi-bind:value="{ HmiProps.Icon }"                />
    <hmi:param name="Caption"           type="HmiTextPart"      hmi-bind:value="{ HmiProps.Caption }"             />
    <hmi:param name="CaptionColor"      type="HmiColor"         hmi-bind:value="{ LocalProps.CaptionColor }"      />
    <hmi:param name="ShowCaption"       type="boolean"          hmi-bind:value="{ LocalProps.ShowCaption }"       />
    <hmi:param name="CaptionHeight"     type="number"           hmi-bind:value="{ LocalProps.CaptionHeight }"     />
    <hmi:param name="WindowBorderWidth" type="number"           hmi-bind:value="{ LocalProps.WindowBorderWidth }" />
    <hmi:param name="WindowBorderColor" type="HmiColor"         hmi-bind:value="{ LocalProps.WindowBorderColor }" />
    <hmi:param name="ItemOperable"      type="boolean"          hmi-bind:value="{ HmiProps.Enabled }"             />
    <hmi:param name="WindowState"       type="number"           hmi-bind:value="{ HmiProps.WindowState }" />

  </hmi:include>

</svg>
<!DOCTYPE svg PUBLIC "-//SIEMENS//DTD SVG 1.0 TIA-HMI//EN" "http://tia.siemens.com/graphics/svg/1.9/dtd/svg19-hmi.dtd">
<!-- SIMATIC WINCC UA Copyright (C) Siemens AG 2016. All Rights Reserved. -->

<svg xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:hmi="http://svg.siemens.com/hmi/"
    xmlns:hmi-bind="http://svg.siemens.com/hmi/bind/"
    xmlns:hmi-bind--xlink="http://svg.siemens.com/hmi/bind/xlink/"
    xmlns:hmi-event="http://svg.siemens.com/hmi/event/"
    xmlns:hmi-element="http://svg.siemens.com/hmi/element/"
    xmlns:hmi-feature="http://svg.siemens.com/hmi/feature/"
    xmlns:hmi-flex="http://svg.siemens.com/hmi/flex/"
    preserveAspectRatio="none"
    overflow="visible" >

    <hmi:self type="item:HmiWebControl" displayName="Flat WebControl" name="style.flat.webcontrol" version="2.8" performanceClass="L" >
        <hmi:focus focusVisual="local" />
    </hmi:self>

    <defs>
        <!-- System definitions of this template -->
        <hmi:localDef name="ScrollBarPart"                type="HmiScrollBarSystemPart"     hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiScrollBarSystemPart' ) }}" />
      
        <hmi:localDef name="WindowFramePart"              type="HmiWindowFrameSystemPart"   hmi-bind:value="{{ Converter.GetDefaultValue( 'HmiWindowFrameSystemPart' ) }}" />

        <hmi:localDef name="MinimumWidth"                 type="number"     value="100" />
        <hmi:localDef name="MinimumHeight"                type="number"     value="50"  />

        <hmi:localDef name="ShowFocus"                    type="boolean"    hmi-bind:value="{{ and( HmiProps.ShowFocusVisual, SysProps.HasFocus ) }}" />
        <hmi:localDef name="ShowCaption"                  type="boolean"    hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowCaption ) }}" />
        <hmi:localDef name="CaptionHeight"                type="number"     hmi-bind:value="{{ LocalProps.ShowCaption ? LocalProps.WindowFramePart.CaptionHeight : 0 }}" />
        <hmi:localDef name="CaptionColor"                 type="number"     hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : HmiProps.CaptionColor }}" />
        <hmi:localDef name="WindowBorderColor"            type="number"     hmi-bind:value="{{ LocalProps.ShowFocus ? HmiProps.FocusColor : LocalProps.WindowFramePart.BorderColor }}" />
        <hmi:localDef name="WindowBorderWidth"            type="number"     hmi-bind:value="{{ has( HmiProps.WindowFlags, HmiWindowFlag.ShowBorder ) ? LocalProps.WindowFramePart.BorderWidth : 0 }}" />
        <hmi:localDef name="WindowInnerWidth"             type="number"     hmi-bind:value="{{ HmiProps.Width - 2 * LocalProps.WindowBorderWidth }}" />

        <!-- Properties of the Hmi Window -->
        <hmi:localDef name="TestToolBar"                  type="number"     hmi-bind:value="{ HmiProps.ToolBar.Height }" />
        <hmi:localDef name="TestToolBarHeight"            type="number"     hmi-bind:value="{{ ( LocalProps.TestToolBar == null ) ? 0 : HmiProps.ToolBar.Height + LocalProps.ScrollBarPart.Thickness }}" />
        <hmi:localDef name="TestToolBarVisibility"        type="boolean"    hmi-bind:value="{{ ( LocalProps.TestToolBar == null ) ? false : HmiProps.ToolBar.Visible }}" />
        <hmi:localDef name="TestToolBarElements"          type="boolean"    hmi-bind:value="{{ ( Converter.CountItems( HmiProps.ToolBar.Elements ) ) ? true : false }}" />

        <!-- Definition of StatusBar properties -->
        <hmi:localDef name="TestStatusBar"                type="number"     hmi-bind:value="{ HmiProps.StatusBar.Height }" />
        <hmi:localDef name="TestStatusBarElements"        type="boolean"    hmi-bind:value="{{ ( Converter.CountItems( HmiProps.StatusBar.Elements ) ) ? true : false }}" />
        <hmi:localDef name="TestStatusBarHeight"          type="number"     hmi-bind:value="{{ ( LocalProps.TestStatusBar == null ) ? 0 : HmiProps.StatusBar.Height }}" />
        <hmi:localDef name="HasStatusBar"                 type="boolean"    hmi-bind:value="{{ ( LocalProps.TestStatusBar == null ) ? false : true }}" />
        <hmi:localDef name="StatusBarHeight"              type="number"     hmi-bind:value="{{ ( LocalProps.HasStatusBar ) ? LocalProps.TestStatusBarHeight : 0 }}" />
        <hmi:localDef name="StatusBarVisibility"          type="boolean"    hmi-bind:value="{{ ( LocalProps.TestStatusBar == null ) ? false : HmiProps.StatusBar.Visible }}" />
        <hmi:localDef name="HasStatusBarElements"         type="boolean"    hmi-bind:value="{{ ( LocalProps.HasStatusBar ) ? LocalProps.TestStatusBarElements : false }}" />
        <hmi:localDef name="StatusBarWidth"               type="number"     hmi-bind:value="{ LocalProps.WindowInnerWidth }" />
        <hmi:localDef name="StatusBarVisible"             type="boolean"    hmi-bind:value="{{ ( not( and( LocalProps.StatusBarVisibility, LocalProps.HasStatusBarElements ) ) ) ? false : ( or( ( LocalProps.StatusBarWidth == 0 ), ( LocalProps.StatusBarHeight == 0 ) ) ? false : true ) }}" />
        <hmi:localDef name="StatusBarTop"                 type="number"     hmi-bind:value="{{ HmiProps.Height - LocalProps.WindowBorderWidth - LocalProps.StatusBarHeight }}" />

        <!-- Definition of ToolBar properties -->
        <hmi:localDef name="HasToolBar"                   type="boolean"    hmi-bind:value="{{ ( LocalProps.TestToolBar == null ) ? false : true }}" />
        <hmi:localDef name="ToolBarHeight"                type="number"     hmi-bind:value="{{ ( LocalProps.HasToolBar ) ? LocalProps.TestToolBarHeight : 0 }}" />
        <hmi:localDef name="ToolBarPosition"              type="number"     value="0" />
        <hmi:localDef name="ToolBarVisibility"            type="boolean"    hmi-bind:value="{{ ( LocalProps.HasToolBar ) ? LocalProps.TestToolBarVisibility: false }}" />
        <hmi:localDef name="HasToolBarElements"           type="boolean"    hmi-bind:value="{{ ( LocalProps.HasToolBar ) ? LocalProps.TestToolBarElements : false }}" />
        <hmi:localDef name="ToolBarWidth"                 type="number"     hmi-bind:value="{{ ( or( ( LocalProps.ToolBarPosition == 1 ), ( LocalProps.ToolBarPosition == 0 ) ) ? LocalProps.WindowInnerWidth : LocalProps.ToolBarHeight ) }}"  />
        <hmi:localDef name="ToolBarVisible"               type="boolean"    hmi-bind:value="{{ ( not( and( LocalProps.ToolBarVisibility, LocalProps.HasToolBarElements ) ) ) ? false : ( or ( ( LocalProps.ToolBarWidth == 0 ), ( LocalProps.ToolBarHeight == 0 ) ) ? false : true ) }}" />

        <!-- Position and Extent related properties of the content -->
        <hmi:localDef name="ContentOffsetLeft"            type="number"     hmi-bind:value="{{ and( LocalProps.ToolBarVisible, ( LocalProps.ToolBarPosition == 2 ) ) ? LocalProps.ToolBarHeight : 0 }}" />
        <hmi:localDef name="ContentOffsetTop"             type="number"     hmi-bind:value="{{ and( LocalProps.ToolBarVisible, ( LocalProps.ToolBarPosition == 0 ) ) ? LocalProps.ToolBarHeight :  0 }}" />
        <hmi:localDef name="ContentOffsetWidth"           type="number"     hmi-bind:value="{{ ( and( LocalProps.ToolBarVisible, or( ( LocalProps.ToolBarPosition == 2 ), ( LocalProps.ToolBarPosition == 3 ) ) ) ?  LocalProps.ToolBarHeight : 0 ) }}" />
        <hmi:localDef name="ContentOffsetHeight"          type="number"     hmi-bind:value="{{ ( and( LocalProps.ToolBarVisible, or( ( LocalProps.ToolBarPosition == 0 ), ( LocalProps.ToolBarPosition == 1 ) ) ) ? LocalProps.ToolBarHeight : 0 ) + ( LocalProps.StatusBarVisible ? LocalProps.StatusBarHeight : 0 ) }}" />
        <hmi:localDef name="SeparationLineHeight"         type="number"     value="2" />
      
        <hmi:localDef name="FocusColor"                   type="string"     hmi-bind:value="{{ Converter.RGBA( HmiProps.FocusColor ) }}" />

        <clipPath id="WindowClipRect">
            <rect id="ItemRect"
                  hmi-bind:width="{ HmiProps.Width   }"
                  hmi-bind:height="{ HmiProps.Height }"
                  stroke="none" />
        </clipPath>

    </defs>

    <g id="ElementsGroup" clip-path="url(#WindowClipRect)">

        <!-- Background -->
        <rect id="BackGroundRect"
              hmi-bind:width="{ HmiProps.Width }"
              hmi-bind:height="{ HmiProps.Height }"
              hmi-bind:fill="{{ Converter.RGBA( HmiProps.BackColor ) }}"
              stroke="none" />

        <!-- ToolBar -->
        <g hmi:if="{ LocalProps.HasToolBar }" id="ToolBar">
            <hmi:include template="include.style.flat.toolbar.default.svghmi" hmi-bind:for="{ HmiProps.ToolBar }"
                         hmi-bind:x="{{ ( LocalProps.ToolBarPosition == 3 ) ? ( HmiProps.Width - LocalProps.WindowBorderWidth - LocalProps.ToolBarHeight ) : LocalProps.WindowBorderWidth }}"
                         hmi-bind:y="{{ ( LocalProps.ToolBarPosition == 1 ) ? ( HmiProps.Height - LocalProps.WindowBorderWidth - LocalProps.ToolBarHeight - ( LocalProps.StatusBarVisibility ? LocalProps.StatusBarHeight : 0 ) ) : LocalProps.CaptionHeight + LocalProps.WindowBorderWidth }}"
                         hmi-bind:width="{{ or( ( LocalProps.ToolBarPosition == 1 ), ( LocalProps.ToolBarPosition == 0 ) ) ? LocalProps.WindowInnerWidth : LocalProps.ToolBarHeight }}"
                         hmi-bind:height="{{ or( ( LocalProps.ToolBarPosition == 3 ), ( LocalProps.ToolBarPosition == 2 ) ) ? HmiProps.Height - 2 * LocalProps.WindowBorderWidth - LocalProps.CaptionHeight - ( LocalProps.StatusBarVisibility ? LocalProps.StatusBarHeight : 0 ) : LocalProps.ToolBarHeight }}">

                <hmi:param name="Width"           type="number"   hmi-bind:value="{{ or( ( LocalProps.ToolBarPosition == 0 ), ( LocalProps.ToolBarPosition == 1 ) ) ? LocalProps.WindowInnerWidth : LocalProps.ToolBarHeight }}" />
                <hmi:param name="Height"          type="number"   hmi-bind:value="{{ or( ( LocalProps.ToolBarPosition == 3 ), ( LocalProps.ToolBarPosition == 2 ) ) ? HmiProps.Height - 2 * LocalProps.WindowBorderWidth - LocalProps.CaptionHeight - ( LocalProps.StatusBarVisibility ? LocalProps.StatusBarHeight : 0 ) : LocalProps.ToolBarHeight }}" />
                <hmi:param name="ItemOperable"    type="boolean"  hmi-bind:value="{ HmiProps.Enabled }" />
                <hmi:param name="FocusColor"      type="string"   hmi-bind:value="{ LocalProps.FocusColor }" />
                <hmi:param name="ShowFocusVisual" type="boolean"  hmi-bind:value="{ HmiProps.ShowFocusVisual }"   />

            </hmi:include>
        </g>

        <!-- StatusBar -->
        <g hmi:if="{ LocalProps.HasStatusBar }" id="StatusBar">
            <hmi:include template="include.style.flat.statusbar.default.svghmi" hmi-bind:for="{ HmiProps.StatusBar }"
                         hmi-bind:x="{ LocalProps.WindowBorderWidth }"
                         hmi-bind:y="{ LocalProps.StatusBarTop }"
                         hmi-bind:width="{ LocalProps.StatusBarWidth }"
                         hmi-bind:height="{ LocalProps.StatusBarHeight }">

                <hmi:param name="Width"           type="number"   hmi-bind:value="{ LocalProps.StatusBarWidth }" />
                <hmi:param name="Height"          type="number"   hmi-bind:value="{ LocalProps.StatusBarHeight }" />
                <hmi:param name="ItemOperable"    type="boolean"  hmi-bind:value="{ HmiProps.Enabled }" />
                <hmi:param name="FocusColor"      type="string"   hmi-bind:value="{ LocalProps.FocusColor }" />
                <hmi:param name="ShowFocusVisual" type="boolean"  hmi-bind:value="{ HmiProps.ShowFocusVisual }"   />

            </hmi:include>
        </g>

        <!-- Content -->
        <g >
            <hmi-element:content
                       hmi-bind:left="{{ LocalProps.WindowBorderWidth + LocalProps.ContentOffsetLeft }}"
                       hmi-bind:top="{{ LocalProps.WindowBorderWidth + LocalProps.CaptionHeight + LocalProps.ContentOffsetTop + LocalProps.SeparationLineHeight }}"
                       hmi-bind:width="{{ HmiProps.Width - 2 * LocalProps.WindowBorderWidth - LocalProps.ContentOffsetWidth }}"
                       hmi-bind:height="{{ HmiProps.Height - 2 * LocalProps.WindowBorderWidth - LocalProps.CaptionHeight - LocalProps.ContentOffsetHeight - LocalProps.SeparationLineHeight }}" />
        </g>
    </g>

    <!-- Frame -->
    <hmi:include template="include.style.flat.hmiwindowframe.default.svghmi"
                 x="0"
                 y="0"
                 hmi-bind:width="{ HmiProps.Width }"
                 hmi-bind:height="{ HmiProps.Height }" >

        <hmi:param name="Top"               type="number"           hmi-bind:value="{ HmiProps.Top }"                 />
        <hmi:param name="Left"              type="number"           hmi-bind:value="{ HmiProps.Left }"                />
        <hmi:param name="Width"             type="number"           hmi-bind:value="{ HmiProps.Width }"               />
        <hmi:param name="Height"            type="number"           hmi-bind:value="{ HmiProps.Height }"              />
        <hmi:param name="WindowFlags"       type="HmiWindowFlag"    hmi-bind:value="{ HmiProps.WindowFlags }"         />
        <hmi:param name="MinimumWidth"      type="number"           hmi-bind:value="{ LocalProps.MinimumWidth }"      />
        <hmi:param name="MinimumHeight"     type="number"           hmi-bind:value="{ LocalProps.MinimumHeight }"     />
        <hmi:param name="Icon"              type="HmiGraphic"       hmi-bind:value="{ HmiProps.Icon }"                />
        <hmi:param name="Caption"           type="HmiTextPart"      hmi-bind:value="{ HmiProps.Caption }"             />
        <hmi:param name="CaptionColor"      type="HmiColor"         hmi-bind:value="{ LocalProps.CaptionColor }"      />
        <hmi:param name="ShowCaption"       type="boolean"          hmi-bind:value="{ LocalProps.ShowCaption }"       />
        <hmi:param name="CaptionHeight"     type="number"           hmi-bind:value="{ LocalProps.CaptionHeight }"     />
        <hmi:param name="WindowBorderWidth" type="number"           hmi-bind:value="{ LocalProps.WindowBorderWidth }" />
        <hmi:param name="WindowBorderColor" type="HmiColor"         hmi-bind:value="{ LocalProps.WindowBorderColor }" />
        <hmi:param name="ItemOperable"      type="boolean"          hmi-bind:value="{ HmiProps.Enabled }"             />
        <hmi:param name="WindowState"       type="number"           hmi-bind:value="{ HmiProps.WindowState }" />

    </hmi:include>

</svg>
